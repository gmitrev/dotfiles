!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
%	matchit/plugin/matchit.vim	/^nnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'n') <CR>$/;"	m
%	matchit/plugin/matchit.vim	/^onoremap <silent> %  v:<C-U>call <SID>Match_wrapper('',1,'o') <CR>$/;"	m
%	matchit/plugin/matchit.vim	/^vnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'v') <CR>m'gv``$/;"	m
<C-G>S	vim-surround/plugin/surround.vim	/^  imap      <C-G>S <Plug>ISurround$/;"	m
<C-G>s	vim-surround/plugin/surround.vim	/^  imap      <C-G>s <Plug>Isurround$/;"	m
<C-S>	vim-surround/plugin/surround.vim	/^    imap    <C-S> <Plug>Isurround$/;"	m
<C-X><CR>	vim-endwise/plugin/endwise.vim	/^  imap <C-X><CR> <CR><Plug>AlwaysEnd$/;"	m
<CR>	vim-endwise/plugin/endwise.vim	/^  imap <CR>      <CR><Plug>DiscretionaryEnd$/;"	m
<Leader>a	vim-autoclose/plugin/autoclose.vim	/^    nmap <unique> <Leader>a <Plug>ToggleAutoCloseMappings$/;"	m
<Leader>cd	rooter/plugin/rooter.vim	/^  map <silent> <unique> <Leader>cd <Plug>RooterChangeToRootDirectory$/;"	m
<Leader>ig	vim-indent-guides/plugin/indent_guides.vim	/^nmap <Leader>ig :IndentGuidesToggle<CR>$/;"	m
<LocalLeader>%	xmledit/ftplugin/eruby.vim	/^nnoremap <buffer> <LocalLeader>% :call <SID>TagMatch1()<Cr>$/;"	m
<LocalLeader>%	xmledit/ftplugin/eruby.vim	/^vnoremap <buffer> <LocalLeader>% <Esc>:call <SID>VisualTag()<Cr>$/;"	m
<LocalLeader>%	xmledit/ftplugin/html.vim	/^nnoremap <buffer> <LocalLeader>% :call <SID>TagMatch1()<Cr>$/;"	m
<LocalLeader>%	xmledit/ftplugin/html.vim	/^vnoremap <buffer> <LocalLeader>% <Esc>:call <SID>VisualTag()<Cr>$/;"	m
<LocalLeader>%	xmledit/ftplugin/xml.vim	/^nnoremap <buffer> <LocalLeader>% :call <SID>TagMatch1()<Cr>$/;"	m
<LocalLeader>%	xmledit/ftplugin/xml.vim	/^vnoremap <buffer> <LocalLeader>% <Esc>:call <SID>VisualTag()<Cr>$/;"	m
<LocalLeader>.	xmledit/ftplugin/eruby.vim	/^    inoremap <buffer> <LocalLeader>. >$/;"	m
<LocalLeader>.	xmledit/ftplugin/html.vim	/^    inoremap <buffer> <LocalLeader>. >$/;"	m
<LocalLeader>.	xmledit/ftplugin/xml.vim	/^    inoremap <buffer> <LocalLeader>. >$/;"	m
<LocalLeader>5	xmledit/ftplugin/eruby.vim	/^nnoremap <buffer> <LocalLeader>5 :call <SID>TagMatch1()<Cr>$/;"	m
<LocalLeader>5	xmledit/ftplugin/eruby.vim	/^vnoremap <buffer> <LocalLeader>5 <Esc>:call <SID>VisualTag()<Cr>$/;"	m
<LocalLeader>5	xmledit/ftplugin/html.vim	/^nnoremap <buffer> <LocalLeader>5 :call <SID>TagMatch1()<Cr>$/;"	m
<LocalLeader>5	xmledit/ftplugin/html.vim	/^vnoremap <buffer> <LocalLeader>5 <Esc>:call <SID>VisualTag()<Cr>$/;"	m
<LocalLeader>5	xmledit/ftplugin/xml.vim	/^nnoremap <buffer> <LocalLeader>5 :call <SID>TagMatch1()<Cr>$/;"	m
<LocalLeader>5	xmledit/ftplugin/xml.vim	/^vnoremap <buffer> <LocalLeader>5 <Esc>:call <SID>VisualTag()<Cr>$/;"	m
<LocalLeader><LocalLeader>	xmledit/ftplugin/eruby.vim	/^inoremap <buffer> <LocalLeader><LocalLeader> <Esc>:call <SID>EditFromJump()<Cr>$/;"	m
<LocalLeader><LocalLeader>	xmledit/ftplugin/eruby.vim	/^nnoremap <buffer> <LocalLeader><LocalLeader> :call <SID>EditFromJump()<Cr>$/;"	m
<LocalLeader><LocalLeader>	xmledit/ftplugin/html.vim	/^inoremap <buffer> <LocalLeader><LocalLeader> <Esc>:call <SID>EditFromJump()<Cr>$/;"	m
<LocalLeader><LocalLeader>	xmledit/ftplugin/html.vim	/^nnoremap <buffer> <LocalLeader><LocalLeader> :call <SID>EditFromJump()<Cr>$/;"	m
<LocalLeader><LocalLeader>	xmledit/ftplugin/xml.vim	/^inoremap <buffer> <LocalLeader><LocalLeader> <Esc>:call <SID>EditFromJump()<Cr>$/;"	m
<LocalLeader><LocalLeader>	xmledit/ftplugin/xml.vim	/^nnoremap <buffer> <LocalLeader><LocalLeader> :call <SID>EditFromJump()<Cr>$/;"	m
<LocalLeader>>	xmledit/ftplugin/eruby.vim	/^    inoremap <buffer> <LocalLeader>> >$/;"	m
<LocalLeader>>	xmledit/ftplugin/html.vim	/^    inoremap <buffer> <LocalLeader>> >$/;"	m
<LocalLeader>>	xmledit/ftplugin/xml.vim	/^    inoremap <buffer> <LocalLeader>> >$/;"	m
<LocalLeader>d	xmledit/ftplugin/eruby.vim	/^nnoremap <buffer> <LocalLeader>d :call <SID>DeleteTag()<Cr>$/;"	m
<LocalLeader>d	xmledit/ftplugin/html.vim	/^nnoremap <buffer> <LocalLeader>d :call <SID>DeleteTag()<Cr>$/;"	m
<LocalLeader>d	xmledit/ftplugin/xml.vim	/^nnoremap <buffer> <LocalLeader>d :call <SID>DeleteTag()<Cr>$/;"	m
<LocalLeader>w	xmledit/ftplugin/eruby.vim	/^nnoremap <buffer> <LocalLeader>w :call <SID>ClearJumpMarks()<Cr>$/;"	m
<LocalLeader>w	xmledit/ftplugin/html.vim	/^nnoremap <buffer> <LocalLeader>w :call <SID>ClearJumpMarks()<Cr>$/;"	m
<LocalLeader>w	xmledit/ftplugin/xml.vim	/^nnoremap <buffer> <LocalLeader>w :call <SID>ClearJumpMarks()<Cr>$/;"	m
<LocalLeader>x	xmledit/ftplugin/eruby.vim	/^vnoremap <buffer> <LocalLeader>x "xx:call <SID>WrapTag(@x)<Cr>$/;"	m
<LocalLeader>x	xmledit/ftplugin/html.vim	/^vnoremap <buffer> <LocalLeader>x "xx:call <SID>WrapTag(@x)<Cr>$/;"	m
<LocalLeader>x	xmledit/ftplugin/xml.vim	/^vnoremap <buffer> <LocalLeader>x "xx:call <SID>WrapTag(@x)<Cr>$/;"	m
<M-o>	vim-endwise/plugin/endwise.vim	/^  inoremap <M-o> <C-O>o$/;"	m
<Plug>(xmpfilter-mark)	vim-ruby-xmpfilter/plugin/xmpfilter.vim	/^inoremap <silent> <Plug>(xmpfilter-mark) <C-o>:call xmpfilter#toggle_mark('i')<CR>$/;"	m
<Plug>(xmpfilter-mark)	vim-ruby-xmpfilter/plugin/xmpfilter.vim	/^nnoremap <silent> <Plug>(xmpfilter-mark)      :call xmpfilter#toggle_mark('n')<CR>$/;"	m
<Plug>(xmpfilter-mark)	vim-ruby-xmpfilter/plugin/xmpfilter.vim	/^vnoremap <silent> <Plug>(xmpfilter-mark)      :call xmpfilter#toggle_mark('v')<CR>$/;"	m
<Plug>(xmpfilter-run)	vim-ruby-xmpfilter/plugin/xmpfilter.vim	/^inoremap <silent> <Plug>(xmpfilter-run)   <C-o>:call xmpfilter#run('i')<CR>$/;"	m
<Plug>(xmpfilter-run)	vim-ruby-xmpfilter/plugin/xmpfilter.vim	/^nnoremap <silent> <Plug>(xmpfilter-run)        :call xmpfilter#run('n')<CR>$/;"	m
<Plug>(xmpfilter-run)	vim-ruby-xmpfilter/plugin/xmpfilter.vim	/^vnoremap <silent> <Plug>(xmpfilter-run)        :call xmpfilter#run('v')<CR>$/;"	m
<Plug>AlwaysEnd	vim-endwise/plugin/endwise.vim	/^  imap    <script> <Plug>AlwaysEnd        <SID>AlwaysEnd$/;"	m
<Plug>ClojureCloseResultBuffer.	VimClojure/plugin/clojure.vim	/^nnoremap <Plug>ClojureCloseResultBuffer. :call vimclojure#ResultWindow.CloseWindow()<CR>$/;"	m
<Plug>ClojureReplDownHistory.	VimClojure/plugin/clojure.vim	/^inoremap <Plug>ClojureReplDownHistory. <C-O>:call b:vimclojure_repl.downHistory()<CR>$/;"	m
<Plug>ClojureReplEnterHook.	VimClojure/plugin/clojure.vim	/^inoremap <Plug>ClojureReplEnterHook. <Esc>:call b:vimclojure_repl.enterHook()<CR>$/;"	m
<Plug>ClojureReplEvaluate.	VimClojure/plugin/clojure.vim	/^inoremap <Plug>ClojureReplEvaluate. <Esc>G$:call b:vimclojure_repl.enterHook()<CR>$/;"	m
<Plug>ClojureReplHatHook.	VimClojure/plugin/clojure.vim	/^nnoremap <Plug>ClojureReplHatHook. :call b:vimclojure_repl.hatHook()<CR>$/;"	m
<Plug>ClojureReplUpHistory.	VimClojure/plugin/clojure.vim	/^inoremap <Plug>ClojureReplUpHistory. <C-O>:call b:vimclojure_repl.upHistory()<CR>$/;"	m
<Plug>Commentary	vim-commentary/plugin/commentary.vim	/^nnoremap <silent> <Plug>Commentary     :<C-U>set opfunc=<SID>go<CR>g@$/;"	m
<Plug>CommentaryLine	vim-commentary/plugin/commentary.vim	/^nnoremap <silent> <Plug>CommentaryLine :<C-U>call <SID>go(v:count1)<CR>$/;"	m
<Plug>Csurround	vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>DiscretionaryEnd	vim-endwise/plugin/endwise.vim	/^  imap    <script> <Plug>DiscretionaryEnd <SID>DiscretionaryEnd$/;"	m
<Plug>Dsurround	vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>ISurround	vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>Isurround	vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>RooterChangeToRootDirectory	rooter/plugin/rooter.vim	/^noremap <unique> <script> <Plug>RooterChangeToRootDirectory <SID>ChangeToRootDirectory$/;"	m
<Plug>ToggleAutoCloseMappings	vim-autoclose/plugin/autoclose.vim	/^nmap <Plug>ToggleAutoCloseMappings :call <SID>ToggleAutoCloseMappings()<CR>$/;"	m
<Plug>VSurround	vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 : 0)<CR>$/;"	m
<Plug>VgSurround	vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 : 1)<CR>$/;"	m
<Plug>YSsurround	vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>YSsurround :<C-U>call <SID>opfunc2(v:count1)<CR>$/;"	m
<Plug>YSurround	vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>YSurround  :<C-U>set opfunc=<SID>opfunc2<CR>g@$/;"	m
<Plug>Yssurround	vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Yssurround :<C-U>call <SID>opfunc(v:count1)<CR>$/;"	m
<Plug>Ysurround	vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Ysurround  :<C-U>set opfunc=<SID>opfunc<CR>g@$/;"	m
<SID>AlwaysEnd	vim-endwise/plugin/endwise.vim	/^  inoremap <silent> <SID>AlwaysEnd        <C-R>=<SID>crend(1)<CR>$/;"	m
<SID>ChangeToRootDirectory	rooter/plugin/rooter.vim	/^noremap <SID>ChangeToRootDirectory :call <SID>ChangeToRootDirectory()<CR>$/;"	m
<SID>DiscretionaryEnd	vim-endwise/plugin/endwise.vim	/^  inoremap <silent> <SID>DiscretionaryEnd <C-R>=<SID>crend(0)<CR>$/;"	m
<SID>xx	rcodetools/plugin/rcodetools.vim	/^map <SID>xx <SID>xx$/;"	m
<SID>xx	vim-rails/autoload/rails.vim	/^map <SID>xx <SID>xx$/;"	m
>	xmledit/ftplugin/eruby.vim	/^    inoremap <buffer> > <Esc>:call <SID>InsertGt()<Cr>$/;"	m
>	xmledit/ftplugin/html.vim	/^    inoremap <buffer> > <Esc>:call <SID>InsertGt()<Cr>$/;"	m
>	xmledit/ftplugin/xml.vim	/^    inoremap <buffer> > <Esc>:call <SID>InsertGt()<Cr>$/;"	m
ARCHIVE	vim-coffee-script/Makefile	/^ARCHIVE = vim-coffee-script-$(VERSION).zip$/;"	m
ARCHIVE_DIRS	vim-coffee-script/Makefile	/^ARCHIVE_DIRS = after compiler doc ftdetect ftplugin indent syntax$/;"	m
Abbrev	vim-rails/autoload/rails.vim	/^function! s:Abbrev(bang,...) abort$/;"	f
AcceptSelection	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:AcceptSelection(mode)$/;"	f
Ack	ack/plugin/ack.vim	/^command! -nargs=* -complete=file Ack call Ack(<q-args>)$/;"	c
Ack	ack/plugin/ack.vim	/^function! Ack(args)$/;"	f
AckAdd	ack/plugin/ack.vim	/^command! -nargs=* -complete=file AckAdd call AckAdd(<q-args>)$/;"	c
AckAdd	ack/plugin/ack.vim	/^function! AckAdd(args)$/;"	f
AddBracketExpand	vim-rails/autoload/rails.vim	/^function! s:AddBracketExpand(abbr,expn)$/;"	f
AddColonExpand	vim-rails/autoload/rails.vim	/^function! s:AddColonExpand(abbr,expn)$/;"	f
AddDivider	vim-powerline/autoload/Pl/Parser.vim	/^function! s:AddDivider(text, side, mode, colors, prev, curr, next) " {{{$/;"	f
AddParenExpand	vim-rails/autoload/rails.vim	/^function! s:AddParenExpand(abbr,expn,...)$/;"	f
AddScopedTags	tagbar/autoload/tagbar.vim	/^function! s:AddScopedTags(tags, processedtags, parent, depth,$/;"	f
AddSelectiveExpand	vim-rails/autoload/rails.vim	/^function! s:AddSelectiveExpand(abbr,pat,expn,...)$/;"	f
AddTabExpand	vim-rails/autoload/rails.vim	/^function! s:AddTabExpand(abbr,expn)$/;"	f
AddTabularPattern	tabular/plugin/Tabular.vim	/^com! -nargs=+ -bang AddTabularPattern$/;"	c
AddTabularPattern	tabular/plugin/Tabular.vim	/^function! AddTabularPattern(command, force)$/;"	f
AddTabularPipeline	tabular/plugin/Tabular.vim	/^com! -nargs=+ -bang AddTabularPipeline$/;"	c
AddTabularPipeline	tabular/plugin/Tabular.vim	/^function! AddTabularPipeline(command, force)$/;"	f
Alternate	vim-rails/autoload/rails.vim	/^function! s:Alternate(cmd,line1,line2,count,...)$/;"	f
AutoUpdate	tagbar/autoload/tagbar.vim	/^function! s:AutoUpdate(fname, force) abort$/;"	f
BaseTag.New	tagbar/autoload/tagbar.vim	/^function! s:BaseTag.New(name) abort dict$/;"	f
BaseTag._getPrefix	tagbar/autoload/tagbar.vim	/^function! s:BaseTag._getPrefix() abort dict$/;"	f
BaseTag._init	tagbar/autoload/tagbar.vim	/^function! s:BaseTag._init(name) abort dict$/;"	f
BaseTag.closeFold	tagbar/autoload/tagbar.vim	/^function! s:BaseTag.closeFold() abort dict$/;"	f
BaseTag.getClosedParentTline	tagbar/autoload/tagbar.vim	/^function! s:BaseTag.getClosedParentTline() abort dict$/;"	f
BaseTag.getPrototype	tagbar/autoload/tagbar.vim	/^function! s:BaseTag.getPrototype(short) abort dict$/;"	f
BaseTag.initFoldState	tagbar/autoload/tagbar.vim	/^function! s:BaseTag.initFoldState() abort dict$/;"	f
BaseTag.isFoldable	tagbar/autoload/tagbar.vim	/^function! s:BaseTag.isFoldable() abort dict$/;"	f
BaseTag.isFolded	tagbar/autoload/tagbar.vim	/^function! s:BaseTag.isFolded() abort dict$/;"	f
BaseTag.isKindheader	tagbar/autoload/tagbar.vim	/^function! s:BaseTag.isKindheader() abort dict$/;"	f
BaseTag.isNormalTag	tagbar/autoload/tagbar.vim	/^function! s:BaseTag.isNormalTag() abort dict$/;"	f
BaseTag.isPseudoTag	tagbar/autoload/tagbar.vim	/^function! s:BaseTag.isPseudoTag() abort dict$/;"	f
BaseTag.openFold	tagbar/autoload/tagbar.vim	/^function! s:BaseTag.openFold() abort dict$/;"	f
BaseTag.openParents	tagbar/autoload/tagbar.vim	/^function! s:BaseTag.openParents() abort dict$/;"	f
BaseTag.setFolded	tagbar/autoload/tagbar.vim	/^function! s:BaseTag.setFolded(folded) abort dict$/;"	f
Blame	vim-fugitive/plugin/fugitive.vim	/^function! s:Blame(bang,line1,line2,count,args) abort$/;"	f
BlameCommit	vim-fugitive/plugin/fugitive.vim	/^function! s:BlameCommit(cmd) abort$/;"	f
BlameJump	vim-fugitive/plugin/fugitive.vim	/^function! s:BlameJump(suffix) abort$/;"	f
BlameSyntax	vim-fugitive/plugin/fugitive.vim	/^function! s:BlameSyntax() abort$/;"	f
Browse	vim-fugitive/plugin/fugitive.vim	/^function! s:Browse(bang,line1,count,...) abort$/;"	f
BufAbbreviations	vim-rails/autoload/rails.vim	/^function! s:BufAbbreviations()$/;"	f
BufCommands	vim-rails/autoload/rails.vim	/^function! s:BufCommands()$/;"	f
BufDatabase	vim-rails/autoload/rails.vim	/^function! s:BufDatabase(...)$/;"	f
BufFinderCommands	vim-rails/autoload/rails.vim	/^function! s:BufFinderCommands()$/;"	f
BufHasErrors	syntastic/plugin/syntastic.vim	/^function! s:BufHasErrors()$/;"	f
BufHasErrorsOrWarnings	syntastic/plugin/syntastic.vim	/^function! s:BufHasErrorsOrWarnings()$/;"	f
BufHasErrorsOrWarningsToDisplay	syntastic/plugin/syntastic.vim	/^function! s:BufHasErrorsOrWarningsToDisplay()$/;"	f
BufInit	vim-rails/plugin/rails.vim	/^function! s:BufInit(path)$/;"	f
BufMappings	vim-rails/autoload/rails.vim	/^function! s:BufMappings()$/;"	f
BufModelines	vim-rails/autoload/rails.vim	/^function! s:BufModelines()$/;"	f
BufNavCommands	vim-rails/autoload/rails.vim	/^function! s:BufNavCommands()$/;"	f
BufReadIndex	vim-fugitive/plugin/fugitive.vim	/^function! s:BufReadIndex()$/;"	f
BufReadIndexFile	vim-fugitive/plugin/fugitive.vim	/^function! s:BufReadIndexFile()$/;"	f
BufReadObject	vim-fugitive/plugin/fugitive.vim	/^function! s:BufReadObject()$/;"	f
BufScriptWrappers	vim-rails/autoload/rails.vim	/^function! s:BufScriptWrappers()$/;"	f
BufSettings	vim-rails/autoload/rails.vim	/^function! s:BufSettings()$/;"	f
BufSignIds	syntastic/plugin/syntastic.vim	/^function! s:BufSignIds()$/;"	f
BufSyntax	vim-rails/autoload/rails.vim	/^function! s:BufSyntax()$/;"	f
BufWriteIndexFile	vim-fugitive/plugin/fugitive.vim	/^function! s:BufWriteIndexFile()$/;"	f
BuildPrompt	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:BuildPrompt(upd)$/;"	f
BuildTagName	xmledit/ftplugin/eruby.vim	/^function s:BuildTagName( )$/;"	f
BuildTagName	xmledit/ftplugin/html.vim	/^function s:BuildTagName( )$/;"	f
BuildTagName	xmledit/ftplugin/xml.vim	/^function s:BuildTagName( )$/;"	f
Bundle	vim-bundler/plugin/bundler.vim	/^function! s:Bundle(bang,arg)$/;"	f
BundleComplete	vim-bundler/plugin/bundler.vim	/^function! s:BundleComplete(A,L,P)$/;"	f
CacheErrors	syntastic/plugin/syntastic.vim	/^function! s:CacheErrors()$/;"	f
Callback	xmledit/ftplugin/eruby.vim	/^function s:Callback( xml_tag, isHtml )$/;"	f
Callback	xmledit/ftplugin/html.vim	/^function s:Callback( xml_tag, isHtml )$/;"	f
Callback	xmledit/ftplugin/xml.vim	/^function s:Callback( xml_tag, isHtml )$/;"	f
Center	tabular/autoload/tabular.vim	/^function! s:Center(string, fieldwidth)$/;"	f
ChangeToRootDirectory	rooter/plugin/rooter.vim	/^function! s:ChangeToRootDirectory()$/;"	f
CheckConditions	vim-powerline/autoload/Pl/Segment.vim	/^function! s:CheckConditions(params) " {{{$/;"	f
CheckExCtagsVersion	tagbar/autoload/tagbar.vim	/^function! s:CheckExCtagsVersion(output) abort$/;"	f
CheckFTCtags	tagbar/autoload/tagbar.vim	/^function! s:CheckFTCtags(bin, ftype) abort$/;"	f
CheckForExCtags	tagbar/autoload/tagbar.vim	/^function! s:CheckForExCtags(silent) abort$/;"	f
CheckForString	VimClojure/indent/clojure.vim	/^function! s:CheckForString()$/;"	f
CheckMouseClick	tagbar/autoload/tagbar.vim	/^function! s:CheckMouseClick() abort$/;"	f
Checkable	syntastic/plugin/syntastic.vim	/^function! s:Checkable(ft)$/;"	f
Choose	matchit/plugin/matchit.vim	/^fun! s:Choose(patterns, string, comma, branch, prefix, suffix, ...)$/;"	f
ChooseCommandMap	tabular/plugin/Tabular.vim	/^function! s:ChooseCommandMap(commandline)$/;"	f
CleanUp	matchit/plugin/matchit.vim	/^fun! s:CleanUp(options, mode, startline, startcol, ...)$/;"	f
ClearAllCtrlPCaches	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar ClearAllCtrlPCaches cal ctrlp#clra()$/;"	c
ClearCtrlPCache	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar ClearCtrlPCache     cal ctrlp#clr()$/;"	c
ClearErrorHighlights	syntastic/plugin/syntastic.vim	/^function! s:ClearErrorHighlights()$/;"	f
ClearJumpMarks	xmledit/ftplugin/eruby.vim	/^function s:ClearJumpMarks( )$/;"	f
ClearJumpMarks	xmledit/ftplugin/html.vim	/^function s:ClearJumpMarks( )$/;"	f
ClearJumpMarks	xmledit/ftplugin/xml.vim	/^function s:ClearJumpMarks( )$/;"	f
ClojureCheckForStringWorker	VimClojure/indent/clojure.vim	/^function! ClojureCheckForStringWorker() dict$/;"	f
ClojureEvalParagraphWorker	VimClojure/autoload/vimclojure.vim	/^function! ClojureEvalParagraphWorker() dict$/;"	f
ClojureExtractSexprWorker	VimClojure/autoload/vimclojure.vim	/^function! ClojureExtractSexprWorker() dict$/;"	f
ClojureGetFoldingLevel	VimClojure/ftplugin/clojure.vim	/^function! ClojureGetFoldingLevel(lineno)$/;"	f
ClojureGetFoldingLevelWorker	VimClojure/ftplugin/clojure.vim	/^function! ClojureGetFoldingLevelWorker() dict$/;"	f
ClojureIsMethodSpecialCaseWorker	VimClojure/indent/clojure.vim	/^function! ClojureIsMethodSpecialCaseWorker() dict$/;"	f
ClojureRepl	VimClojure/plugin/clojure.vim	/^command! -nargs=0 ClojureRepl call vimclojure#StartRepl()$/;"	c
ClojureShellEscapeArgumentsWorker	VimClojure/autoload/vimclojure.vim	/^function! ClojureShellEscapeArgumentsWorker() dict$/;"	f
Close	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Close()$/;"	f
CloseFold	tagbar/autoload/tagbar.vim	/^function! s:CloseFold() abort$/;"	f
CloseStackPop	vim-autoclose/plugin/autoclose.vim	/^function <SID>CloseStackPop(char) " ---{{{2$/;"	f
CloseStackPush	vim-autoclose/plugin/autoclose.vim	/^function <SID>CloseStackPush(char) " ---{{{2$/;"	f
CloseWindow	tagbar/autoload/tagbar.vim	/^function! s:CloseWindow() abort$/;"	f
CoffeeCompile	vim-coffee-script/ftplugin/coffee.vim	/^\\        CoffeeCompile call s:CoffeeCompile(<line1>, <line2>, <q-args>)$/;"	c
CoffeeCompile	vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeCompile(startline, endline, args)$/;"	f
CoffeeCompileClose	vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeCompileClose()$/;"	f
CoffeeCompileComplete	vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeCompileComplete(arg, cmdline, cursor)$/;"	f
CoffeeCompileResetVars	vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeCompileResetVars()$/;"	f
CoffeeCompileUpdate	vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeCompileUpdate(startline, endline)$/;"	f
CoffeeCompileWatchUpdate	vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeCompileWatchUpdate()$/;"	f
CoffeeLint	vim-coffee-script/ftplugin/coffee.vim	/^command! -range=% -bang -bar -nargs=* CoffeeLint$/;"	c
CoffeeLint	vim-coffee-script/ftplugin/coffee.vim	/^function! s:CoffeeLint(startline, endline, bang, args)$/;"	f
CoffeeMake	vim-coffee-script/compiler/coffee.vim	/^command! -bang -bar -nargs=* CoffeeMake make<bang> <args>$/;"	c
CoffeeRun	vim-coffee-script/ftplugin/coffee.vim	/^command! -range=% -bar CoffeeRun <line1>,<line2>:w !coffee -s$/;"	c
CoffeeUpdateMakePrg	vim-coffee-script/compiler/coffee.vim	/^augroup CoffeeUpdateMakePrg$/;"	a
CommandEdit	vim-rails/autoload/rails.vim	/^function! s:CommandEdit(cmd,name,prefix,suffix,filter,default,...)$/;"	f
CommandList	vim-rails/autoload/rails.vim	/^function! s:CommandList(A,L,P)$/;"	f
Commit	vim-fugitive/plugin/fugitive.vim	/^function! s:Commit(args) abort$/;"	f
CommitComplete	vim-fugitive/plugin/fugitive.vim	/^function! s:CommitComplete(A,L,P) abort$/;"	f
CompareByKind	tagbar/autoload/tagbar.vim	/^function! s:CompareByKind(tag1, tag2) abort$/;"	f
CompareByLine	tagbar/autoload/tagbar.vim	/^function! s:CompareByLine(tag1, tag2) abort$/;"	f
CompleteTabularizeCommand	tabular/plugin/Tabular.vim	/^function! s:CompleteTabularizeCommand(argstart, cmdline, cursorpos)$/;"	f
Complete_cd	vim-rails/autoload/rails.vim	/^function! s:Complete_cd(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_console	vim-rails/autoload/rails.vim	/^function! s:Complete_console(A,L,P)$/;"	f
Complete_destroy	vim-rails/autoload/rails.vim	/^function! s:Complete_destroy(A,L,P)$/;"	f
Complete_edit	vim-rails/autoload/rails.vim	/^function! s:Complete_edit(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_environments	vim-rails/autoload/rails.vim	/^function! s:Complete_environments(...)$/;"	f
Complete_find	vim-rails/autoload/rails.vim	/^function! s:Complete_find(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_generate	vim-rails/autoload/rails.vim	/^function! s:Complete_generate(A,L,P)$/;"	f
Complete_preview	vim-rails/autoload/rails.vim	/^function! s:Complete_preview(A,L,P)$/;"	f
Complete_rake	vim-rails/autoload/rails.vim	/^function! s:Complete_rake(A,L,P)$/;"	f
Complete_related	vim-rails/autoload/rails.vim	/^function! s:Complete_related(A,L,P)$/;"	f
Complete_ruby	vim-rails/autoload/rails.vim	/^function! s:Complete_ruby(A,L,P)$/;"	f
Complete_script	vim-rails/autoload/rails.vim	/^function! s:Complete_script(ArgLead,CmdLine,P)$/;"	f
Complete_server	vim-rails/autoload/rails.vim	/^function! s:Complete_server(A,L,P)$/;"	f
Complete_set	vim-rails/autoload/rails.vim	/^function! s:Complete_set(A,L,P)$/;"	f
CorrectFocusOnStartup	tagbar/autoload/tagbar.vim	/^function! s:CorrectFocusOnStartup() abort$/;"	f
Count	matchit/plugin/matchit.vim	/^fun! s:Count(string, pattern, ...)$/;"	f
CreateAutocommands	tagbar/autoload/tagbar.vim	/^function! s:CreateAutocommands() abort$/;"	f
CreateCoordKeyDict	vim-easymotion/autoload/EasyMotion.vim	/^		function! s:CreateCoordKeyDict(groups, ...)$/;"	f
CreateMenus	vim-rails/plugin/rails.vim	/^function! s:CreateMenus() abort$/;"	f
CreateNewFile	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:CreateNewFile(...)$/;"	f
CreatePseudoTag	tagbar/autoload/tagbar.vim	/^function! s:CreatePseudoTag(name, parent, scope, typeinfo, fileinfo) abort$/;"	f
Cterm2GUI	vim-powerline/autoload/Pl/Hi.vim	/^function! s:Cterm2GUI(cterm) " {{{$/;"	f
CtrlP	ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=custom,ctrlp#utils#dircompl CtrlP$/;"	c
CtrlPAug	ctrlp.vim/autoload/ctrlp.vim	/^	aug CtrlPAug$/;"	a
CtrlPBookmarkDir	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPBookmarkDir cal ctrlp#init(ctrlp#bookmarkdir#id())$/;"	c
CtrlPBookmarkDirAdd	ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=custom,ctrlp#utils#dircompl CtrlPBookmarkDirAdd$/;"	c
CtrlPBufTag	ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=buffer CtrlPBufTag$/;"	c
CtrlPBufTagAll	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPBufTagAll cal ctrlp#init(ctrlp#buffertag#cmd(1))$/;"	c
CtrlPBuffer	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPBuffer   cal ctrlp#init(1)$/;"	c
CtrlPChange	ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=buffer CtrlPChange$/;"	c
CtrlPChangeAll	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPChangeAll   cal ctrlp#init(ctrlp#changes#cmd(1))$/;"	c
CtrlPClearAllCaches	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPClearAllCaches cal ctrlp#clra()$/;"	c
CtrlPClearCache	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPClearCache     cal ctrlp#clr()$/;"	c
CtrlPCurFile	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPCurFile cal ctrlp#init(0, { 'mode': 'c' })$/;"	c
CtrlPCurWD	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPCurWD   cal ctrlp#init(0, { 'mode': '' })$/;"	c
CtrlPDir	ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=custom,ctrlp#utils#dircompl CtrlPDir$/;"	c
CtrlPLastMode	ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? CtrlPLastMode cal ctrlp#init(-1, { 'args': <q-args> })$/;"	c
CtrlPLine	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPLine      cal ctrlp#init(ctrlp#line#id())$/;"	c
CtrlPMRUFiles	ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=custom,ctrlp#utils#dircompl CtrlPMRUFiles$/;"	c
CtrlPMixed	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPMixed       cal ctrlp#init(ctrlp#mixed#id())$/;"	c
CtrlPQuickfix	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPQuickfix cal ctrlp#init(ctrlp#quickfix#id())$/;"	c
CtrlPRTS	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPRTS       cal ctrlp#init(ctrlp#rtscript#id())$/;"	c
CtrlPRoot	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPRoot    cal ctrlp#init(0, { 'mode': 'r' })$/;"	c
CtrlPTag	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPTag      cal ctrlp#init(ctrlp#tag#id())$/;"	c
CtrlPUndo	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPUndo      cal ctrlp#init(ctrlp#undo#id())$/;"	c
CustomComplete	vim-rails/autoload/rails.vim	/^function! s:CustomComplete(A,L,P,cmd)$/;"	f
DeleteTag	xmledit/ftplugin/eruby.vim	/^function s:DeleteTag( )$/;"	f
DeleteTag	xmledit/ftplugin/html.vim	/^function s:DeleteTag( )$/;"	f
DeleteTag	xmledit/ftplugin/xml.vim	/^function s:DeleteTag( )$/;"	f
Detect	vim-bundler/plugin/bundler.vim	/^function! s:Detect(path)$/;"	f
Detect	vim-fugitive/plugin/fugitive.vim	/^function! s:Detect(path)$/;"	f
Detect	vim-rails/plugin/rails.vim	/^function! s:Detect(filename)$/;"	f
Detect	vim-rake/plugin/rake.vim	/^function! s:Detect(path)$/;"	f
DetectCoffee	vim-coffee-script/ftdetect/coffee.vim	/^function! s:DetectCoffee()$/;"	f
DetectFiletype	tagbar/autoload/tagbar.vim	/^function! s:DetectFiletype(bufnr) abort$/;"	f
Diff	vim-fugitive/plugin/fugitive.vim	/^function! s:Diff(bang,...) abort$/;"	f
DirComplete	vim-fugitive/plugin/fugitive.vim	/^function! s:DirComplete(A,L,P) abort$/;"	f
DirComplete	vim-rake/plugin/rake.vim	/^function! s:DirComplete(A,L,P) abort$/;"	f
DoYank	VimClojure/autoload/vimclojure/util.vim	/^function! s:DoYank() dict$/;"	f
Doc	vim-rails/autoload/rails.vim	/^function! s:Doc(bang, string)$/;"	f
EasyMotion	vim-easymotion/autoload/EasyMotion.vim	/^	function! s:EasyMotion(regexp, direction, visualmode, mode) " {{{$/;"	f
EasyMotion#E	vim-easymotion/autoload/EasyMotion.vim	/^	function! EasyMotion#E(visualmode, direction) " {{{$/;"	f
EasyMotion#EW	vim-easymotion/autoload/EasyMotion.vim	/^	function! EasyMotion#EW(visualmode, direction) " {{{$/;"	f
EasyMotion#F	vim-easymotion/autoload/EasyMotion.vim	/^	function! EasyMotion#F(visualmode, direction) " {{{$/;"	f
EasyMotion#InitHL	vim-easymotion/autoload/EasyMotion.vim	/^	function! EasyMotion#InitHL(group, colors) " {{{$/;"	f
EasyMotion#InitMappings	vim-easymotion/autoload/EasyMotion.vim	/^	function! EasyMotion#InitMappings(motions) "{{{$/;"	f
EasyMotion#InitOptions	vim-easymotion/autoload/EasyMotion.vim	/^	function! EasyMotion#InitOptions(options) " {{{$/;"	f
EasyMotion#JK	vim-easymotion/autoload/EasyMotion.vim	/^	function! EasyMotion#JK(visualmode, direction) " {{{$/;"	f
EasyMotion#Search	vim-easymotion/autoload/EasyMotion.vim	/^	function! EasyMotion#Search(visualmode, direction) " {{{$/;"	f
EasyMotion#T	vim-easymotion/autoload/EasyMotion.vim	/^	function! EasyMotion#T(visualmode, direction) " {{{$/;"	f
EasyMotion#WB	vim-easymotion/autoload/EasyMotion.vim	/^	function! EasyMotion#WB(visualmode, direction) " {{{$/;"	f
EasyMotion#WBW	vim-easymotion/autoload/EasyMotion.vim	/^	function! EasyMotion#WBW(visualmode, direction) " {{{$/;"	f
EasyMotionInitHL	vim-easymotion/plugin/EasyMotion.vim	/^			augroup EasyMotionInitHL$/;"	a
EchoCurrentError	syntastic/plugin/syntastic.vim	/^function! s:EchoCurrentError()$/;"	f
Edit	vim-fugitive/plugin/fugitive.vim	/^function! s:Edit(cmd,bang,...) abort$/;"	f
Edit	vim-rails/autoload/rails.vim	/^function! s:Edit(count,cmd,...)$/;"	f
Edit	vim-rake/plugin/rake.vim	/^function! s:Edit(cmd,bang,file)$/;"	f
EditComplete	vim-fugitive/plugin/fugitive.vim	/^function! s:EditComplete(A,L,P) abort$/;"	f
EditFromJump	xmledit/ftplugin/eruby.vim	/^function s:EditFromJump( )$/;"	f
EditFromJump	xmledit/ftplugin/html.vim	/^function s:EditFromJump( )$/;"	f
EditFromJump	xmledit/ftplugin/xml.vim	/^function s:EditFromJump( )$/;"	f
EditRunComplete	vim-fugitive/plugin/fugitive.vim	/^function! s:EditRunComplete(A,L,P) abort$/;"	f
EditSimpleRb	vim-rails/autoload/rails.vim	/^function! s:EditSimpleRb(cmd,name,target,prefix,suffix,...)$/;"	f
Errors	syntastic/plugin/syntastic.vim	/^command! Errors call s:ShowLocList()$/;"	c
Errors	syntastic/plugin/syntastic.vim	/^function s:Errors()$/;"	f
ErrorsForType	syntastic/plugin/syntastic.vim	/^function! s:ErrorsForType(type)$/;"	f
EscapeCtagsCmd	tagbar/autoload/tagbar.vim	/^function! s:EscapeCtagsCmd(ctags_bin, args, ...) abort$/;"	f
EscapeText	slimux/plugin/slimux.vim	/^function! s:EscapeText(text)$/;"	f
ExecFileTypeFn	slimux/plugin/slimux.vim	/^function! s:ExecFileTypeFn(fn_name, args)$/;"	f
ExecuteCtags	tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtags(ctags_cmd) abort$/;"	f
ExecuteCtagsOnFile	tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtagsOnFile(fname, realfname, typeinfo) abort$/;"	f
ExecuteInTree	vim-fugitive/plugin/fugitive.vim	/^function! s:ExecuteInTree(cmd) abort$/;"	f
Extract	vim-rails/autoload/rails.vim	/^function! s:Extract(bang,...) range abort$/;"	f
ExtractGitDir	vim-fugitive/plugin/fugitive.vim	/^function! s:ExtractGitDir(path) abort$/;"	f
FileInfo.New	tagbar/autoload/tagbar.vim	/^function! s:FileInfo.New(fname, ftype, typeinfo) abort dict$/;"	f
FileInfo.clearOldFolds	tagbar/autoload/tagbar.vim	/^function! s:FileInfo.clearOldFolds() abort dict$/;"	f
FileInfo.closeKindFold	tagbar/autoload/tagbar.vim	/^function! s:FileInfo.closeKindFold(kind) abort dict$/;"	f
FileInfo.openKindFold	tagbar/autoload/tagbar.vim	/^function! s:FileInfo.openKindFold(kind) abort dict$/;"	f
FileInfo.reset	tagbar/autoload/tagbar.vim	/^function! s:FileInfo.reset() abort dict$/;"	f
FileInfo.sortTags	tagbar/autoload/tagbar.vim	/^function! s:FileInfo.sortTags() abort dict$/;"	f
FileRead	vim-fugitive/plugin/fugitive.vim	/^function! s:FileRead()$/;"	f
FilterString	tabular/autoload/tabular.vim	/^function! s:FilterString(lines, commandstring)$/;"	f
Find	vim-rails/autoload/rails.vim	/^function! s:Find(count,cmd,...)$/;"	f
FindBundlerRoot	vim-bundler/plugin/bundler.vim	/^function! s:FindBundlerRoot(path) abort$/;"	f
FindComment	vim-coffee-script/indent/coffee.vim	/^function! s:FindComment(linenum)$/;"	f
FindInCurrentPath	rooter/plugin/rooter.vim	/^function! s:FindInCurrentPath(pattern)$/;"	f
FindRakeRoot	vim-rake/plugin/rake.vim	/^function! s:FindRakeRoot(path) abort$/;"	f
FindRootDirectory	rooter/plugin/rooter.vim	/^function! s:FindRootDirectory()$/;"	f
FinishCommit	vim-fugitive/plugin/fugitive.vim	/^function! s:FinishCommit()$/;"	f
ForceUpdate	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ForceUpdate()$/;"	f
GF	vim-fugitive/plugin/fugitive.vim	/^function! s:GF(mode) abort$/;"	f
GTabularize	tabular/plugin/Tabular.vim	/^   \\ GTabularize <line1>,<line2>$/;"	c
GetChar	vim-easymotion/autoload/EasyMotion.vim	/^	function! s:GetChar() " {{{$/;"	f
GetClojureIndent	VimClojure/indent/clojure.vim	/^function! GetClojureIndent()$/;"	f
GetCoffeeIndent	vim-coffee-script/indent/coffee.vim	/^function! GetCoffeeIndent(curlinenum)$/;"	f
GetIncludeDirs	syntastic/syntax_checkers/c.vim	/^function! s:GetIncludeDirs()$/;"	f
GetJSONIndent	vim-json/indent/json.vim	/^function GetJSONIndent()$/;"	f
GetMakePrg	vim-coffee-script/compiler/coffee.vim	/^function! s:GetMakePrg()$/;"	f
GetMatch	vim-coffee-script/indent/coffee.vim	/^function! s:GetMatch(curline)$/;"	f
GetNearbyTag	tagbar/autoload/tagbar.vim	/^function! s:GetNearbyTag(all, ...) abort$/;"	f
GetOption	rcodetools/plugin/rcodetools.vim	/^function! s:GetOption(name, default)$/;"	f
GetPHPCSErrors	syntastic/syntax_checkers/php.vim	/^function! s:GetPHPCSErrors()$/;"	f
GetPrevNormalLine	vim-coffee-script/indent/coffee.vim	/^function! s:GetPrevNormalLine(startlinenum)$/;"	f
GetSearchChar	vim-easymotion/autoload/EasyMotion.vim	/^	function! s:GetSearchChar(visualmode) " {{{$/;"	f
GetShell	syntastic/syntax_checkers/sh.vim	/^function! s:GetShell()$/;"	f
GetSupportedFiletypes	tagbar/autoload/tagbar.vim	/^function! s:GetSupportedFiletypes() abort$/;"	f
GetTagInfo	tagbar/autoload/tagbar.vim	/^function! s:GetTagInfo(linenr, ignorepseudo) abort$/;"	f
GetTrimmedLine	vim-coffee-script/indent/coffee.vim	/^function! s:GetTrimmedLine(linenum)$/;"	f
GetValaModules	syntastic/syntax_checkers/vala.vim	/^function! s:GetValaModules()$/;"	f
GetVisual	slimux/plugin/slimux.vim	/^function! s:GetVisual() range$/;"	f
Gist	gist-vim/plugin/gist.vim	/^command! -nargs=? -range=% Gist :call gist#Gist(<count>, <line1>, <line2>, <f-args>)$/;"	c
GistDelete	gist-vim/autoload/gist.vim	/^function! s:GistDelete(gistid)$/;"	f
GistDetectFiletype	gist-vim/autoload/gist.vim	/^function! s:GistDetectFiletype(gistid)$/;"	f
GistGet	gist-vim/autoload/gist.vim	/^function! s:GistGet(gistid, clipboard)$/;"	f
GistGetAuthHeader	gist-vim/autoload/gist.vim	/^function! s:GistGetAuthHeader()$/;"	f
GistGetFileName	gist-vim/autoload/gist.vim	/^function! s:GistGetFileName(gistid)$/;"	f
GistList	gist-vim/autoload/gist.vim	/^function! s:GistList(gistls, page)$/;"	f
GistListAction	gist-vim/autoload/gist.vim	/^function! s:GistListAction(shift)$/;"	f
GistPost	gist-vim/autoload/gist.vim	/^function! s:GistPost(content, private, desc, anonymous)$/;"	f
GistPostBuffers	gist-vim/autoload/gist.vim	/^function! s:GistPostBuffers(private, desc, anonymous)$/;"	f
GistUpdate	gist-vim/autoload/gist.vim	/^function! s:GistUpdate(content, gistid, gistnm, desc)$/;"	f
GistWrite	gist-vim/autoload/gist.vim	/^function! s:GistWrite(fname)$/;"	f
Git	vim-fugitive/plugin/fugitive.vim	/^function! s:Git(bang,cmd) abort$/;"	f
GitComplete	vim-fugitive/plugin/fugitive.vim	/^function! s:GitComplete(A,L,P) abort$/;"	f
GlobPath	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:GlobPath(dirs, depth)$/;"	f
GotoNextToplevelTag	tagbar/autoload/tagbar.vim	/^function! s:GotoNextToplevelTag(direction) abort$/;"	f
GotoPreviousWindow	tagbar/autoload/tagbar.vim	/^function! s:GotoPreviousWindow(fileinfo) abort$/;"	f
Grep	vim-fugitive/plugin/fugitive.vim	/^function! s:Grep(bang,arg) abort$/;"	f
GroupingAlgorithmOriginal	vim-easymotion/autoload/EasyMotion.vim	/^		function! s:GroupingAlgorithmOriginal(targets, keys)$/;"	f
GroupingAlgorithmSCTree	vim-easymotion/autoload/EasyMotion.vim	/^		function! s:GroupingAlgorithmSCTree(targets, keys)$/;"	f
HiDefaults	vim-rails/autoload/rails.vim	/^function! s:HiDefaults()$/;"	f
HiLink	VimClojure/syntax/clojure.vim	/^	command -nargs=+ HiLink highlight         link <args>$/;"	c
HiLink	VimClojure/syntax/clojure.vim	/^	command -nargs=+ HiLink highlight default link <args>$/;"	c
HiLink	vim-jquery/syntax/jquery.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	vim-jquery/syntax/jquery.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	vim-json/syntax/json.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	vim-json/syntax/json.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HighlightTag	tagbar/autoload/tagbar.vim	/^function! s:HighlightTag(openfolds, ...) abort$/;"	f
HlCreate	vim-powerline/autoload/Pl/Parser.vim	/^function! s:HlCreate(hl) " {{{$/;"	f
HlExists	vim-powerline/autoload/Pl/Parser.vim	/^function! s:HlExists(hl) " {{{$/;"	f
Hmac	webapi-vim/autoload/webapi/hmac.vim	/^function! s:Hmac(key, text, hash, blocksize)$/;"	f
HtmlHiLink	mustache.vim/syntax/mustache.vim	/^  command! -nargs=+ HtmlHiLink hi def link <args>$/;"	c
HtmlHiLink	mustache.vim/syntax/mustache.vim	/^  command! -nargs=+ HtmlHiLink hi link <args>$/;"	c
IndentGuidesDisable	vim-indent-guides/plugin/indent_guides.vim	/^command! -bar IndentGuidesDisable call s:IndentGuidesDisable()$/;"	c
IndentGuidesDisable	vim-indent-guides/plugin/indent_guides.vim	/^function! s:IndentGuidesDisable()$/;"	f
IndentGuidesEnable	vim-indent-guides/plugin/indent_guides.vim	/^command! -bar IndentGuidesEnable  call s:IndentGuidesEnable()$/;"	c
IndentGuidesEnable	vim-indent-guides/plugin/indent_guides.vim	/^function! s:IndentGuidesEnable()$/;"	f
IndentGuidesToggle	vim-indent-guides/plugin/indent_guides.vim	/^command! -bar IndentGuidesToggle  call s:IndentGuidesToggle()$/;"	c
IndentGuidesToggle	vim-indent-guides/plugin/indent_guides.vim	/^function! s:IndentGuidesToggle()$/;"	f
Init	syntastic/autoload/syntastic/c.vim	/^function! s:Init()$/;"	f
Init	tagbar/autoload/tagbar.vim	/^function! s:Init(silent) abort$/;"	f
InitEditFromJump	xmledit/ftplugin/eruby.vim	/^function s:InitEditFromJump( )$/;"	f
InitEditFromJump	xmledit/ftplugin/html.vim	/^function s:InitEditFromJump( )$/;"	f
InitEditFromJump	xmledit/ftplugin/xml.vim	/^function s:InitEditFromJump( )$/;"	f
InitTypes	tagbar/autoload/tagbar.vim	/^function! s:InitTypes() abort$/;"	f
InitVariable	vim-indent-guides/plugin/indent_guides.vim	/^function s:InitVariable(var, value)$/;"	f
InitWindow	tagbar/autoload/tagbar.vim	/^function! s:InitWindow(autoclose) abort$/;"	f
InsertGt	xmledit/ftplugin/eruby.vim	/^function s:InsertGt( )$/;"	f
InsertGt	xmledit/ftplugin/html.vim	/^function s:InsertGt( )$/;"	f
InsertGt	xmledit/ftplugin/xml.vim	/^function s:InsertGt( )$/;"	f
InsertRefs	matchit/plugin/matchit.vim	/^fun! s:InsertRefs(groupBR, prefix, group, suffix, matchline)$/;"	f
Invert	vim-rails/autoload/rails.vim	/^function! s:Invert(bang)$/;"	f
IsComment	vim-coffee-script/indent/coffee.vim	/^function! s:IsComment(linenum, col)$/;"	f
IsCommentLine	vim-coffee-script/indent/coffee.vim	/^function! s:IsCommentLine(linenum)$/;"	f
IsCommentOrString	vim-coffee-script/indent/coffee.vim	/^function! s:IsCommentOrString(linenum, col)$/;"	f
IsInString	vim-json/indent/json.vim	/^function s:IsInString(lnum, col)$/;"	f
IsMethodSpecialCase	VimClojure/indent/clojure.vim	/^function! s:IsMethodSpecialCase(position)$/;"	f
IsOptionSet	rcodetools/plugin/rcodetools.vim	/^function! s:IsOptionSet(name)$/;"	f
IsParsableTag	xmledit/ftplugin/eruby.vim	/^function s:IsParsableTag( tag )$/;"	f
IsParsableTag	xmledit/ftplugin/html.vim	/^function s:IsParsableTag( tag )$/;"	f
IsParsableTag	xmledit/ftplugin/xml.vim	/^function s:IsParsableTag( tag )$/;"	f
IsString	vim-coffee-script/indent/coffee.vim	/^function! s:IsString(linenum, col)$/;"	f
IsValidFile	tagbar/autoload/tagbar.vim	/^function! s:IsValidFile(fname, ftype) abort$/;"	f
JumpInit	vim-fugitive/plugin/fugitive.vim	/^function! s:JumpInit() abort$/;"	f
JumpOut	vim-autoclose/plugin/autoclose.vim	/^function <SID>JumpOut(char) " ----------{{{2$/;"	f
JumpToTag	tagbar/autoload/tagbar.vim	/^function! s:JumpToTag(stay_in_tagbar) abort$/;"	f
KeyLoop	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:KeyLoop()$/;"	f
KindheaderTag.closeFold	tagbar/autoload/tagbar.vim	/^function! s:KindheaderTag.closeFold() abort dict$/;"	f
KindheaderTag.getPrototype	tagbar/autoload/tagbar.vim	/^function! s:KindheaderTag.getPrototype(short) abort dict$/;"	f
KindheaderTag.isFoldable	tagbar/autoload/tagbar.vim	/^function! s:KindheaderTag.isFoldable() abort dict$/;"	f
KindheaderTag.isFolded	tagbar/autoload/tagbar.vim	/^function! s:KindheaderTag.isFolded() abort dict$/;"	f
KindheaderTag.isKindheader	tagbar/autoload/tagbar.vim	/^function! s:KindheaderTag.isKindheader() abort dict$/;"	f
KindheaderTag.openFold	tagbar/autoload/tagbar.vim	/^function! s:KindheaderTag.openFold() abort dict$/;"	f
KindheaderTag.toggleFold	tagbar/autoload/tagbar.vim	/^function! s:KindheaderTag.toggleFold() abort dict$/;"	f
LAck	ack/plugin/ack.vim	/^command! -nargs=* -complete=file LAck call LAck(<q-args>)$/;"	c
LAck	ack/plugin/ack.vim	/^function! LAck(args)$/;"	f
LAckAdd	ack/plugin/ack.vim	/^command! -nargs=* -complete=file LAckAdd call LAckAdd(<q-args>)$/;"	c
LAckAdd	ack/plugin/ack.vim	/^function! LAckAdd(args)$/;"	f
Left	tabular/autoload/tabular.vim	/^function! s:Left(string, fieldwidth)$/;"	f
LineHasOpeningBrackets	vim-json/indent/json.vim	/^function s:LineHasOpeningBrackets(lnum)$/;"	f
LoadUserTypeDefs	tagbar/autoload/tagbar.vim	/^function! s:LoadUserTypeDefs(...) abort$/;"	f
LocalModelines	vim-rails/autoload/rails.vim	/^function! s:LocalModelines(lnum)$/;"	f
Log	vim-fugitive/plugin/fugitive.vim	/^function! s:Log(cmd,...)$/;"	f
Log	vim-rails/autoload/rails.vim	/^function! s:Log(bang,arg)$/;"	f
LogDebugMessage	tagbar/autoload/tagbar.vim	/^function! s:LogDebugMessage(msg) abort$/;"	f
MapKeys	tagbar/autoload/tagbar.vim	/^function! s:MapKeys() abort$/;"	f
MapNorms	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MapNorms()$/;"	f
MapSpecs	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MapSpecs()$/;"	f
MarkToOpen	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MarkToOpen()$/;"	f
Match	vim-json/indent/json.vim	/^function s:Match(lnum, regex)$/;"	f
MatchDebug	matchit/plugin/matchit.vim	/^  command! -nargs=0 MatchDebug call s:Match_debug()$/;"	c
MatchIt	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MatchIt(items, pat, limit, exc)$/;"	f
MatchPairs	VimClojure/indent/clojure.vim	/^function! s:MatchPairs(open, close, stopat)$/;"	f
Match_debug	matchit/plugin/matchit.vim	/^fun! s:Match_debug()$/;"	f
Match_wrapper	matchit/plugin/matchit.vim	/^function! s:Match_wrapper(word, forward, mode) range$/;"	f
MatchedItems	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MatchedItems(items, pat, limit)$/;"	f
MaxLookback	vim-coffee-script/indent/coffee.vim	/^function! s:MaxLookback(startlinenum)$/;"	f
Message	vim-easymotion/autoload/EasyMotion.vim	/^	function! s:Message(message) " {{{$/;"	f
MisMatchedTag	xmledit/ftplugin/eruby.vim	/^function s:MisMatchedTag( id, tag )$/;"	f
MisMatchedTag	xmledit/ftplugin/html.vim	/^function s:MisMatchedTag( id, tag )$/;"	f
MisMatchedTag	xmledit/ftplugin/xml.vim	/^function s:MisMatchedTag( id, tag )$/;"	f
ModeMapAllowsAutoChecking	syntastic/plugin/syntastic.vim	/^function! s:ModeMapAllowsAutoChecking()$/;"	f
Move	vim-fugitive/plugin/fugitive.vim	/^function! s:Move(force,destination)$/;"	f
MoveComplete	vim-fugitive/plugin/fugitive.vim	/^function! s:MoveComplete(A,L,P)$/;"	f
MultiMatch	matchit/plugin/matchit.vim	/^fun! s:MultiMatch(spflag, mode)$/;"	f
Navcommand	vim-rails/autoload/rails.vim	/^function! s:Navcommand(bang,...)$/;"	f
NewFileXML	xmledit/ftplugin/eruby.vim	/^function s:NewFileXML( )$/;"	f
NewFileXML	xmledit/ftplugin/html.vim	/^function s:NewFileXML( )$/;"	f
NewFileXML	xmledit/ftplugin/xml.vim	/^function s:NewFileXML( )$/;"	f
NextNormalWindow	tagbar/autoload/tagbar.vim	/^function! s:NextNormalWindow() abort$/;"	f
NormalTag.getPrototype	tagbar/autoload/tagbar.vim	/^function! s:NormalTag.getPrototype(short) abort dict$/;"	f
NormalTag.isNormalTag	tagbar/autoload/tagbar.vim	/^function! s:NormalTag.isNormalTag() abort dict$/;"	f
NormalTag.str	tagbar/autoload/tagbar.vim	/^function! s:NormalTag.str(longsig, full) abort dict$/;"	f
NormalTag.strfmt	tagbar/autoload/tagbar.vim	/^function! s:NormalTag.strfmt() abort dict$/;"	f
Open	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Open()$/;"	f
Open	vim-bundler/plugin/bundler.vim	/^function! s:Open(cmd,gem,lcd)$/;"	f
OpenCloseBackspace	vim-autoclose/plugin/autoclose.vim	/^function <SID>OpenCloseBackspace() " ---{{{2$/;"	f
OpenComplete	vim-bundler/plugin/bundler.vim	/^function! s:OpenComplete(A,L,P)$/;"	f
OpenFold	tagbar/autoload/tagbar.vim	/^function! s:OpenFold() abort$/;"	f
OpenMulti	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:OpenMulti(...)$/;"	f
OpenNoMarks	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:OpenNoMarks(md, line)$/;"	f
OpenParents	tagbar/autoload/tagbar.vim	/^function! s:OpenParents(...) abort$/;"	f
OpenSpecial	vim-autoclose/plugin/autoclose.vim	/^function <SID>OpenSpecial(ochar,cchar) " ---{{{2$/;"	f
OpenWindow	tagbar/autoload/tagbar.vim	/^function! s:OpenWindow(flags) abort$/;"	f
PLUGIN	xmledit/Makefile	/^PLUGIN = xmledit$/;"	m
ParsePattern	tabular/plugin/Tabular.vim	/^function! s:ParsePattern(string)$/;"	f
ParseSegments	vim-powerline/autoload/Pl/Parser.vim	/^function! s:ParseSegments(mode, side, segments, ...) " {{{$/;"	f
ParseSkip	matchit/plugin/matchit.vim	/^fun! s:ParseSkip(str)$/;"	f
ParseTag	xmledit/ftplugin/eruby.vim	/^function s:ParseTag( )$/;"	f
ParseTag	xmledit/ftplugin/html.vim	/^function s:ParseTag( )$/;"	f
ParseTag	xmledit/ftplugin/xml.vim	/^function s:ParseTag( )$/;"	f
ParseTagline	tagbar/autoload/tagbar.vim	/^function! s:ParseTagline(part1, part2, typeinfo, fileinfo) abort$/;"	f
ParseWords	matchit/plugin/matchit.vim	/^fun! s:ParseWords(groups)$/;"	f
PauseAutocommands	tagbar/autoload/tagbar.vim	/^function! s:PauseAutocommands() abort$/;"	f
Pl#ClearCache	vim-powerline/autoload/Pl.vim	/^	function! Pl#ClearCache() " {{{$/;"	f
Pl#Colorscheme#Apply	vim-powerline/autoload/Pl/Colorscheme.vim	/^function! Pl#Colorscheme#Apply(colorscheme, buffer_segments) " {{{$/;"	f
Pl#Colorscheme#HiSegment	vim-powerline/autoload/Pl/Colorscheme.vim	/^function! Pl#Colorscheme#HiSegment(segments, normal, ...) " {{{$/;"	f
Pl#Colorscheme#Init	vim-powerline/autoload/Pl/Colorscheme.vim	/^function! Pl#Colorscheme#Init(hi) " {{{$/;"	f
Pl#Hi#Create	vim-powerline/autoload/Pl/Hi.vim	/^function! Pl#Hi#Create(...) " {{{$/;"	f
Pl#Hi#Cterm	vim-powerline/autoload/Pl/Hi.vim	/^function! Pl#Hi#Cterm(fg, ...) " {{{$/;"	f
Pl#Hi#GUI	vim-powerline/autoload/Pl/Hi.vim	/^function! Pl#Hi#GUI(fg, ...) " {{{$/;"	f
Pl#Load	vim-powerline/autoload/Pl.vim	/^	function! Pl#Load() " {{{$/;"	f
Pl#LoadCache	vim-powerline/autoload/Pl.vim	/^	function! Pl#LoadCache() " {{{$/;"	f
Pl#Match#Add	vim-powerline/autoload/Pl/Match.vim	/^function! Pl#Match#Add(pat, expr) " {{{$/;"	f
Pl#Match#Any	vim-powerline/autoload/Pl/Match.vim	/^function! Pl#Match#Any(...) " {{{$/;"	f
Pl#Match#Validate	vim-powerline/autoload/Pl/Match.vim	/^function! Pl#Match#Validate(match) " {{{$/;"	f
Pl#Mod#AddSegmentMod	vim-powerline/autoload/Pl/Mod.vim	/^function! Pl#Mod#AddSegmentMod(action, properties) " {{{$/;"	f
Pl#Mod#ApplySegmentMods	vim-powerline/autoload/Pl/Mod.vim	/^function! Pl#Mod#ApplySegmentMods(theme) " {{{$/;"	f
Pl#Parser#GetStatusline	vim-powerline/autoload/Pl/Parser.vim	/^function! Pl#Parser#GetStatusline(segments) " {{{$/;"	f
Pl#Parser#ParseChars	vim-powerline/autoload/Pl/Parser.vim	/^function! Pl#Parser#ParseChars(arg) " {{{$/;"	f
Pl#Segment#Create	vim-powerline/autoload/Pl/Segment.vim	/^function! Pl#Segment#Create(name, ...) " {{{$/;"	f
Pl#Segment#Get	vim-powerline/autoload/Pl/Segment.vim	/^function! Pl#Segment#Get(name) " {{{$/;"	f
Pl#Segment#Init	vim-powerline/autoload/Pl/Segment.vim	/^function! Pl#Segment#Init(...) " {{{$/;"	f
Pl#Segment#Modes	vim-powerline/autoload/Pl/Segment.vim	/^function! Pl#Segment#Modes(modes) " {{{$/;"	f
Pl#Segment#Split	vim-powerline/autoload/Pl/Segment.vim	/^function! Pl#Segment#Split(...) " {{{$/;"	f
Pl#Segment#Truncate	vim-powerline/autoload/Pl/Segment.vim	/^function! Pl#Segment#Truncate() " {{{$/;"	f
Pl#Statusline	vim-powerline/autoload/Pl.vim	/^	function! Pl#Statusline(statusline, current) " {{{$/;"	f
Pl#Theme#Buffer	vim-powerline/autoload/Pl/Theme.vim	/^function! Pl#Theme#Buffer(ns, ...) " {{{$/;"	f
Pl#Theme#Create	vim-powerline/autoload/Pl/Theme.vim	/^function! Pl#Theme#Create(...) " {{{$/;"	f
Pl#Theme#InsertSegment	vim-powerline/autoload/Pl/Theme.vim	/^function! Pl#Theme#InsertSegment(new_segment, where, target_segment) " {{{$/;"	f
Pl#Theme#RemoveSegment	vim-powerline/autoload/Pl/Theme.vim	/^function! Pl#Theme#RemoveSegment(target_segment) " {{{$/;"	f
Pl#Theme#ReplaceSegment	vim-powerline/autoload/Pl/Theme.vim	/^function! Pl#Theme#ReplaceSegment(old_segment, new_segment) " {{{$/;"	f
Pl#UpdateStatusline	vim-powerline/autoload/Pl.vim	/^	function! Pl#UpdateStatusline(current) " {{{$/;"	f
Powerline	vim-powerline/plugin/Powerline.vim	/^	augroup Powerline$/;"	a
Powerline#Functions#GetCharCode	vim-powerline/autoload/Powerline/Functions.vim	/^function! Powerline#Functions#GetCharCode() " {{{$/;"	f
Powerline#Functions#GetFilesize	vim-powerline/autoload/Powerline/Functions.vim	/^function! Powerline#Functions#GetFilesize() " {{{$/;"	f
Powerline#Functions#GetMode	vim-powerline/autoload/Powerline/Functions.vim	/^function! Powerline#Functions#GetMode() " {{{$/;"	f
Powerline#Functions#GetPwd	vim-powerline/autoload/Powerline/Functions.vim	/^function! Powerline#Functions#GetPwd() "{{{$/;"	f
Powerline#Functions#cfi#GetCurrentFunction	vim-powerline/autoload/Powerline/Functions/cfi.vim	/^function! Powerline#Functions#cfi#GetCurrentFunction() " {{{$/;"	f
Powerline#Functions#ft_man#GetName	vim-powerline/autoload/Powerline/Functions/ft_man.vim	/^function! Powerline#Functions#ft_man#GetName() " {{{$/;"	f
Powerline#Functions#fugitive#GetBranch	vim-powerline/autoload/Powerline/Functions/fugitive.vim	/^function! Powerline#Functions#fugitive#GetBranch(symbol) " {{{$/;"	f
Powerline#Functions#syntastic#GetErrors	vim-powerline/autoload/Powerline/Functions/syntastic.vim	/^function! Powerline#Functions#syntastic#GetErrors(line_symbol) " {{{$/;"	f
PowerlineClearCache	vim-powerline/autoload/Pl.vim	/^	command! PowerlineClearCache call Pl#ClearCache()$/;"	c
PrevNonBlankNonString	vim-json/indent/json.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
Preview	vim-rails/autoload/rails.vim	/^function! s:Preview(bang,lnum,arg)$/;"	f
PrintHelp	tagbar/autoload/tagbar.vim	/^function! s:PrintHelp() abort$/;"	f
PrintKinds	tagbar/autoload/tagbar.vim	/^function! s:PrintKinds(typeinfo, fileinfo) abort$/;"	f
PrintTag	tagbar/autoload/tagbar.vim	/^function! s:PrintTag(tag, depth, fileinfo, typeinfo) abort$/;"	f
ProcessFile	tagbar/autoload/tagbar.vim	/^function! s:ProcessFile(fname, ftype) abort$/;"	f
ProcessPseudoChildren	tagbar/autoload/tagbar.vim	/^function! s:ProcessPseudoChildren(tags, tag, depth, typeinfo, fileinfo) abort$/;"	f
ProcessPseudoTag	tagbar/autoload/tagbar.vim	/^function! s:ProcessPseudoTag(curtags, tag, parent, typeinfo, fileinfo) abort$/;"	f
ProjectMenu	vim-rails/plugin/rails.vim	/^function! s:ProjectMenu()$/;"	f
Prompt	vim-easymotion/autoload/EasyMotion.vim	/^	function! s:Prompt(message) " {{{$/;"	f
PromptUser	vim-easymotion/autoload/EasyMotion.vim	/^	function! s:PromptUser(groups) "{{{$/;"	f
PrtAdd	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtAdd(char)$/;"	f
PrtBS	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtBS()$/;"	f
PrtClear	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtClear()$/;"	f
PrtClearCache	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtClearCache()$/;"	f
PrtCurEnd	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtCurEnd()$/;"	f
PrtCurLeft	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtCurLeft()$/;"	f
PrtCurRight	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtCurRight()$/;"	f
PrtCurStart	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtCurStart()$/;"	f
PrtDelete	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtDelete()$/;"	f
PrtDeleteEnt	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtDeleteEnt()$/;"	f
PrtDeleteMRU	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtDeleteMRU()$/;"	f
PrtDeleteWord	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtDeleteWord()$/;"	f
PrtExit	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtExit()$/;"	f
PrtExpandDir	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtExpandDir()$/;"	f
PrtFocusMap	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtFocusMap(char)$/;"	f
PrtHistory	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtHistory(...)$/;"	f
PrtInsert	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtInsert(...)$/;"	f
PrtSelectJump	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtSelectJump(char)$/;"	f
PrtSelectMove	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtSelectMove(dir)$/;"	f
PrtSwitcher	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtSwitcher()$/;"	f
PseudoTag.isPseudoTag	tagbar/autoload/tagbar.vim	/^function! s:PseudoTag.isPseudoTag() abort dict$/;"	f
PseudoTag.strfmt	tagbar/autoload/tagbar.vim	/^function! s:PseudoTag.strfmt() abort dict$/;"	f
QuitIfOnlyWindow	tagbar/autoload/tagbar.vim	/^function! s:QuitIfOnlyWindow() abort$/;"	f
QuoteDelim	vim-autoclose/plugin/autoclose.vim	/^function <SID>QuoteDelim(char) " ---{{{2$/;"	f
R	vim-rake/plugin/rake.vim	/^function! s:R(cmd,bang,...) abort$/;"	f
RCT_command_with_test_options	rcodetools/plugin/rcodetools.vim	/^function! <SID>RCT_command_with_test_options(cmd)$/;"	f
RCT_completion	rcodetools/plugin/rcodetools.vim	/^function! <SID>RCT_completion(findstart, base)$/;"	f
RCT_execute_ri	rcodetools/plugin/rcodetools.vim	/^function! <SID>RCT_execute_ri(query_term)$/;"	f
RCT_find_tag_or_ri	rcodetools/plugin/rcodetools.vim	/^function! RCT_find_tag_or_ri(fullname)$/;"	f
RCT_new_ri_window	rcodetools/plugin/rcodetools.vim	/^function! <SID>RCT_new_ri_window()$/;"	f
RCT_ruby_toggle	rcodetools/plugin/rcodetools.vim	/^function! <SID>RCT_ruby_toggle()$/;"	f
RCT_smart_ri	rcodetools/plugin/rcodetools.vim	/^function! <SID>RCT_smart_ri()$/;"	f
RComplete	vim-rake/plugin/rake.vim	/^function! s:RComplete(A,L,P) abort$/;"	f
REF	vim-coffee-script/Makefile	/^REF = HEAD$/;"	m
Rails	vim-rails/plugin/rails.vim	/^command! -bar -bang -nargs=* -complete=dir Rails :if s:autoload()|call rails#new_app_command(<bang>0,<f-args>)|endif$/;"	c
RailsBufInit	vim-rails/autoload/rails.vim	/^function! RailsBufInit(path)$/;"	f
RailsFile	vim-rails/autoload/rails.vim	/^function! RailsFile()$/;"	f
RailsFilePath	vim-rails/autoload/rails.vim	/^function! RailsFilePath()$/;"	f
RailsFileType	vim-rails/autoload/rails.vim	/^function! RailsFileType()$/;"	f
RailsFind	vim-rails/autoload/rails.vim	/^function! s:RailsFind()$/;"	f
RailsHelpCommand	vim-rails/autoload/rails.vim	/^function! RailsHelpCommand(...)$/;"	f
RailsIncludeexpr	vim-rails/autoload/rails.vim	/^function! RailsIncludeexpr()$/;"	f
RailsIncludefind	vim-rails/autoload/rails.vim	/^function! s:RailsIncludefind(str,...)$/;"	f
RailsNamedRoutes	vim-rails/autoload/rails.vim	/^function! RailsNamedRoutes()$/;"	f
RailsRevision	vim-rails/autoload/rails.vim	/^function! RailsRevision()$/;"	f
RailsRoot	vim-rails/autoload/rails.vim	/^function! RailsRoot()$/;"	f
Rake	vim-rails/autoload/rails.vim	/^function! s:Rake(bang,lnum,arg)$/;"	f
Rake	vim-rake/plugin/rake.vim	/^function! s:Rake(bang,arg)$/;"	f
RakeComplete	vim-rake/plugin/rake.vim	/^function! s:RakeComplete(A,L,P)$/;"	f
Ref	matchit/plugin/matchit.vim	/^fun! s:Ref(string, d, ...)$/;"	f
Refresh	vim-rails/autoload/rails.vim	/^function! s:Refresh(bang)$/;"	f
RefreshBalloons	syntastic/plugin/syntastic.vim	/^function! s:RefreshBalloons()$/;"	f
RefreshBuffer	vim-rails/autoload/rails.vim	/^function! s:RefreshBuffer()$/;"	f
RefreshSigns	syntastic/plugin/syntastic.vim	/^function! s:RefreshSigns()$/;"	f
RegHandler	syntastic/autoload/syntastic/c.vim	/^function! s:RegHandler(regex, function, args)$/;"	f
Related	vim-rails/autoload/rails.vim	/^function! s:Related(cmd,line1,line2,count,...)$/;"	f
Remove	vim-fugitive/plugin/fugitive.vim	/^function! s:Remove(force)$/;"	f
RemoveSigns	syntastic/plugin/syntastic.vim	/^function! s:RemoveSigns(ids)$/;"	f
Render	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Render(lines, pat)$/;"	f
RenderContent	tagbar/autoload/tagbar.vim	/^function! s:RenderContent(...) abort$/;"	f
RenderKeepView	tagbar/autoload/tagbar.vim	/^function! s:RenderKeepView(...) abort$/;"	f
ReplaceCmd	vim-fugitive/plugin/fugitive.vim	/^function! s:ReplaceCmd(cmd,...) abort$/;"	f
Reset	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Reset(args)$/;"	f
Resolve	matchit/plugin/matchit.vim	/^fun! s:Resolve(source, target, output)$/;"	f
RestoreOption	VimClojure/autoload/vimclojure/util.vim	/^function! s:RestoreOption(value) dict$/;"	f
RestorePosition	VimClojure/autoload/vimclojure/util.vim	/^function! s:RestorePosition(value) dict$/;"	f
RestoreRegisters	VimClojure/autoload/vimclojure/util.vim	/^function! s:RestoreRegisters(registers) dict$/;"	f
RestoreSession	tagbar/autoload/tagbar.vim	/^function! s:RestoreSession() abort$/;"	f
Right	tabular/autoload/tabular.vim	/^function! s:Right(string, fieldwidth)$/;"	f
Rlib	vim-rake/plugin/rake.vim	/^function! s:Rlib(file)$/;"	f
RlibComplete	vim-rake/plugin/rake.vim	/^function! s:RlibComplete(A,L,P)$/;"	f
Rooter	rooter/plugin/rooter.vim	/^command! Rooter :call <SID>ChangeToRootDirectory()$/;"	c
Rspec	vim-rake/plugin/rake.vim	/^function! s:Rspec(...)$/;"	f
RspecComplete	vim-rake/plugin/rake.vim	/^function! s:RspecComplete(A,L,P)$/;"	f
Rtask	vim-rake/plugin/rake.vim	/^function! s:Rtask(file)$/;"	f
RtaskComplete	vim-rake/plugin/rake.vim	/^function! s:RtaskComplete(A,L,P)$/;"	f
Rtest	vim-rake/plugin/rake.vim	/^function! s:Rtest(...)$/;"	f
RtestComplete	vim-rake/plugin/rake.vim	/^function! s:RtestComplete(A,L,P)$/;"	f
Rtestorspec	vim-rake/plugin/rake.vim	/^function! s:Rtestorspec(order,file)$/;"	f
SHA1CircularShift	webapi-vim/autoload/webapi/sha1.vim	/^function s:SHA1CircularShift(bits, word)$/;"	f
SHA1Digest	webapi-vim/autoload/webapi/sha1.vim	/^function! s:SHA1Digest(bytes)$/;"	f
SHA1Input	webapi-vim/autoload/webapi/sha1.vim	/^function s:SHA1Input(context, message_array)$/;"	f
SHA1PadMessage	webapi-vim/autoload/webapi/sha1.vim	/^function s:SHA1PadMessage(context)$/;"	f
SHA1ProcessMessageBlock	webapi-vim/autoload/webapi/sha1.vim	/^function s:SHA1ProcessMessageBlock(context)$/;"	f
SHA1Reset	webapi-vim/autoload/webapi/sha1.vim	/^function s:SHA1Reset(context)$/;"	f
SHA1Result	webapi-vim/autoload/webapi/sha1.vim	/^function s:SHA1Result(context, Message_Digest)$/;"	f
SID	vim-autoclose/plugin/autoclose.vim	/^function s:SID()$/;"	f
SOURCE	xmledit/Makefile	/^SOURCE = ftplugin\/xml.vim$/;"	m
SYM_ATTR	vim-powerline/fontpatcher/fontpatcher	/^SYM_ATTR = {$/;"	v
SaveOption	VimClojure/autoload/vimclojure/util.vim	/^function! s:SaveOption() dict$/;"	f
SavePosition	VimClojure/autoload/vimclojure/util.vim	/^function! s:SavePosition() dict$/;"	f
SaveRegister	VimClojure/autoload/vimclojure/util.vim	/^function! s:SaveRegister(reg)$/;"	f
SaveRegisters	VimClojure/autoload/vimclojure/util.vim	/^function! s:SaveRegisters() dict$/;"	f
SearchPair	vim-coffee-script/indent/coffee.vim	/^function! s:SearchPair(start, end)$/;"	f
SelectPane	slimux/plugin/slimux.vim	/^function! s:SelectPane(tmux_packet)$/;"	f
Send	slimux/plugin/slimux.vim	/^function! s:Send(tmux_packet)$/;"	f
Set	vim-rails/autoload/rails.vim	/^function! s:Set(bang,...)$/;"	f
SetBasePath	vim-rails/autoload/rails.vim	/^function! s:SetBasePath()$/;"	f
SetDefTxt	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:SetDefTxt()$/;"	f
SetFoldLevel	tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevel(level, force) abort$/;"	f
SetFoldLevelRecursive	tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevelRecursive(fileinfo, tags, level) abort$/;"	f
SetLines	tabular/autoload/tabular.vim	/^function! s:SetLines(start, len, strings)$/;"	f
SetLines	vim-easymotion/autoload/EasyMotion.vim	/^	function! s:SetLines(lines, key) " {{{$/;"	f
SetMakePrg	vim-coffee-script/compiler/coffee.vim	/^function! s:SetMakePrg()$/;"	f
SetOptDefault	vim-rails/plugin/rails.vim	/^function! s:SetOptDefault(opt,val)$/;"	f
SetWD	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:SetWD(args)$/;"	f
SetupMake	vim-bundler/plugin/bundler.vim	/^function! s:SetupMake() abort$/;"	f
ShouldSkip	vim-coffee-script/indent/coffee.vim	/^function! s:ShouldSkip(startlinenum, linenum, col)$/;"	f
ShowLocList	syntastic/plugin/syntastic.vim	/^function! s:ShowLocList()$/;"	f
ShowPrototype	tagbar/autoload/tagbar.vim	/^function! s:ShowPrototype(short) abort$/;"	f
SignErrors	syntastic/plugin/syntastic.vim	/^function s:SignErrors()$/;"	f
SkipExpr	vim-coffee-script/indent/coffee.vim	/^function! s:SkipExpr(startlinenum)$/;"	f
SlimuxConfigureCode	slimux/plugin/slimux.vim	/^function! SlimuxConfigureCode()$/;"	f
SlimuxEscape_python	slimux/ftplugin/python.vim	/^function! SlimuxEscape_python(text)$/;"	f
SlimuxPost_coffee	slimux/ftplugin/coffee.vim	/^function! SlimuxPost_coffee(target_pane)$/;"	f
SlimuxPre_coffee	slimux/ftplugin/coffee.vim	/^function! SlimuxPre_coffee(target_pane)$/;"	f
SlimuxREPLConfigure	slimux/plugin/slimux.vim	/^command! SlimuxREPLConfigure call SlimuxConfigureCode()$/;"	c
SlimuxREPLSendLine	slimux/plugin/slimux.vim	/^command! SlimuxREPLSendLine call SlimuxSendCode(getline(".") . "\\n")$/;"	c
SlimuxREPLSendSelection	slimux/plugin/slimux.vim	/^command! -range=% -bar -nargs=* SlimuxREPLSendSelection call SlimuxSendCode(s:GetVisual())$/;"	c
SlimuxSendCode	slimux/plugin/slimux.vim	/^function! SlimuxSendCode(text)$/;"	f
SlimuxSendCommand	slimux/plugin/slimux.vim	/^function SlimuxSendCommand(cmd)$/;"	f
SlimuxShellConfigure	slimux/plugin/slimux.vim	/^command! SlimuxShellConfigure call s:SelectPane(s:cmd_packet)$/;"	c
SlimuxShellLast	slimux/plugin/slimux.vim	/^command! SlimuxShellLast      call SlimuxSendCommand(s:previous_cmd)$/;"	c
SlimuxShellPrompt	slimux/plugin/slimux.vim	/^command! SlimuxShellPrompt    call SlimuxSendCommand(input("CMD>", s:previous_cmd))$/;"	c
SlimuxShellRun	slimux/plugin/slimux.vim	/^command! -nargs=1 -complete=shellcmd SlimuxShellRun call SlimuxSendCommand("<args>")$/;"	c
SmartSearch	vim-coffee-script/indent/coffee.vim	/^function! s:SmartSearch(linenum, regex)$/;"	f
SortTags	tagbar/autoload/tagbar.vim	/^function! s:SortTags(tags, comparemethod) abort$/;"	f
SpecInputs	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:SpecInputs(str)$/;"	f
SplitCDeclarations	tabular/after/plugin/TabularMaps.vim	/^function! SplitCDeclarations(lines)$/;"	f
SplitCommands	tabular/plugin/Tabular.vim	/^function! s:SplitCommands(string)$/;"	f
SplitDelim	tabular/autoload/tabular.vim	/^function! s:SplitDelim(string, delim)$/;"	f
SplitDelimTest	tabular/autoload/tabular.vim	/^function! s:SplitDelimTest(string, delim, expected)$/;"	f
SplitPattern	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:SplitPattern(str)$/;"	f
StageDiff	vim-fugitive/plugin/fugitive.vim	/^function! s:StageDiff(diff) abort$/;"	f
StageDiffEdit	vim-fugitive/plugin/fugitive.vim	/^function! s:StageDiffEdit() abort$/;"	f
StagePatch	vim-fugitive/plugin/fugitive.vim	/^function! s:StagePatch(lnum1,lnum2) abort$/;"	f
StageReloadSeek	vim-fugitive/plugin/fugitive.vim	/^function! s:StageReloadSeek(target,lnum1,lnum2)$/;"	f
StageToggle	vim-fugitive/plugin/fugitive.vim	/^function! s:StageToggle(lnum1,lnum2) abort$/;"	f
StartDebug	tagbar/autoload/tagbar.vim	/^function! s:StartDebug(filename) abort$/;"	f
Status	vim-fugitive/plugin/fugitive.vim	/^function! s:Status() abort$/;"	f
StopDebug	tagbar/autoload/tagbar.vim	/^function! s:StopDebug() abort$/;"	f
StripLeadingSpaces	tabular/autoload/tabular.vim	/^function! s:StripLeadingSpaces(string)$/;"	f
StripTrailingSpaces	tabular/autoload/tabular.vim	/^function! s:StripTrailingSpaces(string)$/;"	f
Strlen	tabular/autoload/tabular.vim	/^  function! s:Strlen(string)$/;"	f
SyntasticAddToErrors	syntastic/plugin/syntastic.vim	/^function! SyntasticAddToErrors(errors, options)$/;"	f
SyntasticCheck	syntastic/plugin/syntastic.vim	/^command! SyntasticCheck call s:UpdateErrors(0) <bar> redraw!$/;"	c
SyntasticErrorBalloonExpr	syntastic/plugin/syntastic.vim	/^function! SyntasticErrorBalloonExpr()$/;"	f
SyntasticHighlightErrors	syntastic/plugin/syntastic.vim	/^function! SyntasticHighlightErrors(errors, termfunc, ...)$/;"	f
SyntasticMake	syntastic/plugin/syntastic.vim	/^function! SyntasticMake(options)$/;"	f
SyntasticStatuslineFlag	syntastic/plugin/syntastic.vim	/^function! SyntasticStatuslineFlag()$/;"	f
SyntasticToggleMode	syntastic/plugin/syntastic.vim	/^command! SyntasticToggleMode call s:ToggleMode()$/;"	c
SyntaxCheckers_applescript_GetLocList	syntastic/syntax_checkers/applescript.vim	/^function! SyntaxCheckers_applescript_GetLocList()$/;"	f
SyntaxCheckers_c_GetLocList	syntastic/syntax_checkers/c.vim	/^function! SyntaxCheckers_c_GetLocList()$/;"	f
SyntaxCheckers_coffee_GetLocList	syntastic/syntax_checkers/coffee.vim	/^function! SyntaxCheckers_coffee_GetLocList()$/;"	f
SyntaxCheckers_cpp_GetLocList	syntastic/syntax_checkers/cpp.vim	/^function! SyntaxCheckers_cpp_GetLocList()$/;"	f
SyntaxCheckers_css_GetLocList	syntastic/syntax_checkers/css.vim	/^function! SyntaxCheckers_css_GetLocList()$/;"	f
SyntaxCheckers_cucumber_GetLocList	syntastic/syntax_checkers/cucumber.vim	/^function! SyntaxCheckers_cucumber_GetLocList()$/;"	f
SyntaxCheckers_cuda_GetLocList	syntastic/syntax_checkers/cuda.vim	/^function! SyntaxCheckers_cuda_GetLocList()$/;"	f
SyntaxCheckers_docbk_GetLocList	syntastic/syntax_checkers/docbk.vim	/^function! SyntaxCheckers_docbk_GetLocList()$/;"	f
SyntaxCheckers_erlang_GetLocList	syntastic/syntax_checkers/erlang.vim	/^function! SyntaxCheckers_erlang_GetLocList()$/;"	f
SyntaxCheckers_eruby_GetLocList	syntastic/syntax_checkers/eruby.vim	/^function! SyntaxCheckers_eruby_GetLocList()$/;"	f
SyntaxCheckers_fortran_GetLocList	syntastic/syntax_checkers/fortran.vim	/^function! SyntaxCheckers_fortran_GetLocList()$/;"	f
SyntaxCheckers_go_GetLocList	syntastic/syntax_checkers/go.vim	/^function! SyntaxCheckers_go_GetLocList()$/;"	f
SyntaxCheckers_haml_GetLocList	syntastic/syntax_checkers/haml.vim	/^function! SyntaxCheckers_haml_GetLocList()$/;"	f
SyntaxCheckers_haskell_GetLocList	syntastic/syntax_checkers/haskell.vim	/^function! SyntaxCheckers_haskell_GetLocList()$/;"	f
SyntaxCheckers_html_GetLocList	syntastic/syntax_checkers/html.vim	/^function! SyntaxCheckers_html_GetLocList()$/;"	f
SyntaxCheckers_javascript_GetLocList	syntastic/syntax_checkers/javascript/gjslint.vim	/^function! SyntaxCheckers_javascript_GetLocList()$/;"	f
SyntaxCheckers_javascript_GetLocList	syntastic/syntax_checkers/javascript/jshint.vim	/^function! SyntaxCheckers_javascript_GetLocList()$/;"	f
SyntaxCheckers_javascript_GetLocList	syntastic/syntax_checkers/javascript/jsl.vim	/^function! SyntaxCheckers_javascript_GetLocList()$/;"	f
SyntaxCheckers_javascript_GetLocList	syntastic/syntax_checkers/javascript/jslint.vim	/^function! SyntaxCheckers_javascript_GetLocList()$/;"	f
SyntaxCheckers_javascript_HighlightTerm	syntastic/syntax_checkers/javascript/jslint.vim	/^function! SyntaxCheckers_javascript_HighlightTerm(error)$/;"	f
SyntaxCheckers_less_GetLocList	syntastic/syntax_checkers/less.vim	/^function! SyntaxCheckers_less_GetLocList()$/;"	f
SyntaxCheckers_lhaskell_GetLocList	syntastic/syntax_checkers/haskell.vim	/^function! SyntaxCheckers_lhaskell_GetLocList()$/;"	f
SyntaxCheckers_lua_GetLocList	syntastic/syntax_checkers/lua.vim	/^function! SyntaxCheckers_lua_GetLocList()$/;"	f
SyntaxCheckers_lua_Term	syntastic/syntax_checkers/lua.vim	/^function! SyntaxCheckers_lua_Term(pos)$/;"	f
SyntaxCheckers_matlab_GetLocList	syntastic/syntax_checkers/matlab.vim	/^function! SyntaxCheckers_matlab_GetLocList()$/;"	f
SyntaxCheckers_perl_GetLocList	syntastic/syntax_checkers/perl.vim	/^function! SyntaxCheckers_perl_GetLocList()$/;"	f
SyntaxCheckers_php_GetLocList	syntastic/syntax_checkers/php.vim	/^function! SyntaxCheckers_php_GetLocList()$/;"	f
SyntaxCheckers_php_Term	syntastic/syntax_checkers/php.vim	/^function! SyntaxCheckers_php_Term(item)$/;"	f
SyntaxCheckers_puppet_GetLocList	syntastic/syntax_checkers/puppet.vim	/^function! SyntaxCheckers_puppet_GetLocList()$/;"	f
SyntaxCheckers_python_GetLocList	syntastic/syntax_checkers/python.vim	/^function! SyntaxCheckers_python_GetLocList()$/;"	f
SyntaxCheckers_python_Term	syntastic/syntax_checkers/python.vim	/^function! SyntaxCheckers_python_Term(i)$/;"	f
SyntaxCheckers_ruby_GetLocList	syntastic/syntax_checkers/ruby.vim	/^function! SyntaxCheckers_ruby_GetLocList()$/;"	f
SyntaxCheckers_sass_GetLocList	syntastic/syntax_checkers/sass.vim	/^function! SyntaxCheckers_sass_GetLocList()$/;"	f
SyntaxCheckers_scss_GetLocList	syntastic/syntax_checkers/scss.vim	/^function! SyntaxCheckers_scss_GetLocList()$/;"	f
SyntaxCheckers_sh_GetLocList	syntastic/syntax_checkers/sh.vim	/^function! SyntaxCheckers_sh_GetLocList()$/;"	f
SyntaxCheckers_tcl_GetLocList	syntastic/syntax_checkers/tcl.vim	/^function! SyntaxCheckers_tcl_GetLocList()$/;"	f
SyntaxCheckers_tex_GetLocList	syntastic/syntax_checkers/tex.vim	/^function! SyntaxCheckers_tex_GetLocList()$/;"	f
SyntaxCheckers_vala_GetLocList	syntastic/syntax_checkers/vala.vim	/^function! SyntaxCheckers_vala_GetLocList()$/;"	f
SyntaxCheckers_vala_Term	syntastic/syntax_checkers/vala.vim	/^function! SyntaxCheckers_vala_Term(pos)$/;"	f
SyntaxCheckers_xhtml_GetLocList	syntastic/syntax_checkers/xhtml.vim	/^function! SyntaxCheckers_xhtml_GetLocList()$/;"	f
SyntaxCheckers_xml_GetLocList	syntastic/syntax_checkers/xml.vim	/^function! SyntaxCheckers_xml_GetLocList()$/;"	f
SyntaxCheckers_xslt_GetLocList	syntastic/syntax_checkers/xslt.vim	/^function! SyntaxCheckers_xslt_GetLocList()$/;"	f
SyntaxCheckers_zpt_GetLocList	syntastic/syntax_checkers/zpt.vim	/^function! SyntaxCheckers_zpt_GetLocList()$/;"	f
SyntaxName	vim-coffee-script/indent/coffee.vim	/^function! s:SyntaxName(linenum, col)$/;"	f
Tabularize	tabular/plugin/Tabular.vim	/^   \\ Tabularize <line1>,<line2>call Tabularize(<q-args>)$/;"	c
Tabularize	tabular/plugin/Tabular.vim	/^function! Tabularize(command, ...) range$/;"	f
TagMatch1	xmledit/ftplugin/eruby.vim	/^function s:TagMatch1()$/;"	f
TagMatch1	xmledit/ftplugin/html.vim	/^function s:TagMatch1()$/;"	f
TagMatch1	xmledit/ftplugin/xml.vim	/^function s:TagMatch1()$/;"	f
TagMatch2	xmledit/ftplugin/eruby.vim	/^function s:TagMatch2(tag,endtag)$/;"	f
TagMatch2	xmledit/ftplugin/html.vim	/^function s:TagMatch2(tag,endtag)$/;"	f
TagMatch2	xmledit/ftplugin/xml.vim	/^function s:TagMatch2(tag,endtag)$/;"	f
Tagbar	tagbar/plugin/tagbar.vim	/^command! -nargs=0 Tagbar              call tagbar#ToggleWindow()$/;"	c
TagbarBalloonExpr	tagbar/autoload/tagbar.vim	/^function! TagbarBalloonExpr() abort$/;"	f
TagbarClose	tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarClose         call tagbar#CloseWindow()$/;"	c
TagbarCurrentTag	tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarCurrentTag    echo tagbar#currenttag('%s', 'No current tag', <f-args>)$/;"	c
TagbarDebug	tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarDebug         call tagbar#StartDebug(<f-args>)$/;"	c
TagbarDebugEnd	tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarDebugEnd      call tagbar#StopDebug()$/;"	c
TagbarGenerateStatusline	tagbar/autoload/tagbar.vim	/^function! TagbarGenerateStatusline() abort$/;"	f
TagbarGetTypeConfig	tagbar/plugin/tagbar.vim	/^command! -nargs=1 TagbarGetTypeConfig call tagbar#gettypeconfig(<f-args>)$/;"	c
TagbarOpen	tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarOpen          call tagbar#OpenWindow(<f-args>)$/;"	c
TagbarOpenAutoClose	tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarOpenAutoClose call tagbar#OpenWindow('fcj')$/;"	c
TagbarSession	tagbar/plugin/tagbar.vim	/^augroup TagbarSession$/;"	a
TagbarSetFoldlevel	tagbar/plugin/tagbar.vim	/^command! -nargs=1 -bang TagbarSetFoldlevel  call tagbar#SetFoldLevel(<args>, <bang>0)$/;"	c
TagbarShowTag	tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarShowTag       call tagbar#highlighttag(1, 1)$/;"	c
TagbarToggle	tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarToggle        call tagbar#ToggleWindow()$/;"	c
TagbarTogglePause	tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarTogglePause   call tagbar#PauseAutocommands()$/;"	c
Tags	vim-rake/plugin/rake.vim	/^function! s:Tags(args)$/;"	f
TheCWord	vim-rails/autoload/rails.vim	/^function! s:TheCWord()$/;"	f
TidyEncOptByFenc	syntastic/syntax_checkers/html.vim	/^function! s:TidyEncOptByFenc()$/;"	f
TidyEncOptByFenc	syntastic/syntax_checkers/xhtml.vim	/^function! s:TidyEncOptByFenc()$/;"	f
ToggleAutoCloseMappings	vim-autoclose/plugin/autoclose.vim	/^fun <SID>ToggleAutoCloseMappings() " --- {{{2$/;"	f
ToggleByFname	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleByFname()$/;"	f
ToggleFocus	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleFocus()$/;"	f
ToggleFold	tagbar/autoload/tagbar.vim	/^function! s:ToggleFold() abort$/;"	f
ToggleHelp	tagbar/autoload/tagbar.vim	/^function! s:ToggleHelp() abort$/;"	f
ToggleKeyLoop	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleKeyLoop()$/;"	f
ToggleMode	syntastic/plugin/syntastic.vim	/^function! s:ToggleMode()$/;"	f
ToggleRegex	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleRegex()$/;"	f
ToggleSort	tagbar/autoload/tagbar.vim	/^function! s:ToggleSort() abort$/;"	f
ToggleType	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleType(dir)$/;"	f
ToggleWindow	tagbar/autoload/tagbar.vim	/^function! s:ToggleWindow() abort$/;"	f
TransformUserTypeDef	tagbar/autoload/tagbar.vim	/^function! s:TransformUserTypeDef(def) abort$/;"	f
TypeInfo.New	tagbar/autoload/tagbar.vim	/^function! s:TypeInfo.New(...) abort dict$/;"	f
TypeInfo.createKinddict	tagbar/autoload/tagbar.vim	/^function! s:TypeInfo.createKinddict() abort dict$/;"	f
TypeInfo.getKind	tagbar/autoload/tagbar.vim	/^function! s:TypeInfo.getKind(kind) abort dict$/;"	f
Update	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Update(str)$/;"	f
UpdateErrors	syntastic/plugin/syntastic.vim	/^function! s:UpdateErrors(auto_invoked)$/;"	f
UpdateMakePrg	vim-coffee-script/compiler/coffee.vim	/^  function! s:UpdateMakePrg()$/;"	f
UserCmd	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:UserCmd(lscmd)$/;"	f
VERSION	vim-coffee-script/Makefile	/^VERSION = $(shell git describe --always $(REF))$/;"	m
ValidateError	syntastic/syntax_checkers/html.vim	/^function! s:ValidateError(text)$/;"	f
VarReset	vim-easymotion/autoload/EasyMotion.vim	/^	function! s:VarReset(var, ...) " {{{$/;"	f
VimClojure	VimClojure/ftplugin/clojure.vim	/^	augroup VimClojure$/;"	a
VimClojureSetupParenRainbow	VimClojure/syntax/clojure.vim	/^function! VimClojureSetupParenRainbow()$/;"	f
VimClojureSyntax	VimClojure/syntax/clojure.vim	/^	augroup VimClojureSyntax$/;"	a
VisualTag	xmledit/ftplugin/eruby.vim	/^function s:VisualTag( ) $/;"	f
VisualTag	xmledit/ftplugin/html.vim	/^function s:VisualTag( ) $/;"	f
VisualTag	xmledit/ftplugin/xml.vim	/^function s:VisualTag( ) $/;"	f
Warnings	syntastic/plugin/syntastic.vim	/^function s:Warnings()$/;"	f
Wholematch	matchit/plugin/matchit.vim	/^fun! s:Wholematch(string, pat, start)$/;"	f
WideMsg	syntastic/plugin/syntastic.vim	/^function! s:WideMsg(msg)$/;"	f
Wq	vim-fugitive/plugin/fugitive.vim	/^function! s:Wq(force,...) abort$/;"	f
WrapTag	xmledit/ftplugin/eruby.vim	/^function s:WrapTag(text)$/;"	f
WrapTag	xmledit/ftplugin/html.vim	/^function s:WrapTag(text)$/;"	f
WrapTag	xmledit/ftplugin/xml.vim	/^function s:WrapTag(text)$/;"	f
Write	vim-fugitive/plugin/fugitive.vim	/^function! s:Write(force,...) abort$/;"	f
ZoomWindow	tagbar/autoload/tagbar.vim	/^function! s:ZoomWindow() abort$/;"	f
[%	matchit/plugin/matchit.vim	/^nnoremap <silent> [% :<C-U>call <SID>MultiMatch("bW", "n") <CR>$/;"	m
[%	matchit/plugin/matchit.vim	/^onoremap <silent> [% v:<C-U>call <SID>MultiMatch("bW", "o") <CR>$/;"	m
[%	matchit/plugin/matchit.vim	/^vmap [% <Esc>[%m'gv``$/;"	m
\\	vim-commentary/plugin/commentary.vim	/^  nmap \\\\  <Plug>Commentary$/;"	m
\\\	vim-commentary/plugin/commentary.vim	/^  nmap \\\\\\ <Plug>CommentaryLine$/;"	m
]%	matchit/plugin/matchit.vim	/^nnoremap <silent> ]% :<C-U>call <SID>MultiMatch("W",  "n") <CR>$/;"	m
]%	matchit/plugin/matchit.vim	/^onoremap <silent> ]% v:<C-U>call <SID>MultiMatch("W",  "o") <CR>$/;"	m
]%	matchit/plugin/matchit.vim	/^vmap ]% <Esc>]%m'gv``$/;"	m
a%	matchit/plugin/matchit.vim	/^vmap a% <Esc>[%v]%$/;"	m
abolish_l	vim-rails/plugin/rails.vim	/^function! s:abolish_l(word)$/;"	f
abolish_setup	vim-rails/plugin/rails.vim	/^function! s:abolish_setup()$/;"	f
abolish_t	vim-rails/plugin/rails.vim	/^function! s:abolish_t(word)$/;"	f
access_token_url	webapi-vim/example/google-buzz.vim	/^  let access_token_url = "https:\/\/www.google.com\/accounts\/OAuthGetAccessToken"$/;"	v
access_token_url	webapi-vim/example/twitter.vim	/^  let access_token_url = "https:\/\/api.twitter.com\/oauth\/access_token"$/;"	v
add_methods	vim-bundler/plugin/bundler.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
add_methods	vim-fugitive/plugin/fugitive.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
add_methods	vim-rails/autoload/rails.vim	/^function! s:add_methods(namespace, method_names)$/;"	f
add_methods	vim-rake/plugin/rake.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
add_node_params	webapi-vim/autoload/webapi/xmlrpc.vim	/^function! s:add_node_params(args)$/;"	f
addfilecmds	vim-rails/autoload/rails.vim	/^function! s:addfilecmds(type)$/;"	f
addtomrufs	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:addtomrufs(fname)$/;"	f
align_matrix	vim-powerline/fontpatcher/fontpatcher	/^			align_matrix = psMat.translate(0, 0)$/;"	v
align_matrix	vim-powerline/fontpatcher/fontpatcher	/^			align_matrix = psMat.translate(font_dim['width'] - sym_dim['width'], 0)$/;"	v
align_matrix	vim-powerline/fontpatcher/fontpatcher	/^			align_matrix = psMat.translate(font_dim['width'] \/ 2 - sym_dim['width'] \/ 2 , 0)$/;"	v
api	webapi-vim/example/jugem.vim	/^let api = metaWeblog#proxy("http:\/\/".jugem_id.".jugem.jp\/admin\/xmlrpc.php")$/;"	v
app_background_script_command	vim-rails/autoload/rails.vim	/^function! s:app_background_script_command(cmd) dict abort$/;"	f
app_dbext_settings	vim-rails/autoload/rails.vim	/^function! s:app_dbext_settings(environment) dict$/;"	f
app_default_locale	vim-rails/autoload/rails.vim	/^function! s:app_default_locale() dict abort$/;"	f
app_destroy_command	vim-rails/autoload/rails.vim	/^function! s:app_destroy_command(bang,...) dict$/;"	f
app_environments	vim-rails/autoload/rails.vim	/^function! s:app_environments() dict$/;"	f
app_eval	vim-rails/autoload/rails.vim	/^function! s:app_eval(ruby,...) dict abort$/;"	f
app_execute_script_command	vim-rails/autoload/rails.vim	/^function! s:app_execute_script_command(cmd) dict abort$/;"	f
app_file	vim-rails/autoload/rails.vim	/^function! s:app_file(name)$/;"	f
app_find_file	vim-rails/autoload/rails.vim	/^function! s:app_find_file(name, ...) dict abort$/;"	f
app_generate_command	vim-rails/autoload/rails.vim	/^function! s:app_generate_command(bang,...) dict$/;"	f
app_generators	vim-rails/autoload/rails.vim	/^function! s:app_generators() dict$/;"	f
app_has	vim-rails/autoload/rails.vim	/^function! s:app_has(feature) dict$/;"	f
app_has_file	vim-rails/autoload/rails.vim	/^function! s:app_has_file(file) dict$/;"	f
app_lightweight_ruby_eval	vim-rails/autoload/rails.vim	/^function! s:app_lightweight_ruby_eval(ruby,...) dict abort$/;"	f
app_migration	vim-rails/autoload/rails.vim	/^function! s:app_migration(file) dict$/;"	f
app_named_route_file	vim-rails/autoload/rails.vim	/^function! s:app_named_route_file(route) dict$/;"	f
app_path	vim-rails/autoload/rails.vim	/^function! s:app_path(...) dict$/;"	f
app_rake_tasks	vim-rails/autoload/rails.vim	/^function! s:app_rake_tasks() dict$/;"	f
app_relglob	vim-rails/autoload/rails.vim	/^function! s:app_relglob(path,glob,...) dict$/;"	f
app_route_names	vim-rails/autoload/rails.vim	/^function! s:app_route_names() dict$/;"	f
app_ruby_shell_command	vim-rails/autoload/rails.vim	/^function! s:app_ruby_shell_command(cmd) dict abort$/;"	f
app_runner_command	vim-rails/autoload/rails.vim	/^function! s:app_runner_command(count,args) dict$/;"	f
app_script_command	vim-rails/autoload/rails.vim	/^function! s:app_script_command(bang,...) dict$/;"	f
app_script_shell_command	vim-rails/autoload/rails.vim	/^function! s:app_script_shell_command(cmd) dict abort$/;"	f
app_server_command	vim-rails/autoload/rails.vim	/^function! s:app_server_command(bang,arg) dict$/;"	f
app_source_callback	vim-rails/autoload/rails.vim	/^function! s:app_source_callback(file) dict$/;"	f
app_tags_command	vim-rails/autoload/rails.vim	/^function! s:app_tags_command() dict$/;"	f
app_test_suites	vim-rails/autoload/rails.vim	/^function! s:app_test_suites() dict$/;"	f
app_user_assertions	vim-rails/autoload/rails.vim	/^function! s:app_user_assertions() dict$/;"	f
app_user_classes	vim-rails/autoload/rails.vim	/^function! s:app_user_classes() dict$/;"	f
argmaps	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:argmaps(md, i)$/;"	f
args	vim-powerline/fontpatcher/fontpatcher	/^args = parser.parse_args()$/;"	v
at	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:at(str)$/;"	f
attr	webapi-vim/autoload/webapi/feed.vim	/^function! s:attr(node, name)$/;"	f
auth_url	webapi-vim/example/google-buzz.vim	/^  let auth_url = "https:\/\/www.google.com\/accounts\/OAuthAuthorizeToken"$/;"	v
auth_url	webapi-vim/example/twitter.vim	/^  let auth_url =  "https:\/\/twitter.com\/oauth\/authorize"$/;"	v
autocamelize	vim-rails/autoload/rails.vim	/^function! s:autocamelize(files,test)$/;"	f
autocmds	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:autocmds()$/;"	f
autoload	vim-rails/plugin/rails.vim	/^function! s:autoload(...)$/;"	f
b64decode	webapi-vim/autoload/webapi/base64.vim	/^function! s:b64decode(b64, table, pad)$/;"	f
b64encode	webapi-vim/autoload/webapi/base64.vim	/^function! s:b64encode(bytes, table, pad)$/;"	f
b:browsefilter	VimClojure/ftplugin/clojure.vim	/^	let b:browsefilter = "Clojure Source Files (*.clj)\\t*.clj\\n" .$/;"	v
b:current_syntax	VimClojure/syntax/clojure.vim	/^let b:current_syntax = "clojure"$/;"	v
b:current_syntax	mustache.vim/syntax/mustache.vim	/^let b:current_syntax = "mustache"$/;"	v
b:current_syntax	tagbar/syntax/tagbar.vim	/^let b:current_syntax = "tagbar"$/;"	v
b:current_syntax	vim-coffee-script/syntax/coffee.vim	/^  let b:current_syntax = 'coffee'$/;"	v
b:current_syntax	vim-coffee-script/syntax/eco.vim	/^let b:current_syntax = 'eco'$/;"	v
b:current_syntax	vim-jquery/syntax/jquery.vim	/^let b:current_syntax = 'jquery'$/;"	v
b:current_syntax	vim-json/syntax/json.vim	/^let b:current_syntax = "json"$/;"	v
b:did_ftplugin	VimClojure/ftplugin/clojure.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim-coffee-script/ftplugin/coffee.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim-json/ftplugin/json.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_indent	VimClojure/indent/clojure.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim-coffee-script/indent/coffee.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim-json/indent/json.vim	/^let b:did_indent = 1$/;"	v
b:eco_subtype	vim-coffee-script/syntax/eco.vim	/^      let b:eco_subtype = b:current_syntax$/;"	v
b:eco_subtype	vim-coffee-script/syntax/eco.vim	/^      let b:eco_subtype = g:eco_default_subtype$/;"	v
b:eco_subtype	vim-coffee-script/syntax/eco.vim	/^    let b:eco_subtype = 'html'$/;"	v
b:eco_subtype	vim-coffee-script/syntax/eco.vim	/^    let b:eco_subtype = 'javascript'$/;"	v
b:eco_subtype	vim-coffee-script/syntax/eco.vim	/^    let b:eco_subtype = 'ruby'$/;"	v
b:eco_subtype	vim-coffee-script/syntax/eco.vim	/^    let b:eco_subtype = 'text'$/;"	v
b:eco_subtype	vim-coffee-script/syntax/eco.vim	/^    let b:eco_subtype = 'yaml'$/;"	v
b:eco_subtype	vim-coffee-script/syntax/eco.vim	/^    let b:eco_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.eco\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eco_subtype	vim-coffee-script/syntax/eco.vim	/^  let b:eco_subtype = matchstr(s:lines,'eco_subtype=\\zs\\w\\+')$/;"	v
b:last_wrap_atts_used	xmledit/ftplugin/eruby.vim	/^let b:last_wrap_atts_used = ""$/;"	v
b:last_wrap_atts_used	xmledit/ftplugin/html.vim	/^let b:last_wrap_atts_used = ""$/;"	v
b:last_wrap_atts_used	xmledit/ftplugin/xml.vim	/^let b:last_wrap_atts_used = ""$/;"	v
b:last_wrap_tag_used	xmledit/ftplugin/eruby.vim	/^let b:last_wrap_tag_used = ""$/;"	v
b:last_wrap_tag_used	xmledit/ftplugin/html.vim	/^let b:last_wrap_tag_used = ""$/;"	v
b:last_wrap_tag_used	xmledit/ftplugin/xml.vim	/^let b:last_wrap_tag_used = ""$/;"	v
b:match_ignorecase	mustache.vim/ftplugin/mustache.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_skip	VimClojure/ftplugin/clojure.vim	/^let b:match_skip = 's:comment\\|string\\|character'$/;"	v
b:match_words	VimClojure/ftplugin/clojure.vim	/^let b:match_words = &matchpairs$/;"	v
b:match_words	mustache.vim/ftplugin/mustache.vim	/^  let b:match_words = '{:},[:],(:),'$/;"	v
b:undo_ftplugin	VimClojure/ftplugin/clojure.vim	/^let b:undo_ftplugin = "setlocal fo< com< cms< cpt< isk< def<"$/;"	v
b:undo_indent	VimClojure/indent/clojure.vim	/^	let b:undo_indent .= " lisp<"$/;"	v
b:undo_indent	VimClojure/indent/clojure.vim	/^let b:undo_indent = "setlocal ai< si< lw< et< sts< sw< inde< indk<"$/;"	v
b:vimclojure_namespace	VimClojure/autoload/vimclojure.vim	/^		let b:vimclojure_namespace = namespace.value$/;"	v
beep	vim-surround/plugin/surround.vim	/^function! s:beep()$/;"	f
binstr2bytes	webapi-vim/autoload/webapi/base64.vim	/^function! s:binstr2bytes(str)$/;"	f
bitwise_and	webapi-vim/autoload/webapi/sha1.vim	/^function! s:bitwise_and(a, b)$/;"	f
bitwise_lshift	webapi-vim/autoload/webapi/sha1.vim	/^function! s:bitwise_lshift(a, n)$/;"	f
bitwise_not	webapi-vim/autoload/webapi/sha1.vim	/^function! s:bitwise_not(a)$/;"	f
bitwise_or	webapi-vim/autoload/webapi/sha1.vim	/^function! s:bitwise_or(a, b)$/;"	f
bitwise_rshift	webapi-vim/autoload/webapi/sha1.vim	/^function! s:bitwise_rshift(a, n)$/;"	f
bitwise_xor	webapi-vim/autoload/webapi/hmac.vim	/^function! s:bitwise_xor(a, b)$/;"	f
bitwise_xor	webapi-vim/autoload/webapi/sha1.vim	/^function! s:bitwise_xor(a, b)$/;"	f
buffer	vim-bundler/plugin/bundler.vim	/^function! s:buffer(...) abort$/;"	f
buffer	vim-fugitive/plugin/fugitive.vim	/^function! s:buffer(...) abort$/;"	f
buffer	vim-rake/plugin/rake.vim	/^function! s:buffer(...) abort$/;"	f
buffer_alter_paths	vim-bundler/plugin/bundler.vim	/^function! s:buffer_alter_paths() dict abort$/;"	f
buffer_app	vim-rails/autoload/rails.vim	/^function! s:buffer_app() dict abort$/;"	f
buffer_commit	vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_commit() dict abort$/;"	f
buffer_compare_age	vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_compare_age(commit) dict abort$/;"	f
buffer_containing_commit	vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_containing_commit() dict abort$/;"	f
buffer_expand	vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_expand(rev) dict abort$/;"	f
buffer_getline	vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_getline(lnum) dict abort$/;"	f
buffer_getline	vim-rails/autoload/rails.vim	/^function! s:buffer_getline(...) dict abort$/;"	f
buffer_getline	vim-rake/plugin/rake.vim	/^function! s:buffer_getline(lnum) dict abort$/;"	f
buffer_getvar	vim-bundler/plugin/bundler.vim	/^function! s:buffer_getvar(var) dict abort$/;"	f
buffer_getvar	vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_getvar(var) dict abort$/;"	f
buffer_getvar	vim-rails/autoload/rails.vim	/^function! s:buffer_getvar(varname) dict abort$/;"	f
buffer_getvar	vim-rake/plugin/rake.vim	/^function! s:buffer_getvar(var) dict abort$/;"	f
buffer_lines	vim-rails/autoload/rails.vim	/^function! s:buffer_lines() dict abort$/;"	f
buffer_name	vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_name() dict abort$/;"	f
buffer_name	vim-rails/autoload/rails.vim	/^function! s:buffer_name() dict abort$/;"	f
buffer_name	vim-rake/plugin/rake.vim	/^function! s:buffer_name() dict abort$/;"	f
buffer_number	vim-rails/autoload/rails.vim	/^function! s:buffer_number() dict abort$/;"	f
buffer_path	vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_path(...) dict abort$/;"	f
buffer_path	vim-rails/autoload/rails.vim	/^function! s:buffer_path() dict abort$/;"	f
buffer_path	vim-rake/plugin/rake.vim	/^function! s:buffer_path() dict abort$/;"	f
buffer_project	vim-bundler/plugin/bundler.vim	/^function! s:buffer_project() dict abort$/;"	f
buffer_project	vim-rake/plugin/rake.vim	/^function! s:buffer_project() dict abort$/;"	f
buffer_related	vim-rake/plugin/rake.vim	/^function! s:buffer_related() dict abort$/;"	f
buffer_repo	vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_repo() dict abort$/;"	f
buffer_rev	vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_rev() dict abort$/;"	f
buffer_setvar	vim-bundler/plugin/bundler.vim	/^function! s:buffer_setvar(var,value) dict abort$/;"	f
buffer_setvar	vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_setvar(var,value) dict abort$/;"	f
buffer_setvar	vim-rails/autoload/rails.vim	/^function! s:buffer_setvar(varname, val) dict abort$/;"	f
buffer_setvar	vim-rake/plugin/rake.vim	/^function! s:buffer_setvar(var,value) dict abort$/;"	f
buffer_sha1	vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_sha1() dict abort$/;"	f
buffer_spec	vim-fugitive/plugin/fugitive.vim	/^  function! s:buffer_spec() dict abort$/;"	f
buffer_type	vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_type(...) dict abort$/;"	f
buffer_type_name	vim-rails/autoload/rails.vim	/^function! s:buffer_type_name(...) dict abort$/;"	f
buffunc	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:buffunc(e)$/;"	f
buftab	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:buftab(bufnr, md)$/;"	f
bufwins	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:bufwins(bufnr)$/;"	f
build_path_option	vim-bundler/plugin/bundler.vim	/^function! s:build_path_option(paths,suffix) abort$/;"	f
buildpat	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:buildpat(lst)$/;"	f
bundler	vim-bundler/plugin/bundler.vim	/^augroup bundler$/;"	a
bundler#buffer	vim-bundler/plugin/bundler.vim	/^function! bundler#buffer(...) abort$/;"	f
bundler_make	vim-bundler/plugin/bundler.vim	/^augroup bundler_make$/;"	a
bundler_path	vim-bundler/plugin/bundler.vim	/^augroup bundler_path$/;"	a
bundler_syntax	vim-bundler/plugin/bundler.vim	/^augroup bundler_syntax$/;"	a
bundler_utility	vim-bundler/plugin/bundler.vim	/^augroup bundler_utility$/;"	a
bytes2str	webapi-vim/autoload/webapi/base64.vim	/^function! s:bytes2str(bytes)$/;"	f
cache_clear	vim-rails/autoload/rails.vim	/^function! s:cache_clear(...) dict$/;"	f
cache_get	vim-rails/autoload/rails.vim	/^function! s:cache_get(...) dict$/;"	f
cache_has	vim-rails/autoload/rails.vim	/^function! s:cache_has(key) dict$/;"	f
cache_needs	vim-rails/autoload/rails.vim	/^function! s:cache_needs(key) dict$/;"	f
cache_set	vim-rails/autoload/rails.vim	/^function! s:cache_set(key,value) dict$/;"	f
cachefile	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:cachefile()$/;"	f
changelist	ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! s:changelist(bufnr)$/;"	f
changesurround	vim-surround/plugin/surround.vim	/^function! s:changesurround() " {{{1$/;"	f
checkbuf	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:checkbuf()$/;"	f
chknearby	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:chknearby(pat)$/;"	f
choices	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:choices(str, choices, func, args)$/;"	f
chop	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:chop(mrufs)$/;"	f
clojure_loaded	VimClojure/plugin/clojure.vim	/^let clojure_loaded = "2.2.0-SNAPSHOT"$/;"	v
closematch	vim-surround/plugin/surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
cmd	VimClojure/autoload/vimclojure.vim	/^	let cmd = self.getCommand()$/;"	v
cmp	webapi-vim/autoload/webapi/sha1.vim	/^function! s:cmp(a, b)$/;"	f
coffee_compiler	vim-coffee-script/compiler/coffee.vim	/^  let coffee_compiler = 'coffee'$/;"	v
coffee_compiler	vim-coffee-script/compiler/coffee.vim	/^  let coffee_compiler = coffee_make_compiler$/;"	v
coffee_compiler	vim-coffee-script/ftplugin/coffee.vim	/^  let coffee_compiler = 'coffee'$/;"	v
coffee_lint_options	vim-coffee-script/ftplugin/coffee.vim	/^  let coffee_lint_options = ''$/;"	v
coffee_linter	vim-coffee-script/ftplugin/coffee.vim	/^  let coffee_linter = 'coffeelint'$/;"	v
coffee_make_options	vim-coffee-script/compiler/coffee.vim	/^  let coffee_make_options = ''$/;"	v
color_helper#color_name_to_hex	vim-indent-guides/autoload/color_helper.vim	/^function! color_helper#color_name_to_hex(color_name)$/;"	f
color_helper#dec_to_hex	vim-indent-guides/autoload/color_helper.vim	/^function! color_helper#dec_to_hex(arg, padding)$/;"	f
color_helper#hex_color_darken	vim-indent-guides/autoload/color_helper.vim	/^function! color_helper#hex_color_darken(color, percent)$/;"	f
color_helper#hex_color_lighten	vim-indent-guides/autoload/color_helper.vim	/^function! color_helper#hex_color_lighten(color, percent)$/;"	f
color_helper#hex_color_to_rgb	vim-indent-guides/autoload/color_helper.vim	/^function! color_helper#hex_color_to_rgb(hex_color)$/;"	f
color_helper#hex_to_dec	vim-indent-guides/autoload/color_helper.vim	/^function! color_helper#hex_to_dec(arg)$/;"	f
color_helper#rgb_color_to_hex	vim-indent-guides/autoload/color_helper.vim	/^function! color_helper#rgb_color_to_hex(rgb_color)$/;"	f
command	vim-bundler/plugin/bundler.vim	/^function! s:command(definition) abort$/;"	f
command	vim-fugitive/plugin/fugitive.vim	/^function! s:command(definition) abort$/;"	f
command	vim-rake/plugin/rake.vim	/^function! s:command(definition) abort$/;"	f
compact	vim-rails/autoload/rails.vim	/^function! s:compact(ary)$/;"	f
comparent	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:comparent(...)$/;"	f
compatibility_check	vim-fugitive/plugin/fugitive.vim	/^function! s:compatibility_check()$/;"	f
compfnlen	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compfnlen(...)$/;"	f
completion_filter	vim-bundler/plugin/bundler.vim	/^function! s:completion_filter(results,A)$/;"	f
completion_filter	vim-rails/autoload/rails.vim	/^function! s:completion_filter(results,A)$/;"	f
completion_filter	vim-rake/plugin/rake.vim	/^function! s:completion_filter(results,A)$/;"	f
compmatlen	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compmatlen(...)$/;"	f
compmreb	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compmreb(...)$/;"	f
compmref	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compmref(...)$/;"	f
comptime	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:comptime(...)$/;"	f
compval	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compval(...)$/;"	f
compval	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:compval(...)$/;"	f
configfile	webapi-vim/example/google-buzz.vim	/^let configfile = expand('~\/.google-buzz-vim')$/;"	v
configfile	webapi-vim/example/twitter.vim	/^let configfile = expand('~\/.twitter-vim')$/;"	v
controller	vim-rails/autoload/rails.vim	/^function! s:controller(...)$/;"	f
controllerEdit	vim-rails/autoload/rails.vim	/^function! s:controllerEdit(cmd,...)$/;"	f
controllerList	vim-rails/autoload/rails.vim	/^function! s:controllerList(A,L,P)$/;"	f
createWsse	webapi-vim/autoload/webapi/atom.vim	/^function! s:createWsse(user, pass)$/;"	f
createXml	webapi-vim/autoload/webapi/atom.vim	/^function! s:createXml(entry)$/;"	f
crend	vim-endwise/plugin/endwise.vim	/^function! s:crend(always)$/;"	f
cs	vim-surround/plugin/surround.vim	/^  nmap cs  <Plug>Csurround$/;"	m
ctrlp#acceptfile	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#acceptfile(mode, line, ...)$/;"	f
ctrlp#bookmarkdir#accept	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#accept(mode, str)$/;"	f
ctrlp#bookmarkdir#add	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#add(dir)$/;"	f
ctrlp#bookmarkdir#id	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#id()$/;"	f
ctrlp#bookmarkdir#init	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#init()$/;"	f
ctrlp#bookmarkdir#remove	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#remove(entries)$/;"	f
ctrlp#buffers	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#buffers(...)$/;"	f
ctrlp#buffertag#accept	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#accept(mode, str)$/;"	f
ctrlp#buffertag#cmd	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#cmd(mode, ...)$/;"	f
ctrlp#buffertag#exit	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#exit()$/;"	f
ctrlp#buffertag#init	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#init(fname)$/;"	f
ctrlp#buffertag#opts	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#opts()$/;"	f
ctrlp#call	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#call(func, ...)$/;"	f
ctrlp#changes#accept	ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#accept(mode, str)$/;"	f
ctrlp#changes#cmd	ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#cmd(mode, ...)$/;"	f
ctrlp#changes#exit	ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#exit()$/;"	f
ctrlp#changes#init	ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#init(original_bufnr, bufnr)$/;"	f
ctrlp#clr	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#clr(...)$/;"	f
ctrlp#clra	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#clra()$/;"	f
ctrlp#complen	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#complen(...)$/;"	f
ctrlp#dir#accept	ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! ctrlp#dir#accept(mode, str)$/;"	f
ctrlp#dir#id	ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! ctrlp#dir#id()$/;"	f
ctrlp#dir#init	ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! ctrlp#dir#init(...)$/;"	f
ctrlp#dirnfile	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#dirnfile(entries)$/;"	f
ctrlp#exit	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#exit()$/;"	f
ctrlp#files	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#files()$/;"	f
ctrlp#getcline	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#getcline()$/;"	f
ctrlp#getmarkedlist	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#getmarkedlist()$/;"	f
ctrlp#hicheck	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#hicheck(grp, defgrp)$/;"	f
ctrlp#init	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#init(type, ...)$/;"	f
ctrlp#j2l	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#j2l(nr)$/;"	f
ctrlp#line#accept	ctrlp.vim/autoload/ctrlp/line.vim	/^fu! ctrlp#line#accept(mode, str)$/;"	f
ctrlp#line#id	ctrlp.vim/autoload/ctrlp/line.vim	/^fu! ctrlp#line#id()$/;"	f
ctrlp#line#init	ctrlp.vim/autoload/ctrlp/line.vim	/^fu! ctrlp#line#init()$/;"	f
ctrlp#mixed#id	ctrlp.vim/autoload/ctrlp/mixed.vim	/^fu! ctrlp#mixed#id()$/;"	f
ctrlp#mixed#init	ctrlp.vim/autoload/ctrlp/mixed.vim	/^fu! ctrlp#mixed#init(clim)$/;"	f
ctrlp#modfilecond	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#modfilecond(w)$/;"	f
ctrlp#mrufiles#add	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#add(fn)$/;"	f
ctrlp#mrufiles#bufs	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#bufs()$/;"	f
ctrlp#mrufiles#cachefile	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#cachefile()$/;"	f
ctrlp#mrufiles#init	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#init()$/;"	f
ctrlp#mrufiles#list	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#list(...)$/;"	f
ctrlp#mrufiles#opts	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#opts()$/;"	f
ctrlp#mrufiles#refresh	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#refresh(...)$/;"	f
ctrlp#mrufiles#remove	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#remove(files)$/;"	f
ctrlp#normcmd	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#normcmd(cmd, ...)$/;"	f
ctrlp#nosy	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#nosy()$/;"	f
ctrlp#progress	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#progress(enum, ...)$/;"	f
ctrlp#prtclear	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#prtclear()$/;"	f
ctrlp#quickfix#accept	ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! ctrlp#quickfix#accept(mode, str)$/;"	f
ctrlp#quickfix#id	ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! ctrlp#quickfix#id()$/;"	f
ctrlp#quickfix#init	ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! ctrlp#quickfix#init()$/;"	f
ctrlp#recordhist	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#recordhist()$/;"	f
ctrlp#rmbasedir	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#rmbasedir(items)$/;"	f
ctrlp#rtscript#id	ctrlp.vim/autoload/ctrlp/rtscript.vim	/^fu! ctrlp#rtscript#id()$/;"	f
ctrlp#rtscript#init	ctrlp.vim/autoload/ctrlp/rtscript.vim	/^fu! ctrlp#rtscript#init(caching)$/;"	f
ctrlp#setdir	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#setdir(path, ...)$/;"	f
ctrlp#setlcdir	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#setlcdir()$/;"	f
ctrlp#setlines	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#setlines(...)$/;"	f
ctrlp#statusline	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#statusline()$/;"	f
ctrlp#switchtype	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#switchtype(id)$/;"	f
ctrlp#syntax	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#syntax()$/;"	f
ctrlp#tabcount	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#tabcount()$/;"	f
ctrlp#tag#accept	ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#accept(mode, str)$/;"	f
ctrlp#tag#enter	ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#enter()$/;"	f
ctrlp#tag#id	ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#id()$/;"	f
ctrlp#tag#init	ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#init()$/;"	f
ctrlp#undo#accept	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#accept(mode, str)$/;"	f
ctrlp#undo#enter	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#enter()$/;"	f
ctrlp#undo#exit	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#exit()$/;"	f
ctrlp#undo#id	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#id()$/;"	f
ctrlp#undo#init	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#init()$/;"	f
ctrlp#utils#cachedir	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#cachedir()$/;"	f
ctrlp#utils#cachefile	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#cachefile(...)$/;"	f
ctrlp#utils#dircompl	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#dircompl(...)$/;"	f
ctrlp#utils#fnesc	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#fnesc(path, type, ...)$/;"	f
ctrlp#utils#glob	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#glob(...)$/;"	f
ctrlp#utils#globpath	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#globpath(...)$/;"	f
ctrlp#utils#lash	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#lash()$/;"	f
ctrlp#utils#mkdir	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#mkdir(dir)$/;"	f
ctrlp#utils#opts	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#opts()$/;"	f
ctrlp#utils#readfile	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#readfile(file)$/;"	f
ctrlp#utils#writecache	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#writecache(lines, ...)$/;"	f
ctx	webapi-vim/example/google-buzz.vim	/^  let ctx = eval(join(readfile(configfile), ""))$/;"	v
ctx	webapi-vim/example/google-buzz.vim	/^  let ctx = webapi#oauth#access_token(access_token_url, ctx, {"oauth_verifier": verifier})$/;"	v
ctx	webapi-vim/example/google-buzz.vim	/^  let ctx = webapi#oauth#request_token(request_token_url, ctx, {"scope": "https:\/\/www.googleapis.com\/auth\/buzz", "oauth_callback": ctx.callback})$/;"	v
ctx	webapi-vim/example/google-buzz.vim	/^  let ctx.callback = input("callback:")$/;"	v
ctx	webapi-vim/example/google-buzz.vim	/^  let ctx.consumer_key = input("consumer_key:")$/;"	v
ctx	webapi-vim/example/google-buzz.vim	/^  let ctx.consumer_secret = input("consumer_secret:")$/;"	v
ctx	webapi-vim/example/google-buzz.vim	/^  let ctx.domain = input("domain:")$/;"	v
ctx	webapi-vim/example/google-buzz.vim	/^let ctx = {}$/;"	v
ctx	webapi-vim/example/twitter.vim	/^  let ctx = eval(join(readfile(configfile), ""))$/;"	v
ctx	webapi-vim/example/twitter.vim	/^  let ctx = webapi#oauth#access_token(access_token_url, ctx, {"oauth_verifier": pin})$/;"	v
ctx	webapi-vim/example/twitter.vim	/^  let ctx = webapi#oauth#request_token(request_token_url, ctx)$/;"	v
ctx	webapi-vim/example/twitter.vim	/^  let ctx.consumer_key = input("consumer_key:")$/;"	v
ctx	webapi-vim/example/twitter.vim	/^  let ctx.consumer_secret = input("consumer_secret:")$/;"	v
ctx	webapi-vim/example/twitter.vim	/^let ctx = {}$/;"	v
current_compiler	vim-coffee-script/compiler/coffee.vim	/^let current_compiler = 'coffee'$/;"	v
data	webapi-vim/example/google-buzz.vim	/^let data = ''$/;"	v
debug	vim-rails/autoload/rails.vim	/^function! s:debug(str)$/;"	f
decodeEntityReference	webapi-vim/autoload/webapi/xml.vim	/^function! s:decodeEntityReference(str)$/;"	f
define_commands	vim-bundler/plugin/bundler.vim	/^function! s:define_commands()$/;"	f
define_commands	vim-fugitive/plugin/fugitive.vim	/^function! s:define_commands()$/;"	f
define_commands	vim-rake/plugin/rake.vim	/^function! s:define_commands()$/;"	f
delent	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:delent(rfunc)$/;"	f
dict2list	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:dict2list(dict)$/;"	f
dictindex	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dictindex(dict, expr)$/;"	f
did_json_syn_inits	vim-json/syntax/json.vim	/^    let did_json_syn_inits = 1$/;"	v
did_lisp_syntax_inits	vim-jquery/syntax/jquery.vim	/^    let did_lisp_syntax_inits = 1$/;"	v
diff_window_count	vim-fugitive/plugin/fugitive.vim	/^function! s:diff_window_count()$/;"	f
diffoff	vim-fugitive/plugin/fugitive.vim	/^function! s:diffoff()$/;"	f
diffoff_all	vim-fugitive/plugin/fugitive.vim	/^function! s:diffoff_all(dir)$/;"	f
diffthis	vim-fugitive/plugin/fugitive.vim	/^function! s:diffthis()$/;"	f
dircompl	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dircompl(be, sd)$/;"	f
dismrk	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dismrk()$/;"	f
djump	vim-rails/autoload/rails.vim	/^function! s:djump(def)$/;"	f
dohighlight	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dohighlight()$/;"	f
dom	webapi-vim/example/gistview.vim	/^let dom = webapi#html#parse(obj.div)$/;"	v
dom	webapi-vim/example/weather.vim	/^let dom = webapi#xml#parseURL(printf('http:\/\/www.google.com\/ig\/api?weather=%s', webapi#http#encodeURIComponent(loc)))$/;"	v
dosigns	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dosigns()$/;"	f
dosurround	vim-surround/plugin/surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
ds	vim-surround/plugin/surround.vim	/^  nmap ds  <Plug>Dsurround$/;"	m
dump	webapi-vim/example/gistview.vim	/^function! s:dump(node, syntax)$/;"	f
edit	vim-rails/autoload/rails.vim	/^function! s:edit(cmd,file,...)$/;"	f
editcmdfor	vim-rails/autoload/rails.vim	/^function! s:editcmdfor(cmd)$/;"	f
elapsed	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:elapsed(nr)$/;"	f
encodeEntityReference	webapi-vim/autoload/webapi/xml.vim	/^function! s:encodeEntityReference(str)$/;"	f
endof	vim-rails/autoload/rails.vim	/^function! s:endof(lnum)$/;"	f
entry	webapi-vim/example/hatenadiary.vim	/^let entry = atom#getEntry(id, hatena_id, password)$/;"	v
entry	webapi-vim/example/hatenadiary.vim	/^let entry = atom#newEntry()$/;"	v
entry	webapi-vim/example/livedoor.vim	/^let entry = atom#newEntry()$/;"	v
entry_template.setContentFromFile	webapi-vim/autoload/webapi/atom.vim	/^function s:entry_template.setContentFromFile(file) dict$/;"	f
environment	vim-rails/autoload/rails.vim	/^function! s:environment()$/;"	f
environmentEdit	vim-rails/autoload/rails.vim	/^function! s:environmentEdit(cmd,...)$/;"	f
environmentList	vim-rails/autoload/rails.vim	/^function! s:environmentList(A,L,P)$/;"	f
error	vim-rails/autoload/rails.vim	/^function! s:error(str)$/;"	f
error	vim-rails/plugin/rails.vim	/^function! s:error(str)$/;"	f
escarg	vim-rails/autoload/rails.vim	/^function! s:escarg(p)$/;"	f
esccmd	vim-rails/autoload/rails.vim	/^function! s:esccmd(p)$/;"	f
esctagscmd	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:esctagscmd(bin, args, ...)$/;"	f
escvar	vim-rails/plugin/rails.vim	/^function! s:escvar(r)$/;"	f
excl	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:excl(fn)$/;"	f
execextvar	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:execextvar(key)$/;"	f
exectags	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:exectags(cmd)$/;"	f
exectagsonfile	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:exectagsonfile(fname, ftype)$/;"	f
extension	vim-powerline/fontpatcher/fontpatcher	/^		extension = 'otf'$/;"	v
extractafter	vim-surround/plugin/surround.vim	/^function! s:extractafter(str)$/;"	f
extractbefore	vim-surround/plugin/surround.vim	/^function! s:extractbefore(str)$/;"	f
extractdbvar	vim-rails/autoload/rails.vim	/^function! s:extractdbvar(str,arg)$/;"	f
file_getline	vim-rails/autoload/rails.vim	/^function! s:file_getline(lnum,...) dict abort$/;"	f
file_lines	vim-rails/autoload/rails.vim	/^function! s:file_lines() dict abort$/;"	f
file_name	vim-rails/autoload/rails.vim	/^function! s:file_name() dict abort$/;"	f
file_path	vim-rails/autoload/rails.vim	/^function! s:file_path() dict abort$/;"	f
filter	ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! s:filter(tags)$/;"	f
findamethod	vim-rails/autoload/rails.vim	/^function! s:findamethod(func,repl)$/;"	f
findasymbol	vim-rails/autoload/rails.vim	/^function! s:findasymbol(sym,repl)$/;"	f
findcmdfor	vim-rails/autoload/rails.vim	/^function! s:findcmdfor(cmd)$/;"	f
findcommon	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:findcommon(items, seed)$/;"	f
findcount	ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! s:findcount(str)$/;"	f
findedit	vim-rails/autoload/rails.vim	/^function! s:findedit(cmd,files,...) abort$/;"	f
findfromview	vim-rails/autoload/rails.vim	/^function! s:findfromview(func,repl)$/;"	f
findit	vim-rails/autoload/rails.vim	/^function! s:findit(pat,repl)$/;"	f
findlayout	vim-rails/autoload/rails.vim	/^function! s:findlayout(name)$/;"	f
findroot	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:findroot(curr, mark, depth, type)$/;"	f
findview	vim-rails/autoload/rails.vim	/^function! s:findview(name)$/;"	f
first_file	vim-rake/plugin/rake.vim	/^function! s:first_file(choices)$/;"	f
fixindent	vim-surround/plugin/surround.vim	/^function! s:fixindent(str,spc)$/;"	f
fixturesEdit	vim-rails/autoload/rails.vim	/^function! s:fixturesEdit(cmd,...)$/;"	f
fixturesList	vim-rails/autoload/rails.vim	/^function! s:fixturesList(A,L,P)$/;"	f
fixup	webapi-vim/autoload/webapi/json.vim	/^function! s:fixup(val, tmp)$/;"	f
flatten	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:flatten(tree, cur)$/;"	f
fnameescape	vim-bundler/plugin/bundler.vim	/^function! s:fnameescape(file) abort$/;"	f
fnameescape	vim-fugitive/plugin/fugitive.vim	/^function! s:fnameescape(file) abort$/;"	f
fnameescape	vim-rake/plugin/rake.vim	/^function! s:fnameescape(file) abort$/;"	f
fnesc	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:fnesc(...)$/;"	f
font	vim-powerline/fontpatcher/fontpatcher	/^		font = fontforge.open(font_path)$/;"	v
font_dim	vim-powerline/fontpatcher/fontpatcher	/^	font_dim = {$/;"	v
font_ycenter	vim-powerline/fontpatcher/fontpatcher	/^		font_ycenter = font_dim['height'] \/ 2$/;"	v
format	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:format(...)$/;"	f
format	vim-rails/autoload/rails.vim	/^function! s:format(...)$/;"	f
format_gist	gist-vim/autoload/gist.vim	/^function! s:format_gist(gist)$/;"	f
formatline	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:formatline(str)$/;"	f
formatul	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:formatul(...)$/;"	f
from_value	webapi-vim/autoload/webapi/xmlrpc.vim	/^function! s:from_value(value)$/;"	f
fugitive	vim-fugitive/plugin/fugitive.vim	/^augroup fugitive$/;"	a
fugitive#buffer	vim-fugitive/plugin/fugitive.vim	/^function! fugitive#buffer(...) abort$/;"	f
fugitive#reload_status	vim-fugitive/plugin/fugitive.vim	/^function! fugitive#reload_status() abort$/;"	f
fugitive#repo	vim-fugitive/plugin/fugitive.vim	/^function! fugitive#repo(...)$/;"	f
fugitive#statusline	vim-fugitive/plugin/fugitive.vim	/^function! fugitive#statusline(...)$/;"	f
fugitive_blame	vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_blame$/;"	a
fugitive_commit	vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_commit$/;"	a
fugitive_diff	vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_diff$/;"	a
fugitive_files	vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_files$/;"	a
fugitive_remove	vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_remove$/;"	a
fugitive_temp	vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_temp$/;"	a
fugitive_utility	vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_utility$/;"	a
function	vim-bundler/plugin/bundler.vim	/^function! s:function(name) abort$/;"	f
function	vim-fugitive/plugin/fugitive.vim	/^function! s:function(name) abort$/;"	f
function	vim-rails/autoload/rails.vim	/^function! s:function(name)$/;"	f
function	vim-rails/plugin/rails.vim	/^function! s:function(name)$/;"	f
function	vim-rake/plugin/rake.vim	/^function! s:function(name) abort$/;"	f
functionaltestEdit	vim-rails/autoload/rails.vim	/^function! s:functionaltestEdit(cmd,...)$/;"	f
functionaltestList	vim-rails/autoload/rails.vim	/^function! s:functionaltestList(A,L,P)$/;"	f
fuzzyglob	vim-rails/autoload/rails.vim	/^function! s:fuzzyglob(arg)$/;"	f
fuzzyglob	vim-rake/plugin/rake.vim	/^function! s:fuzzyglob(arg)$/;"	f
g%	matchit/plugin/matchit.vim	/^nnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'n') <CR>$/;"	m
g%	matchit/plugin/matchit.vim	/^onoremap <silent> g% v:<C-U>call <SID>Match_wrapper('',0,'o') <CR>$/;"	m
g%	matchit/plugin/matchit.vim	/^vnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'v') <CR>m'gv``$/;"	m
g:EasyMotion_loaded	vim-easymotion/plugin/EasyMotion.vim	/^	let g:EasyMotion_loaded = 1$/;"	v
g:Pl#HL	vim-powerline/autoload/Pl.vim	/^	let g:Pl#HL = []$/;"	v
g:Pl#OLD_STL	vim-powerline/autoload/Pl.vim	/^	let g:Pl#OLD_STL = ''$/;"	v
g:Pl#Parser#Symbols	vim-powerline/autoload/Pl/Parser.vim	/^let g:Pl#Parser#Symbols = {$/;"	v
g:Pl#THEME	vim-powerline/autoload/Pl.vim	/^	let g:Pl#THEME = []$/;"	v
g:Powerline#Colorschemes#distinguished#colorscheme	vim-powerline/autoload/Powerline/Colorschemes/distinguished.vim	/^let g:Powerline#Colorschemes#distinguished#colorscheme = Pl#Colorscheme#Init([$/;"	v
g:Powerline#Matches#matches	vim-powerline/autoload/Powerline/Matches.vim	/^let g:Powerline#Matches#matches = {$/;"	v
g:Powerline#Segments#cfi#segments	vim-powerline/autoload/Powerline/Segments/cfi.vim	/^let g:Powerline#Segments#cfi#segments = Pl#Segment#Init('cfi',$/;"	v
g:Powerline#Segments#ft_man#segments	vim-powerline/autoload/Powerline/Segments/ft_man.vim	/^let g:Powerline#Segments#ft_man#segments = Pl#Segment#Init('ft_man',$/;"	v
g:Powerline#Segments#fugitive#segments	vim-powerline/autoload/Powerline/Segments/fugitive.vim	/^let g:Powerline#Segments#fugitive#segments = Pl#Segment#Init('fugitive',$/;"	v
g:Powerline#Segments#segments	vim-powerline/autoload/Powerline/Segments.vim	/^let g:Powerline#Segments#segments = Pl#Segment#Init($/;"	v
g:Powerline#Segments#syntastic#segments	vim-powerline/autoload/Powerline/Segments/syntastic.vim	/^let g:Powerline#Segments#syntastic#segments = Pl#Segment#Init('syntastic',$/;"	v
g:Powerline#Themes#distinguished#theme	vim-powerline/autoload/Powerline/Themes/distinguished.vim	/^let g:Powerline#Themes#distinguished#theme = Pl#Theme#Create($/;"	v
g:Powerline_loaded	vim-powerline/plugin/Powerline.vim	/^	let g:Powerline_loaded = 1$/;"	v
g:ackprg	ack/plugin/ack.vim	/^let g:ackprg="ack\\\\ -H\\\\ --nocolor\\\\ --nogroup"$/;"	v
g:autoclose_loaded	vim-autoclose/plugin/autoclose.vim	/^let g:autoclose_loaded = 1$/;"	v
g:autoclose_on	vim-autoclose/plugin/autoclose.vim	/^    let g:autoclose_on = 0$/;"	v
g:autoclose_on	vim-autoclose/plugin/autoclose.vim	/^    let g:autoclose_on = 1$/;"	v
g:autoloaded_rails	vim-rails/autoload/rails.vim	/^let g:autoloaded_rails = '4.4'$/;"	v
g:eco_default_subtype	vim-coffee-script/syntax/eco.vim	/^  let g:eco_default_subtype = "html"$/;"	v
g:fugitive_git_executable	vim-fugitive/plugin/fugitive.vim	/^  let g:fugitive_git_executable = 'git'$/;"	v
g:fugitive_summary_format	vim-fugitive/plugin/fugitive.vim	/^  let g:fugitive_summary_format = '%s'$/;"	v
g:gist_update_on_write	gist-vim/autoload/gist.vim	/^  let g:gist_update_on_write = 1$/;"	v
g:github_api_url	gist-vim/autoload/gist.vim	/^    let g:github_api_url = 'https:\/\/api.github.com'$/;"	v
g:github_api_url	gist-vim/autoload/gist.vim	/^  let g:github_api_url = substitute(s:system('git config --get github.apiurl'), "\\n", '', '')$/;"	v
g:github_user	gist-vim/autoload/gist.vim	/^    let g:github_user = $GITHUB_USER$/;"	v
g:github_user	gist-vim/autoload/gist.vim	/^  let g:github_user = substitute(s:system('git config --get github.user'), "\\n", '', '')$/;"	v
g:indent_guides_autocmds_enabled	vim-indent-guides/plugin/indent_guides.vim	/^let g:indent_guides_autocmds_enabled         = 0$/;"	v
g:indent_guides_color_hex_guibg_pattern	vim-indent-guides/plugin/indent_guides.vim	/^let g:indent_guides_color_hex_guibg_pattern  = 'guibg=\\zs' . g:indent_guides_color_hex_pattern . '\\ze'$/;"	v
g:indent_guides_color_hex_pattern	vim-indent-guides/plugin/indent_guides.vim	/^let g:indent_guides_color_hex_pattern        = '#[0-9A-Fa-f]\\{6\\}'$/;"	v
g:indent_guides_color_name_guibg_pattern	vim-indent-guides/plugin/indent_guides.vim	/^let g:indent_guides_color_name_guibg_pattern = "guibg='\\\\?\\\\zs[0-9A-Za-z ]\\\\+\\\\ze'\\\\?"$/;"	v
g:loaded_bundler	vim-bundler/plugin/bundler.vim	/^let g:loaded_bundler = 1$/;"	v
g:loaded_commentary	vim-commentary/plugin/commentary.vim	/^let g:loaded_commentary = 1$/;"	v
g:loaded_ctrlp	ctrlp.vim/plugin/ctrlp.vim	/^let g:loaded_ctrlp = 1$/;"	v
g:loaded_ctrlp_bookmarkdir	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^let g:loaded_ctrlp_bookmarkdir = 1$/;"	v
g:loaded_ctrlp_buftag	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^let g:loaded_ctrlp_buftag = 1$/;"	v
g:loaded_ctrlp_changes	ctrlp.vim/autoload/ctrlp/changes.vim	/^let g:loaded_ctrlp_changes = 1$/;"	v
g:loaded_ctrlp_line	ctrlp.vim/autoload/ctrlp/line.vim	/^let g:loaded_ctrlp_line = 1$/;"	v
g:loaded_ctrlp_quickfix	ctrlp.vim/autoload/ctrlp/quickfix.vim	/^let g:loaded_ctrlp_quickfix = 1$/;"	v
g:loaded_ctrlp_tag	ctrlp.vim/autoload/ctrlp/tag.vim	/^let g:loaded_ctrlp_tag = 1$/;"	v
g:loaded_ctrlp_undo	ctrlp.vim/autoload/ctrlp/undo.vim	/^let g:loaded_ctrlp_undo = 1$/;"	v
g:loaded_endwise	vim-endwise/plugin/endwise.vim	/^let g:loaded_endwise = 1$/;"	v
g:loaded_fugitive	vim-fugitive/plugin/fugitive.vim	/^let g:loaded_fugitive = 1$/;"	v
g:loaded_gist_vim	gist-vim/plugin/gist.vim	/^let g:loaded_gist_vim = 1$/;"	v
g:loaded_indent_guides	vim-indent-guides/plugin/indent_guides.vim	/^let g:loaded_indent_guides = 1$/;"	v
g:loaded_rails	vim-rails/plugin/rails.vim	/^let g:loaded_rails = 1$/;"	v
g:loaded_rake	vim-rake/plugin/rake.vim	/^let g:loaded_rake = 1$/;"	v
g:loaded_rooter	rooter/plugin/rooter.vim	/^  let g:loaded_rooter = 1$/;"	v
g:loaded_surround	vim-surround/plugin/surround.vim	/^let g:loaded_surround = 1$/;"	v
g:loaded_syntastic_c_autoload	syntastic/autoload/syntastic/c.vim	/^let g:loaded_syntastic_c_autoload = 1$/;"	v
g:loaded_syntastic_plugin	syntastic/plugin/syntastic.vim	/^let g:loaded_syntastic_plugin = 1$/;"	v
g:loaded_tagbar	tagbar/autoload/tagbar.vim	/^let g:loaded_tagbar = 1$/;"	v
g:loaded_xmpfilter	vim-ruby-xmpfilter/plugin/xmpfilter.vim	/^let g:loaded_xmpfilter = 1$/;"	v
g:rooter_patterns	rooter/plugin/rooter.vim	/^  let g:rooter_patterns = ['.git\/', '.git', '_darcs\/', '.hg\/', '.bzr\/', '.svn\/']$/;"	v
g:rooter_use_lcd	rooter/plugin/rooter.vim	/^  let g:rooter_use_lcd = 0$/;"	v
g:syntastic_auto_loc_list	syntastic/plugin/syntastic.vim	/^    let g:syntastic_auto_loc_list = 2$/;"	v
g:syntastic_echo_current_error	syntastic/plugin/syntastic.vim	/^    let g:syntastic_echo_current_error = 1$/;"	v
g:syntastic_enable_balloons	syntastic/plugin/syntastic.vim	/^    let g:syntastic_enable_balloons = 0$/;"	v
g:syntastic_enable_balloons	syntastic/plugin/syntastic.vim	/^    let g:syntastic_enable_balloons = 1$/;"	v
g:syntastic_enable_highlighting	syntastic/plugin/syntastic.vim	/^    let g:syntastic_enable_highlighting = 1$/;"	v
g:syntastic_enable_signs	syntastic/plugin/syntastic.vim	/^    let g:syntastic_enable_signs = 0$/;"	v
g:syntastic_enable_signs	syntastic/plugin/syntastic.vim	/^    let g:syntastic_enable_signs = 1$/;"	v
g:syntastic_javascript_gjslint_conf	syntastic/syntax_checkers/javascript/gjslint.vim	/^    let g:syntastic_javascript_gjslint_conf = ""$/;"	v
g:syntastic_javascript_jshint_conf	syntastic/syntax_checkers/javascript/jshint.vim	/^    let g:syntastic_javascript_jshint_conf = ""$/;"	v
g:syntastic_javascript_jsl_conf	syntastic/syntax_checkers/javascript/jsl.vim	/^    let g:syntastic_javascript_jsl_conf = ""$/;"	v
g:syntastic_javascript_jslint_conf	syntastic/syntax_checkers/javascript/jslint.vim	/^    let g:syntastic_javascript_jslint_conf = ""$/;"	v
g:syntastic_less_options	syntastic/syntax_checkers/less.vim	/^    let g:syntastic_less_options = "--no-color"$/;"	v
g:syntastic_mode_map	syntastic/plugin/syntastic.vim	/^    let g:syntastic_mode_map = {}$/;"	v
g:syntastic_mode_map	syntastic/plugin/syntastic.vim	/^    let g:syntastic_mode_map['active_filetypes'] = []$/;"	v
g:syntastic_mode_map	syntastic/plugin/syntastic.vim	/^    let g:syntastic_mode_map['mode'] = 'active'$/;"	v
g:syntastic_mode_map	syntastic/plugin/syntastic.vim	/^    let g:syntastic_mode_map['passive_filetypes'] = []$/;"	v
g:syntastic_nvcc_binary	syntastic/syntax_checkers/cuda.vim	/^	let g:syntastic_nvcc_binary = '\/usr\/local\/cuda\/bin\/nvcc'$/;"	v
g:syntastic_perl_efm_program	syntastic/syntax_checkers/perl.vim	/^    let g:syntastic_perl_efm_program = 'perl '.$VIMRUNTIME.'\/tools\/efm_perl.pl -c'$/;"	v
g:syntastic_phpcs_conf	syntastic/syntax_checkers/php.vim	/^    let g:syntastic_phpcs_conf = "--standard=Zend"$/;"	v
g:syntastic_phpcs_disable	syntastic/syntax_checkers/php.vim	/^    let g:syntastic_phpcs_disable = 0$/;"	v
g:syntastic_python_checker	syntastic/syntax_checkers/python.vim	/^      let g:syntastic_python_checker = 'flake8'$/;"	v
g:syntastic_python_checker	syntastic/syntax_checkers/python.vim	/^      let g:syntastic_python_checker = 'pyflakes'$/;"	v
g:syntastic_quiet_warnings	syntastic/plugin/syntastic.vim	/^    let g:syntastic_quiet_warnings = 0$/;"	v
g:syntastic_sass_imports	syntastic/syntax_checkers/sass.vim	/^let g:syntastic_sass_imports = 0$/;"	v
g:syntastic_stl_format	syntastic/plugin/syntastic.vim	/^    let g:syntastic_stl_format = '[Syntax: line:%F (%t)]'$/;"	v
g:tabular_default_format	tabular/autoload/tabular.vim	/^  let g:tabular_default_format = "l1"$/;"	v
g:tabular_loaded	tabular/plugin/Tabular.vim	/^let g:tabular_loaded = 1$/;"	v
g:tagbar_autoclose	tagbar/plugin/tagbar.vim	/^    let g:tagbar_autoclose = 0$/;"	v
g:tagbar_autofocus	tagbar/plugin/tagbar.vim	/^    let g:tagbar_autofocus = 0$/;"	v
g:tagbar_autoshowtag	tagbar/plugin/tagbar.vim	/^    let g:tagbar_autoshowtag = 0$/;"	v
g:tagbar_compact	tagbar/plugin/tagbar.vim	/^    let g:tagbar_compact = 0$/;"	v
g:tagbar_expand	tagbar/plugin/tagbar.vim	/^    let g:tagbar_expand = 0$/;"	v
g:tagbar_foldlevel	tagbar/plugin/tagbar.vim	/^    let g:tagbar_foldlevel = 99$/;"	v
g:tagbar_iconchars	tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['+', '-']$/;"	v
g:tagbar_iconchars	tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['▶', '▼']$/;"	v
g:tagbar_indent	tagbar/plugin/tagbar.vim	/^    let g:tagbar_indent = 2$/;"	v
g:tagbar_left	tagbar/plugin/tagbar.vim	/^    let g:tagbar_left = 0$/;"	v
g:tagbar_show_visibility	tagbar/plugin/tagbar.vim	/^    let g:tagbar_show_visibility = 1$/;"	v
g:tagbar_singleclick	tagbar/plugin/tagbar.vim	/^    let g:tagbar_singleclick = 0$/;"	v
g:tagbar_sort	tagbar/plugin/tagbar.vim	/^    let g:tagbar_sort = 1$/;"	v
g:tagbar_systemenc	tagbar/plugin/tagbar.vim	/^    let g:tagbar_systemenc = &encoding$/;"	v
g:tagbar_width	tagbar/plugin/tagbar.vim	/^    let g:tagbar_width = 40$/;"	v
g:vimball_home	xmledit/build.vim	/^let g:vimball_home = "."$/;"	v
g:vimclojure#ParenRainbowColorsDark	VimClojure/syntax/clojure.vim	/^		let g:vimclojure#ParenRainbowColorsDark = {$/;"	v
g:vimclojure#ParenRainbowColorsDark	VimClojure/syntax/clojure.vim	/^		let g:vimclojure#ParenRainbowColorsDark =$/;"	v
g:vimclojure#ParenRainbowColorsLight	VimClojure/syntax/clojure.vim	/^		let g:vimclojure#ParenRainbowColorsLight = {$/;"	v
g:vimclojure#ParenRainbowColorsLight	VimClojure/syntax/clojure.vim	/^		let g:vimclojure#ParenRainbowColorsLight =$/;"	v
get_browser_command	gist-vim/autoload/gist.vim	/^function! s:get_browser_command()$/;"	f
get_childNode	webapi-vim/autoload/webapi/xmlrpc.vim	/^function! s:get_childNode(node)$/;"	f
get_convert_code	webapi-vim/autoload/webapi/soap.vim	/^function! s:get_convert_code(arg)$/;"	f
get_current_filename	gist-vim/autoload/gist.vim	/^function! s:get_current_filename(no)$/;"	f
get_dim	vim-powerline/fontpatcher/fontpatcher	/^	def get_dim(glyph):$/;"	f
getbookmarks	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:getbookmarks()$/;"	f
getchar	vim-surround/plugin/surround.vim	/^function! s:getchar()$/;"	f
getenv	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getenv()$/;"	f
getextvar	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getextvar(key)$/;"	f
gethistdata	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:gethistdata()$/;"	f
gethistloc	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:gethistloc()$/;"	f
getinput	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getinput(...)$/;"	f
getinput	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:getinput(str, ...)$/;"	f
getnewmix	ctrlp.vim/autoload/ctrlp/mixed.vim	/^fu! s:getnewmix(cwd, clim)$/;"	f
getopt	vim-rails/autoload/rails.vim	/^function! s:getopt(opt,...)$/;"	f
getparent	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getparent(item)$/;"	f
getpidfor	vim-rails/autoload/rails.vim	/^function! s:getpidfor(bind,port)$/;"	f
getregs	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getregs()$/;"	f
getundo	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:getundo()$/;"	f
gist#Gist	gist-vim/autoload/gist.vim	/^function! gist#Gist(count, line1, line2, ...)$/;"	f
gist#list	gist-vim/autoload/gist.vim	/^function! gist#list(user, ...)$/;"	f
github_url	vim-fugitive/plugin/fugitive.vim	/^function! s:github_url(repo,url,rev,commit,path,type,line1,line2) abort$/;"	f
glbpath	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:glbpath(...)$/;"	f
globdirs	ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! s:globdirs(dirs, depth)$/;"	f
go	vim-commentary/plugin/commentary.vim	/^function! s:go(type) abort$/;"	f
gsub	vim-bundler/plugin/bundler.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
gsub	vim-fugitive/plugin/fugitive.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
gsub	vim-rails/autoload/rails.vim	/^function! s:gsub(str,pat,rep)$/;"	f
gsub	vim-rails/plugin/rails.vim	/^function! s:gsub(str,pat,rep)$/;"	f
gsub	vim-rake/plugin/rake.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
hatena_id	webapi-vim/example/hatenadiary.vim	/^let hatena_id = 'your-hatena-id'$/;"	v
headntail	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:headntail(str)$/;"	f
helperEdit	vim-rails/autoload/rails.vim	/^function! s:helperEdit(cmd,...)$/;"	f
helperList	vim-rails/autoload/rails.vim	/^function! s:helperList(A,L,P)$/;"	f
helpermethods	vim-rails/autoload/rails.vim	/^function! s:helpermethods()$/;"	f
hex2bytes	webapi-vim/autoload/webapi/hmac.vim	/^function! s:hex2bytes(str)$/;"	f
highlight	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:highlight(pat, grp)$/;"	f
id	webapi-vim/example/hatenadiary.vim	/^let id = atom#createEntry("http:\/\/d.hatena.ne.jp\/".hatena_id."\/atom\/draft", hatena_id, password, entry)$/;"	v
id	webapi-vim/example/hatenadiary.vim	/^let id = atom#updateEntry(id, hatena_id, password, entry, {"X-HATENA-PUBLISH": 1})$/;"	v
ignore	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ignore()$/;"	f
imageName	webapi-vim/example/jugem.vim	/^let imageName = "my-image.gif" $/;"	v
imagePath	webapi-vim/example/jugem.vim	/^let imagePath = "\/path\/to\/images\/my-image.gif" $/;"	v
imgurl	webapi-vim/example/jugem.vim	/^let imgurl = api.newMediaObject(jugem_id, jugem_id, password, {$/;"	v
indent_guides	vim-indent-guides/plugin/indent_guides.vim	/^augroup indent_guides$/;"	a
indent_guides#basic_highlight_colors	vim-indent-guides/autoload/indent_guides.vim	/^function! indent_guides#basic_highlight_colors()$/;"	f
indent_guides#calculate_guide_size	vim-indent-guides/autoload/indent_guides.vim	/^function! indent_guides#calculate_guide_size()$/;"	f
indent_guides#capture_highlight	vim-indent-guides/autoload/indent_guides.vim	/^function! indent_guides#capture_highlight(group_name)$/;"	f
indent_guides#clear_matches	vim-indent-guides/autoload/indent_guides.vim	/^function! indent_guides#clear_matches()$/;"	f
indent_guides#define_default_highlights	vim-indent-guides/autoload/indent_guides.vim	/^function! indent_guides#define_default_highlights()$/;"	f
indent_guides#disable	vim-indent-guides/autoload/indent_guides.vim	/^function! indent_guides#disable()$/;"	f
indent_guides#enable	vim-indent-guides/autoload/indent_guides.vim	/^function! indent_guides#enable()$/;"	f
indent_guides#gui_highlight_colors	vim-indent-guides/autoload/indent_guides.vim	/^function! indent_guides#gui_highlight_colors()$/;"	f
indent_guides#highlight_colors	vim-indent-guides/autoload/indent_guides.vim	/^function! indent_guides#highlight_colors()$/;"	f
indent_guides#indent_highlight_pattern	vim-indent-guides/autoload/indent_guides.vim	/^function! indent_guides#indent_highlight_pattern(indent_pattern, column_start, indent_size)$/;"	f
indent_guides#init_matches	vim-indent-guides/autoload/indent_guides.vim	/^function! indent_guides#init_matches()$/;"	f
indent_guides#init_script_vars	vim-indent-guides/autoload/indent_guides.vim	/^function! indent_guides#init_script_vars()$/;"	f
indent_guides#lighten_or_darken_color	vim-indent-guides/autoload/indent_guides.vim	/^function! indent_guides#lighten_or_darken_color(color)$/;"	f
indent_guides#process_autocmds	vim-indent-guides/autoload/indent_guides.vim	/^function! indent_guides#process_autocmds()$/;"	f
indent_guides#toggle	vim-indent-guides/autoload/indent_guides.vim	/^function! indent_guides#toggle()$/;"	f
initOpenURL	vim-rails/autoload/rails.vim	/^function! s:initOpenURL()$/;"	f
initializerEdit	vim-rails/autoload/rails.vim	/^function! s:initializerEdit(cmd,...)$/;"	f
initializerList	vim-rails/autoload/rails.vim	/^function! s:initializerList(A,L,P)$/;"	f
inputreplacement	vim-surround/plugin/surround.vim	/^function! s:inputreplacement()$/;"	f
inputtarget	vim-surround/plugin/surround.vim	/^function! s:inputtarget()$/;"	f
insert	vim-surround/plugin/surround.vim	/^function! s:insert(...) " {{{1$/;"	f
insertcache	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:insertcache(str)$/;"	f
insertstr	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:insertstr()$/;"	f
instaweb_url	vim-fugitive/plugin/fugitive.vim	/^function! s:instaweb_url(repo,rev,commit,path,type,...) abort$/;"	f
integrationtestEdit	vim-rails/autoload/rails.vim	/^function! s:integrationtestEdit(cmd,...)$/;"	f
integrationtestList	vim-rails/autoload/rails.vim	/^function! s:integrationtestList(A,L,P)$/;"	f
invertrange	vim-rails/autoload/rails.vim	/^function! s:invertrange(beg,end)$/;"	f
iscmdwin	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:iscmdwin()$/;"	f
ispathitem	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ispathitem()$/;"	f
javascriptEdit	vim-rails/autoload/rails.vim	/^function! s:javascriptEdit(cmd,...)$/;"	f
javascriptList	vim-rails/autoload/rails.vim	/^function! s:javascriptList(A,L,P)$/;"	f
jugem_id	webapi-vim/example/jugem.vim	/^let jugem_id = 'your-jugem-id'$/;"	v
key	webapi-vim/autoload/webapi/atom.vim	/^    let key = substitute(s:key, '\\.\\(.\\)', '\\=toupper(submatch(1))', '')$/;"	v
known_files.get	tagbar/autoload/tagbar.vim	/^function! s:known_files.get(fname) abort dict$/;"	f
known_files.getCurrent	tagbar/autoload/tagbar.vim	/^function! s:known_files.getCurrent() abort dict$/;"	f
known_files.has	tagbar/autoload/tagbar.vim	/^function! s:known_files.has(fname) abort dict$/;"	f
known_files.put	tagbar/autoload/tagbar.vim	/^function! s:known_files.put(fileinfo, ...) abort dict$/;"	f
known_files.rm	tagbar/autoload/tagbar.vim	/^function! s:known_files.rm(fname) abort dict$/;"	f
known_files.setCurrent	tagbar/autoload/tagbar.vim	/^function! s:known_files.setCurrent(fileinfo) abort dict$/;"	f
lash	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:lash(...)$/;"	f
lash	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! s:lash(...)$/;"	f
lastformat	vim-rails/autoload/rails.vim	/^function! s:lastformat(start)$/;"	f
lastmethod	vim-rails/autoload/rails.vim	/^function! s:lastmethod(...)$/;"	f
lastmethodline	vim-rails/autoload/rails.vim	/^function! s:lastmethodline(start)$/;"	f
lastopeningline	vim-rails/autoload/rails.vim	/^function! s:lastopeningline(pattern,limit,start)$/;"	f
lastvisual	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:lastvisual()$/;"	f
layoutEdit	vim-rails/autoload/rails.vim	/^function! s:layoutEdit(cmd,...)$/;"	f
layoutList	vim-rails/autoload/rails.vim	/^function! s:layoutList(A,L,P)$/;"	f
leavepre	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:leavepre()$/;"	f
libEdit	vim-rails/autoload/rails.vim	/^function! s:libEdit(cmd,...)$/;"	f
libList	vim-rails/autoload/rails.vim	/^function! s:libList(A,L,P)$/;"	f
lineout	ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! s:lineout(dict)$/;"	f
linepeak	vim-rails/autoload/rails.vim	/^function! s:linepeak()$/;"	f
livedoor_id	webapi-vim/example/livedoor.vim	/^let livedoor_id = 'your-livedoor-id'$/;"	v
load_checker	syntastic/syntax_checkers/javascript.vim	/^function! s:load_checker(checker)$/;"	f
loaded_applescript_syntax_checker	syntastic/syntax_checkers/applescript.vim	/^let loaded_applescript_syntax_checker = 1$/;"	v
loaded_c_syntax_checker	syntastic/syntax_checkers/c.vim	/^let loaded_c_syntax_checker = 1$/;"	v
loaded_coffee_syntax_checker	syntastic/syntax_checkers/coffee.vim	/^let loaded_coffee_syntax_checker = 1$/;"	v
loaded_cpp_syntax_checker	syntastic/syntax_checkers/cpp.vim	/^let loaded_cpp_syntax_checker = 1$/;"	v
loaded_css_syntax_checker	syntastic/syntax_checkers/css.vim	/^let loaded_css_syntax_checker = 1$/;"	v
loaded_cucumber_syntax_checker	syntastic/syntax_checkers/cucumber.vim	/^let loaded_cucumber_syntax_checker = 1$/;"	v
loaded_cuda_syntax_checker	syntastic/syntax_checkers/cuda.vim	/^let loaded_cuda_syntax_checker = 1$/;"	v
loaded_docbk_syntax_checker	syntastic/syntax_checkers/docbk.vim	/^let loaded_docbk_syntax_checker = 1$/;"	v
loaded_erlang_syntax_checker	syntastic/syntax_checkers/erlang.vim	/^let loaded_erlang_syntax_checker = 1$/;"	v
loaded_eruby_syntax_checker	syntastic/syntax_checkers/eruby.vim	/^let loaded_eruby_syntax_checker = 1$/;"	v
loaded_fortran_syntax_checker	syntastic/syntax_checkers/fortran.vim	/^let loaded_fortran_syntax_checker = 1$/;"	v
loaded_go_syntax_checker	syntastic/syntax_checkers/go.vim	/^let loaded_go_syntax_checker = 1$/;"	v
loaded_haml_syntax_checker	syntastic/syntax_checkers/haml.vim	/^let loaded_haml_syntax_checker = 1$/;"	v
loaded_haskell_syntax_checker	syntastic/syntax_checkers/haskell.vim	/^let loaded_haskell_syntax_checker = 1$/;"	v
loaded_html_syntax_checker	syntastic/syntax_checkers/html.vim	/^let loaded_html_syntax_checker = 1$/;"	v
loaded_javascript_syntax_checker	syntastic/syntax_checkers/javascript.vim	/^let loaded_javascript_syntax_checker = 1$/;"	v
loaded_less_syntax_checker	syntastic/syntax_checkers/less.vim	/^let loaded_less_syntax_checker = 1$/;"	v
loaded_lua_syntax_checker	syntastic/syntax_checkers/lua.vim	/^let loaded_lua_syntax_checker = 1$/;"	v
loaded_matchit	matchit/plugin/matchit.vim	/^let loaded_matchit = 1$/;"	v
loaded_matlab_syntax_checker	syntastic/syntax_checkers/matlab.vim	/^let loaded_matlab_syntax_checker = 1$/;"	v
loaded_perl_syntax_checker	syntastic/syntax_checkers/perl.vim	/^let loaded_perl_syntax_checker = 1$/;"	v
loaded_php_syntax_checker	syntastic/syntax_checkers/php.vim	/^let loaded_php_syntax_checker = 1$/;"	v
loaded_puppet_syntax_checker	syntastic/syntax_checkers/puppet.vim	/^let loaded_puppet_syntax_checker = 1$/;"	v
loaded_python_syntax_checker	syntastic/syntax_checkers/python.vim	/^let loaded_python_syntax_checker = 1$/;"	v
loaded_rcodetools	rcodetools/plugin/rcodetools.vim	/^let loaded_rcodetools = 1$/;"	v
loaded_ruby_syntax_checker	syntastic/syntax_checkers/ruby.vim	/^let loaded_ruby_syntax_checker = 1$/;"	v
loaded_sass_syntax_checker	syntastic/syntax_checkers/sass.vim	/^let loaded_sass_syntax_checker = 1$/;"	v
loaded_scss_syntax_checker	syntastic/syntax_checkers/scss.vim	/^let loaded_scss_syntax_checker = 1$/;"	v
loaded_sh_syntax_checker	syntastic/syntax_checkers/sh.vim	/^let loaded_sh_syntax_checker = 1$/;"	v
loaded_tcl_syntax_checker	syntastic/syntax_checkers/tcl.vim	/^let loaded_tcl_syntax_checker = 1$/;"	v
loaded_tex_syntax_checker	syntastic/syntax_checkers/tex.vim	/^let loaded_tex_syntax_checker = 1$/;"	v
loaded_vala_syntax_checker	syntastic/syntax_checkers/vala.vim	/^let loaded_vala_syntax_checker = 1$/;"	v
loaded_xhtml_syntax_checker	syntastic/syntax_checkers/xhtml.vim	/^let loaded_xhtml_syntax_checker = 1$/;"	v
loaded_xml_syntax_checker	syntastic/syntax_checkers/xml.vim	/^let loaded_xml_syntax_checker = 1$/;"	v
loaded_xslt_syntax_checker	syntastic/syntax_checkers/xslt.vim	/^let loaded_xslt_syntax_checker = 1$/;"	v
loaded_zpt_syntax_checker	syntastic/syntax_checkers/zpt.vim	/^let loaded_zpt_syntax_checker = 1$/;"	v
loc	webapi-vim/example/weather.vim	/^let loc = 'Osaka'$/;"	v
localeEdit	vim-rails/autoload/rails.vim	/^function! s:localeEdit(cmd,...)$/;"	f
localeList	vim-rails/autoload/rails.vim	/^function! s:localeList(A,L,P)$/;"	f
log	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:log(m)$/;"	f
lsCmd	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:lsCmd()$/;"	f
mailerEdit	vim-rails/autoload/rails.vim	/^function! s:mailerEdit(cmd,...)$/;"	f
mailerList	vim-rails/autoload/rails.vim	/^function! s:mailerList(A,L,P)$/;"	f
main	syntastic/syntax_checkers/erlang_check_file.erl	/^main([FileName]) ->$/;"	f
main	webapi-vim/autoload/webapi/sha1.vim	/^function s:main()$/;"	f
main_syntax	vim-jquery/syntax/jquery.vim	/^  let main_syntax = 'javascript'$/;"	v
main_syntax	vim-json/syntax/json.vim	/^  let main_syntax = 'json'$/;"	v
makewithruby	vim-rails/autoload/rails.vim	/^function! s:makewithruby(arg,bang,...)$/;"	f
matchNode	webapi-vim/autoload/webapi/xml.vim	/^function! s:matchNode(node, cond)$/;"	f
match_type	vim-rails/autoload/rails.vim	/^function! s:match_type(type,...)$/;"	f
matchcursor	vim-rails/autoload/rails.vim	/^function! s:matchcursor(pat)$/;"	f
matchfname	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:matchfname(item, pat)$/;"	f
matchlens	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:matchlens(str, pat, ...)$/;"	f
matchtabe	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:matchtabe(item, pat)$/;"	f
matchtabs	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:matchtabs(item, pat)$/;"	f
max	ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! s:max(len, max)$/;"	f
maxf	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:maxf(len)$/;"	f
menuBufEnter	vim-rails/plugin/rails.vim	/^function! s:menuBufEnter()$/;"	f
menuBufLeave	vim-rails/plugin/rails.vim	/^function! s:menuBufLeave()$/;"	f
menucmd	vim-rails/plugin/rails.vim	/^function! s:menucmd(priority)$/;"	f
menuprompt	vim-rails/plugin/rails.vim	/^function! s:menuprompt(vimcmd,prompt)$/;"	f
mergelists	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:mergelists()$/;"	f
meta	webapi-vim/example/gistview.vim	/^  let meta = file.childNodes('div')$/;"	v
metalEdit	vim-rails/autoload/rails.vim	/^function! s:metalEdit(cmd,...)$/;"	f
metalList	vim-rails/autoload/rails.vim	/^function! s:metalList(A,L,P)$/;"	f
mextargs	vim-rails/autoload/rails.vim	/^function! s:mextargs(str,num)$/;"	f
mfunc	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:mfunc()$/;"	f
migemo	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:migemo(str)$/;"	f
migrationEdit	vim-rails/autoload/rails.vim	/^function! s:migrationEdit(cmd,...)$/;"	f
migrationList	vim-rails/autoload/rails.vim	/^function! s:migrationList(A,L,P)$/;"	f
migspc	vim-rails/autoload/rails.vim	/^function! s:migspc(line)$/;"	f
mixedsort	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:mixedsort(...)$/;"	f
mkeep	vim-rails/autoload/rails.vim	/^function! s:mkeep(str)$/;"	f
mmode	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:mmode()$/;"	f
model	vim-rails/autoload/rails.vim	/^function! s:model(...)$/;"	f
modelEdit	vim-rails/autoload/rails.vim	/^function! s:modelEdit(cmd,...)$/;"	f
modelList	vim-rails/autoload/rails.vim	/^function! s:modelList(A,L,P)$/;"	f
modevar	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:modevar()$/;"	f
modify	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:modify(entry, type)$/;"	f
msg	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:msg(name, cwd)$/;"	f
mtype	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:mtype()$/;"	f
multipliers	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:multipliers(...)$/;"	f
mysearchpair	vim-endwise/plugin/endwise.vim	/^function! s:mysearchpair(beginpat,endpat,synpat)$/;"	f
namespace	VimClojure/autoload/vimclojure.vim	/^		let namespace = vimclojure#ExecuteNailWithInput("ReplNamespace", "",$/;"	v
narrowable	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:narrowable()$/;"	f
navcommand	vim-rake/plugin/rake.vim	/^function! s:navcommand(name) abort$/;"	f
newcache	ctrlp.vim/autoload/ctrlp/mixed.vim	/^fu! s:newcache(cwd)$/;"	f
no	webapi-vim/example/gistview.vim	/^let no = 357275$/;"	v
nocache	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:nocache(...)$/;"	f
nocache	ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! s:nocache()$/;"	f
nocache	ctrlp.vim/autoload/ctrlp/rtscript.vim	/^fu! s:nocache()$/;"	f
nosort	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:nosort()$/;"	f
nosplit	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:nosplit()$/;"	f
nr2byte	webapi-vim/autoload/webapi/html.vim	/^function! s:nr2byte(nr)$/;"	f
nr2byte	webapi-vim/autoload/webapi/http.vim	/^function! s:nr2byte(nr)$/;"	f
nr2byte	webapi-vim/autoload/webapi/json.vim	/^function! s:nr2byte(nr)$/;"	f
nr2byte	webapi-vim/autoload/webapi/xml.vim	/^function! s:nr2byte(nr)$/;"	f
nr2enc_char	webapi-vim/autoload/webapi/html.vim	/^function! s:nr2enc_char(charcode)$/;"	f
nr2enc_char	webapi-vim/autoload/webapi/http.vim	/^function! s:nr2enc_char(charcode)$/;"	f
nr2enc_char	webapi-vim/autoload/webapi/json.vim	/^function! s:nr2enc_char(charcode)$/;"	f
nr2enc_char	webapi-vim/autoload/webapi/xml.vim	/^function! s:nr2enc_char(charcode)$/;"	f
nr2hex	webapi-vim/autoload/webapi/http.vim	/^function! s:nr2hex(nr)$/;"	f
nr2hex	webapi-vim/autoload/webapi/xml.vim	/^function! s:nr2hex(nr)$/;"	f
obj	webapi-vim/example/gistview.vim	/^let obj = webapi#json#decode(res.content)$/;"	v
observerEdit	vim-rails/autoload/rails.vim	/^function! s:observerEdit(cmd,...)$/;"	f
observerList	vim-rails/autoload/rails.vim	/^function! s:observerList(A,L,P)$/;"	f
onlybitmaps	vim-powerline/fontpatcher/fontpatcher	/^	onlybitmaps = font.onlybitmaps$/;"	v
open_browser	gist-vim/autoload/gist.vim	/^function! s:open_browser(url)$/;"	f
openfile	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:openfile(cmd, fid, tail, chkmod, ...)$/;"	f
opfunc	vim-surround/plugin/surround.vim	/^function! s:opfunc(type,...) " {{{1$/;"	f
opfunc2	vim-surround/plugin/surround.vim	/^function! s:opfunc2(arg)$/;"	f
opts	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:opts(...)$/;"	f
opts	vim-rails/autoload/rails.vim	/^function! s:opts()$/;"	f
overlap_width	vim-powerline/fontpatcher/fontpatcher	/^			overlap_width = font.em \/ 48$/;"	v
parse_node	webapi-vim/autoload/webapi/atom.vim	/^function! s:parse_node(target, parent)$/;"	f
parse_return	webapi-vim/autoload/webapi/soap.vim	/^function! s:parse_return(node)$/;"	f
parse_tree	webapi-vim/autoload/webapi/xml.vim	/^function! s:parse_tree(ctx, top)$/;"	f
parseline	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:parseline(line)$/;"	f
parser	vim-powerline/fontpatcher/fontpatcher	/^parser = argparse.ArgumentParser(description='Font patcher for Powerline. Creates dividers and symbols in FontForge-compatible font files. Requires FontForge with Python bindings. Stores glyphs in the U+2B80-U+2BFF range ("Miscellaneous symbols and arrows"). Stores the patched font as a new, renamed font file by default.')$/;"	v
parts	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:parts(str)$/;"	f
password	webapi-vim/example/hatenadiary.vim	/^let password = 'your-hatena-password'$/;"	v
password	webapi-vim/example/jugem.vim	/^let password = 'your-jugem-password'$/;"	v
password	webapi-vim/example/livedoor.vim	/^let password = 'your-livedoor-password'$/;"	v
pathjoin	vim-rails/autoload/rails.vim	/^function! s:pathjoin(...) abort$/;"	f
pathshorten	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:pathshorten(str)$/;"	f
pathsplit	vim-rails/autoload/rails.vim	/^function! s:pathsplit(path) abort$/;"	f
pin	webapi-vim/example/twitter.vim	/^  let pin = input("PIN:")$/;"	v
pluginEdit	vim-rails/autoload/rails.vim	/^function! s:pluginEdit(cmd,...)$/;"	f
pluginList	vim-rails/autoload/rails.vim	/^function! s:pluginList(A,L,P)$/;"	f
pop_command	vim-bundler/plugin/bundler.vim	/^function! s:pop_command()$/;"	f
pop_command	vim-rails/autoload/rails.vim	/^function! s:pop_command()$/;"	f
pop_command	vim-rake/plugin/rake.vim	/^function! s:pop_command()$/;"	f
postUrl	webapi-vim/example/livedoor.vim	/^let postUrl = "http:\/\/cms.blog.livedoor.com\/atom"$/;"	v
post_url	webapi-vim/example/google-buzz.vim	/^let post_url = "https:\/\/www.googleapis.com\/buzz\/v1\/activities\/@me\/@self"$/;"	v
post_url	webapi-vim/example/twitter.vim	/^let post_url = "https:\/\/api.twitter.com\/1\/statuses\/update.xml"$/;"	v
prephelp	vim-rails/autoload/rails.vim	/^function! s:prephelp()$/;"	f
process	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:process(entries, type)$/;"	f
process	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:process(fname, ftype)$/;"	f
process	ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! s:process(clines, ...)$/;"	f
process	vim-surround/plugin/surround.vim	/^function! s:process(string)$/;"	f
project	vim-bundler/plugin/bundler.vim	/^function! s:project(...) abort$/;"	f
project	vim-rake/plugin/rake.vim	/^function! s:project(...) abort$/;"	f
project_alter_buffer_paths	vim-bundler/plugin/bundler.vim	/^function! s:project_alter_buffer_paths() dict abort$/;"	f
project_dirglob	vim-rake/plugin/rake.vim	/^function! s:project_dirglob(base) dict abort$/;"	f
project_first_file	vim-rake/plugin/rake.vim	/^function! s:project_first_file(...) dict abort$/;"	f
project_gems	vim-bundler/plugin/bundler.vim	/^function! s:project_gems() dict abort$/;"	f
project_has_directory	vim-rake/plugin/rake.vim	/^function! s:project_has_directory(file) dict$/;"	f
project_has_file	vim-rake/plugin/rake.vim	/^function! s:project_has_file(file) dict$/;"	f
project_path	vim-bundler/plugin/bundler.vim	/^function! s:project_path(...) dict abort$/;"	f
project_path	vim-rake/plugin/rake.vim	/^function! s:project_path(...) dict abort$/;"	f
project_relglob	vim-rake/plugin/rake.vim	/^function! s:project_relglob(path,glob,...) dict$/;"	f
project_tags_file	vim-rake/plugin/rake.vim	/^function! s:project_tags_file() dict abort$/;"	f
project_tasks	vim-rake/plugin/rake.vim	/^function! s:project_tasks()$/;"	f
push_chdir	vim-bundler/plugin/bundler.vim	/^function! s:push_chdir()$/;"	f
push_chdir	vim-rails/autoload/rails.vim	/^function! s:push_chdir(...)$/;"	f
push_chdir	vim-rake/plugin/rake.vim	/^function! s:push_chdir(...)$/;"	f
radixChars	VimClojure/syntax/clojure.vim	/^let radixChars = "0123456789abcdefghijklmnopqrstuvwxyz"$/;"	v
rails#app	vim-rails/autoload/rails.vim	/^function! rails#app(...)$/;"	f
rails#buffer	vim-rails/autoload/rails.vim	/^function! rails#buffer(...)$/;"	f
rails#cache_clear	vim-rails/autoload/rails.vim	/^function! rails#cache_clear(...)$/;"	f
rails#camelize	vim-rails/autoload/rails.vim	/^function! rails#camelize(str)$/;"	f
rails#log_syntax	vim-rails/autoload/rails.vim	/^function! rails#log_syntax()$/;"	f
rails#new_app_command	vim-rails/autoload/rails.vim	/^function! rails#new_app_command(bang,...)$/;"	f
rails#pluralize	vim-rails/autoload/rails.vim	/^function! rails#pluralize(word)$/;"	f
rails#singularize	vim-rails/autoload/rails.vim	/^function! rails#singularize(word)$/;"	f
rails#underscore	vim-rails/autoload/rails.vim	/^function! rails#underscore(str)$/;"	f
railsPluginAbolish	vim-rails/plugin/rails.vim	/^augroup railsPluginAbolish$/;"	a
railsPluginAuto	vim-rails/autoload/rails.vim	/^augroup railsPluginAuto$/;"	a
railsPluginDetect	vim-rails/plugin/rails.vim	/^augroup railsPluginDetect$/;"	a
railsPluginMenu	vim-rails/plugin/rails.vim	/^augroup railsPluginMenu$/;"	a
rake	vim-rake/plugin/rake.vim	/^augroup rake$/;"	a
rake#buffer	vim-rake/plugin/rake.vim	/^function! rake#buffer(...) abort$/;"	f
rake_path	vim-rake/plugin/rake.vim	/^augroup rake_path$/;"	a
rake_tags	vim-rake/plugin/rake.vim	/^augroup rake_tags$/;"	a
rake_utility	vim-rake/plugin/rake.vim	/^augroup rake_utility$/;"	a
readable_app	vim-rails/autoload/rails.vim	/^function! s:readable_app() dict abort$/;"	f
readable_calculate_file_type	vim-rails/autoload/rails.vim	/^function! s:readable_calculate_file_type() dict abort$/;"	f
readable_controller_name	vim-rails/autoload/rails.vim	/^function! s:readable_controller_name(...) dict abort$/;"	f
readable_default_rake_task	vim-rails/autoload/rails.vim	/^function! s:readable_default_rake_task(lnum) dict abort$/;"	f
readable_define_pattern	vim-rails/autoload/rails.vim	/^function! s:readable_define_pattern() dict abort$/;"	f
readable_end_of	vim-rails/autoload/rails.vim	/^function! s:readable_end_of(lnum) dict abort$/;"	f
readable_last_format	vim-rails/autoload/rails.vim	/^function! s:readable_last_format(start) dict abort$/;"	f
readable_last_method	vim-rails/autoload/rails.vim	/^function! s:readable_last_method(start) dict abort$/;"	f
readable_last_method_line	vim-rails/autoload/rails.vim	/^function! s:readable_last_method_line(start) dict abort$/;"	f
readable_last_opening_line	vim-rails/autoload/rails.vim	/^function! s:readable_last_opening_line(start,pattern,limit) dict abort$/;"	f
readable_line_count	vim-rails/autoload/rails.vim	/^function! s:readable_line_count() dict abort$/;"	f
readable_model_name	vim-rails/autoload/rails.vim	/^function! s:readable_model_name(...) dict abort$/;"	f
readable_preview_urls	vim-rails/autoload/rails.vim	/^function! s:readable_preview_urls(lnum) dict abort$/;"	f
readable_related	vim-rails/autoload/rails.vim	/^function! s:readable_related(...) dict abort$/;"	f
readable_type_name	vim-rails/autoload/rails.vim	/^function! s:readable_type_name() dict abort$/;"	f
readfile	vim-rails/autoload/rails.vim	/^function! s:readfile(path,...)$/;"	f
recall	vim-fugitive/plugin/fugitive.vim	/^function! s:recall()$/;"	f
record	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:record(bufnr)$/;"	f
redraw	vim-surround/plugin/surround.vim	/^function! s:redraw()$/;"	f
reformat	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:reformat(mrufs)$/;"	f
regexfilter	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:regexfilter(str)$/;"	f
regisfilter	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:regisfilter(reg)$/;"	f
reindent	vim-surround/plugin/surround.vim	/^function! s:reindent() " {{{1$/;"	f
relglob	vim-rails/autoload/rails.vim	/^function! s:relglob(...)$/;"	f
remarksigns	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:remarksigns()$/;"	f
repo	vim-fugitive/plugin/fugitive.vim	/^function! s:repo(...) abort$/;"	f
repo_aliases	vim-fugitive/plugin/fugitive.vim	/^function! s:repo_aliases() dict abort$/;"	f
repo_bare	vim-fugitive/plugin/fugitive.vim	/^function! s:repo_bare() dict abort$/;"	f
repo_config	vim-fugitive/plugin/fugitive.vim	/^function! s:repo_config(conf) dict abort$/;"	f
repo_dir	vim-fugitive/plugin/fugitive.vim	/^function! s:repo_dir(...) dict abort$/;"	f
repo_dirglob	vim-fugitive/plugin/fugitive.vim	/^function! s:repo_dirglob(base) dict abort$/;"	f
repo_git_chomp	vim-fugitive/plugin/fugitive.vim	/^function! s:repo_git_chomp(...) dict abort$/;"	f
repo_git_chomp_in_tree	vim-fugitive/plugin/fugitive.vim	/^function! s:repo_git_chomp_in_tree(...) dict abort$/;"	f
repo_git_command	vim-fugitive/plugin/fugitive.vim	/^function! s:repo_git_command(...) dict abort$/;"	f
repo_head_ref	vim-fugitive/plugin/fugitive.vim	/^function! s:repo_head_ref() dict abort$/;"	f
repo_keywordprg	vim-fugitive/plugin/fugitive.vim	/^function! s:repo_keywordprg() dict abort$/;"	f
repo_rev_parse	vim-fugitive/plugin/fugitive.vim	/^function! s:repo_rev_parse(rev) dict abort$/;"	f
repo_superglob	vim-fugitive/plugin/fugitive.vim	/^function! s:repo_superglob(base) dict abort$/;"	f
repo_translate	vim-fugitive/plugin/fugitive.vim	/^function! s:repo_translate(spec) dict abort$/;"	f
repo_tree	vim-fugitive/plugin/fugitive.vim	/^function! s:repo_tree(...) dict abort$/;"	f
repo_user	vim-fugitive/plugin/fugitive.vim	/^function! s:repo_user() dict abort$/;"	f
request_token_url	webapi-vim/example/google-buzz.vim	/^  let request_token_url = "https:\/\/www.google.com\/accounts\/OAuthGetRequestToken"$/;"	v
request_token_url	webapi-vim/example/twitter.vim	/^  let request_token_url = "https:\/\/twitter.com\/oauth\/request_token"$/;"	v
res	webapi-vim/example/gistview.vim	/^let res = webapi#http#get(printf('http:\/\/gist.github.com\/%d.json', no))$/;"	v
resetomnicomplete	vim-rails/autoload/rails.vim	/^function! s:resetomnicomplete()$/;"	f
result	VimClojure/autoload/vimclojure.vim	/^		let result = vimclojure#ExecuteNailWithInput("Repl", cmd,$/;"	v
result	VimClojure/autoload/vimclojure.vim	/^	let result = vimclojure#ExecuteNailWithInput("CheckSyntax", cmd,$/;"	v
ret	webapi-vim/example/google-buzz.vim	/^let ret = webapi#oauth#post(post_url, ctx, {}, data, {"Content-Type": "application\/atom+xml", "GData-Version": "2.0"})$/;"	v
ret	webapi-vim/example/twitter.vim	/^let ret = webapi#oauth#post(post_url, ctx, {}, {"status": status})$/;"	v
rooter	rooter/plugin/rooter.vim	/^  augroup rooter$/;"	a
rquote	vim-rails/autoload/rails.vim	/^function! s:rquote(str)$/;"	f
s:BaseTag	tagbar/autoload/tagbar.vim	/^let s:BaseTag = {}$/;"	v
s:CACHE_REVISION	vim-powerline/autoload/Pl.vim	/^	let s:CACHE_REVISION = 2$/;"	v
s:COMPOUND_ASSIGNMENT	vim-coffee-script/indent/coffee.vim	/^let s:COMPOUND_ASSIGNMENT = '[:=]\\s*\\%(if\\|unless\\|for\\|while\\|until\\|'$/;"	v
s:CONTINUATION	vim-coffee-script/indent/coffee.vim	/^let s:CONTINUATION = '\\<\\%(is\\|isnt\\|and\\|or\\)\\>$'$/;"	v
s:CONTINUATION_BLOCK	vim-coffee-script/indent/coffee.vim	/^let s:CONTINUATION_BLOCK = '[([{:=]$'$/;"	v
s:DOT_ACCESS	vim-coffee-script/indent/coffee.vim	/^let s:DOT_ACCESS = '^\\.'$/;"	v
s:DefaultJavadocPaths	VimClojure/autoload/vimclojure.vim	/^let s:DefaultJavadocPaths = {$/;"	v
s:EMPTY_SEGMENT	vim-powerline/autoload/Pl/Parser.vim	/^let s:EMPTY_SEGMENT = { 'type': 'empty' }$/;"	v
s:FileInfo	tagbar/autoload/tagbar.vim	/^let s:FileInfo = {}$/;"	v
s:HARD_DIVIDER	vim-powerline/autoload/Pl/Parser.vim	/^let s:HARD_DIVIDER = 0$/;"	v
s:INDENT_AFTER_KEYWORD	vim-coffee-script/indent/coffee.vim	/^let s:INDENT_AFTER_KEYWORD = '^\\%(if\\|unless\\|else\\|for\\|while\\|until\\|'$/;"	v
s:INDENT_AFTER_OPERATOR	vim-coffee-script/indent/coffee.vim	/^let s:INDENT_AFTER_OPERATOR = '\\%([([{:=]\\|[-=]>\\)$'$/;"	v
s:KindheaderTag	tagbar/autoload/tagbar.vim	/^let s:KindheaderTag = copy(s:BaseTag)$/;"	v
s:LEFT_SIDE	vim-powerline/autoload/Pl/Parser.vim	/^let s:LEFT_SIDE = 0$/;"	v
s:MAX_LOOKBACK	vim-coffee-script/indent/coffee.vim	/^let s:MAX_LOOKBACK = 50$/;"	v
s:NormalTag	tagbar/autoload/tagbar.vim	/^let s:NormalTag = copy(s:BaseTag)$/;"	v
s:OUTDENT_AFTER	vim-coffee-script/indent/coffee.vim	/^let s:OUTDENT_AFTER = '^\\%(return\\|break\\|continue\\|throw\\)\\>'$/;"	v
s:PADDING	vim-powerline/autoload/Pl/Parser.vim	/^let s:PADDING = 1$/;"	v
s:POSTFIX_CONDITION	vim-coffee-script/indent/coffee.vim	/^let s:POSTFIX_CONDITION = '\\S\\s\\+\\zs\\<\\%(if\\|unless\\)\\>'$/;"	v
s:PseudoTag	tagbar/autoload/tagbar.vim	/^let s:PseudoTag = copy(s:BaseTag)$/;"	v
s:RIGHT_SIDE	vim-powerline/autoload/Pl/Parser.vim	/^let s:RIGHT_SIDE = 2$/;"	v
s:SHA1Context	webapi-vim/autoload/webapi/sha1.vim	/^let s:SHA1Context = {}$/;"	v
s:SHA1Context	webapi-vim/autoload/webapi/sha1.vim	/^let s:SHA1Context.Computed = 0$/;"	v
s:SHA1Context	webapi-vim/autoload/webapi/sha1.vim	/^let s:SHA1Context.Corrupted = 0$/;"	v
s:SHA1Context	webapi-vim/autoload/webapi/sha1.vim	/^let s:SHA1Context.Intermediate_Hash = repeat([0], s:SHA1HashSize \/ 4)$/;"	v
s:SHA1Context	webapi-vim/autoload/webapi/sha1.vim	/^let s:SHA1Context.Length_High = 0$/;"	v
s:SHA1Context	webapi-vim/autoload/webapi/sha1.vim	/^let s:SHA1Context.Length_Low = 0$/;"	v
s:SHA1Context	webapi-vim/autoload/webapi/sha1.vim	/^let s:SHA1Context.Message_Block = repeat([0], 64)$/;"	v
s:SHA1Context	webapi-vim/autoload/webapi/sha1.vim	/^let s:SHA1Context.Message_Block_Index = 0$/;"	v
s:SHA1HashSize	webapi-vim/autoload/webapi/sha1.vim	/^let s:SHA1HashSize = 20$/;"	v
s:SINGLE_LINE_ELSE	vim-coffee-script/indent/coffee.vim	/^let s:SINGLE_LINE_ELSE = '^else\\s\\+\\%(\\<\\%(if\\|unless\\)\\>\\)\\@!'$/;"	v
s:SOFT_DIVIDER	vim-powerline/autoload/Pl/Parser.vim	/^let s:SOFT_DIVIDER = 1$/;"	v
s:SYNTAX_COMMENT	vim-coffee-script/indent/coffee.vim	/^let s:SYNTAX_COMMENT = 'coffee\\%(Comment\\|BlockComment\\|HeregexComment\\)'$/;"	v
s:SYNTAX_STRING	vim-coffee-script/indent/coffee.vim	/^let s:SYNTAX_STRING = 'coffee\\%(String\\|AssignString\\|Embed\\|Regex\\|Heregex\\|'$/;"	v
s:SYNTAX_STRING_COMMENT	vim-coffee-script/indent/coffee.vim	/^let s:SYNTAX_STRING_COMMENT = s:SYNTAX_STRING . '\\|' . s:SYNTAX_COMMENT$/;"	v
s:Strlen	tabular/autoload/tabular.vim	/^  let s:Strlen = function("strdisplaywidth")$/;"	v
s:TEST1	webapi-vim/autoload/webapi/sha1.vim	/^let s:TEST1   = "abc"$/;"	v
s:TEST2	webapi-vim/autoload/webapi/sha1.vim	/^let s:TEST2   = s:TEST2a . s:TEST2b$/;"	v
s:TEST2a	webapi-vim/autoload/webapi/sha1.vim	/^let s:TEST2a  = "abcdbcdecdefdefgefghfghighijhi"$/;"	v
s:TEST2b	webapi-vim/autoload/webapi/sha1.vim	/^let s:TEST2b  = "jkijkljklmklmnlmnomnopnopq"$/;"	v
s:TEST3	webapi-vim/autoload/webapi/sha1.vim	/^let s:TEST3   = "a"$/;"	v
s:TEST4	webapi-vim/autoload/webapi/sha1.vim	/^let s:TEST4   = s:TEST4a . s:TEST4b$/;"	v
s:TEST4a	webapi-vim/autoload/webapi/sha1.vim	/^let s:TEST4a  = "01234567012345670123456701234567"$/;"	v
s:TEST4b	webapi-vim/autoload/webapi/sha1.vim	/^let s:TEST4b  = "01234567012345670123456701234567"$/;"	v
s:TabularCommands	tabular/plugin/Tabular.vim	/^let s:TabularCommands = {}$/;"	v
s:TypeInfo	tagbar/autoload/tagbar.vim	/^let s:TypeInfo = {}$/;"	v
s:abstract_prototype	vim-bundler/plugin/bundler.vim	/^let s:abstract_prototype = {}$/;"	v
s:abstract_prototype	vim-fugitive/plugin/fugitive.vim	/^let s:abstract_prototype = {}$/;"	v
s:abstract_prototype	vim-rake/plugin/rake.vim	/^let s:abstract_prototype = {}$/;"	v
s:and	webapi-vim/autoload/webapi/sha1.vim	/^let s:and = [$/;"	v
s:app_prototype	vim-rails/autoload/rails.vim	/^let s:app_prototype = {}$/;"	v
s:app_prototype	vim-rails/autoload/rails.vim	/^let s:app_prototype.cache = s:cache_prototype$/;"	v
s:apps	vim-rails/autoload/rails.vim	/^  let s:apps = {}$/;"	v
s:ars	ctrlp.vim/autoload/ctrlp/dir.vim	/^let s:ars = ['s:maxdepth', 's:maxfiles', 's:compare_lim', 's:glob', 's:caching']$/;"	v
s:author_template	webapi-vim/autoload/webapi/atom.vim	/^let s:author_template = {$/;"	v
s:autocommands_done	tagbar/autoload/tagbar.vim	/^let s:autocommands_done   = 0$/;"	v
s:autocommands_enabled	tagbar/autoload/tagbar.vim	/^let s:autocommands_enabled = 0$/;"	v
s:bins	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^let s:bins = [$/;"	v
s:block_regex	vim-json/indent/json.vim	/^let s:block_regex = '\\%({\\)\\s*\\%(|\\%([*@]\\=\\h\\w*,\\=\\s*\\)\\%(,\\s*[*@]\\=\\h\\w*\\)*|\\)\\=' . s:line_term$/;"	v
s:buffer_prototype	vim-bundler/plugin/bundler.vim	/^let s:buffer_prototype = {}$/;"	v
s:buffer_prototype	vim-fugitive/plugin/fugitive.vim	/^let s:buffer_prototype = {}$/;"	v
s:buffer_prototype	vim-rails/autoload/rails.vim	/^let s:buffer_prototype = {}$/;"	v
s:buffer_prototype	vim-rake/plugin/rake.vim	/^let s:buffer_prototype = {}$/;"	v
s:bufprefix	gist-vim/autoload/gist.vim	/^let s:bufprefix = 'gist' . (has('unix') ? ':' : '_')$/;"	v
s:builtins_map	VimClojure/syntax/clojure.vim	/^		let s:builtins_map[category] = words$/;"	v
s:builtins_map	VimClojure/syntax/clojure.vim	/^	let s:builtins_map = {$/;"	v
s:cache_prototype	vim-rails/autoload/rails.vim	/^let s:cache_prototype = {'dict': {}}$/;"	v
s:category_template	webapi-vim/autoload/webapi/atom.vim	/^let s:category_template = {$/;"	v
s:ccex	ctrlp.vim/autoload/ctrlp.vim	/^let s:ccex = s:pref.'clear_cache_on_exit'$/;"	v
s:check_file	syntastic/syntax_checkers/erlang.vim	/^let s:check_file = expand('<sfile>:p:h') . '\/erlang_check_file.erl'$/;"	v
s:checked_ctags	tagbar/autoload/tagbar.vim	/^let s:checked_ctags       = 0$/;"	v
s:checked_ctags_types	tagbar/autoload/tagbar.vim	/^let s:checked_ctags_types = 0$/;"	v
s:closeStack	vim-autoclose/plugin/autoclose.vim	/^let s:closeStack = []$/;"	v
s:cmd_packet	slimux/plugin/slimux.vim	/^let s:cmd_packet = { "target_pane": "", "type": "cmd" }$/;"	v
s:commands	vim-bundler/plugin/bundler.vim	/^let s:commands = []$/;"	v
s:commands	vim-fugitive/plugin/fugitive.vim	/^let s:commands = []$/;"	v
s:commands	vim-rake/plugin/rake.vim	/^let s:commands = []$/;"	v
s:compare_lim	ctrlp.vim/autoload/ctrlp.vim	/^let s:compare_lim = 3000$/;"	v
s:compare_typeinfo	tagbar/autoload/tagbar.vim	/^let s:compare_typeinfo = {}$/;"	v
s:configfile	gist-vim/autoload/gist.vim	/^let s:configfile = expand('~\/.gist-vim')$/;"	v
s:cotstate	vim-autoclose/plugin/autoclose.vim	/^let s:cotstate = &completeopt$/;"	v
s:cpo_save	VimClojure/ftplugin/clojure.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	VimClojure/plugin/clojure.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim-json/indent/json.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim-rails/autoload/rails.vim	/^let s:cpo_save = &cpo$/;"	v
s:ctags_types	tagbar/autoload/tagbar.vim	/^let s:ctags_types         = {}$/;"	v
s:cterm2gui_dict	vim-powerline/autoload/Pl/Hi.vim	/^let s:cterm2gui_dict = {$/;"	v
s:debug	tagbar/autoload/tagbar.vim	/^let s:debug = 0$/;"	v
s:debug_file	tagbar/autoload/tagbar.vim	/^let s:debug_file = ''$/;"	v
s:default_includes	syntastic/syntax_checkers/c.vim	/^let s:default_includes = [ '.', '..', 'include', 'includes',$/;"	v
s:default_modes	vim-powerline/autoload/Pl/Segment.vim	/^let s:default_modes = ['n', 'N', 'v', 'i', 'r', 's']$/;"	v
s:delim	VimClojure/ftplugin/clojure.vim	/^	let s:delim = ":"$/;"	v
s:delim	VimClojure/ftplugin/clojure.vim	/^	let s:delim = ";"$/;"	v
s:dircounts	ctrlp.vim/autoload/ctrlp/dir.vim	/^let s:dircounts = {}$/;"	v
s:efm_backtrace	vim-rails/autoload/rails.vim	/^let s:efm_backtrace='%D(in\\ %f),'$/;"	v
s:entry_template	webapi-vim/autoload/webapi/atom.vim	/^let s:entry_template = {$/;"	v
s:errorformat	vim-bundler/plugin/bundler.vim	/^let s:errorformat = ''$/;"	v
s:extmap	gist-vim/autoload/gist.vim	/^let s:extmap = {$/;"	v
s:feed_template	webapi-vim/autoload/webapi/atom.vim	/^let s:feed_template = {$/;"	v
s:ficounts	ctrlp.vim/autoload/ctrlp.vim	/^let s:ficounts = {}$/;"	v
s:file	vim-rails/autoload/rails.vim	/^let s:file = expand('<sfile>:p')$/;"	v
s:file_prototype	vim-rails/autoload/rails.vim	/^let s:file_prototype = {}$/;"	v
s:filecounts	ctrlp.vim/autoload/ctrlp/rtscript.vim	/^let s:filecounts = {}$/;"	v
s:first_sign_id	syntastic/plugin/syntastic.vim	/^let s:first_sign_id = 5000$/;"	v
s:formatelempat	tabular/autoload/tabular.vim	/^let s:formatelempat = '\\%([lrc]\\d\\+\\)'$/;"	v
s:fpats	ctrlp.vim/autoload/ctrlp.vim	/^let s:fpats = {$/;"	v
s:glbs	ctrlp.vim/autoload/ctrlp.vim	/^let s:glbs = { 'magic': 1, 'to': 1, 'tm': 0, 'sb': 1, 'hls': 0, 'im': 0,$/;"	v
s:grouping_algorithms	vim-easymotion/autoload/EasyMotion.vim	/^	let s:grouping_algorithms = {$/;"	v
s:hlgrps	ctrlp.vim/autoload/ctrlp.vim	/^let s:hlgrps = {$/;"	v
s:icon_closed	tagbar/autoload/tagbar.vim	/^let s:icon_closed = g:tagbar_iconchars[0]$/;"	v
s:icon_open	tagbar/autoload/tagbar.vim	/^let s:icon_open   = g:tagbar_iconchars[1]$/;"	v
s:ics	tagbar/syntax/tagbar.vim	/^let s:ics = escape(join(g:tagbar_iconchars, ''), ']^\\-')$/;"	v
s:id	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	ctrlp.vim/autoload/ctrlp/changes.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	ctrlp.vim/autoload/ctrlp/dir.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	ctrlp.vim/autoload/ctrlp/line.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	ctrlp.vim/autoload/ctrlp/mixed.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	ctrlp.vim/autoload/ctrlp/quickfix.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	ctrlp.vim/autoload/ctrlp/rtscript.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	ctrlp.vim/autoload/ctrlp/tag.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	ctrlp.vim/autoload/ctrlp/undo.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:ignore_html_errors	syntastic/syntax_checkers/html.vim	/^let s:ignore_html_errors = [$/;"	v
s:is_maximized	tagbar/autoload/tagbar.vim	/^let s:is_maximized    = 0$/;"	v
s:k	webapi-vim/autoload/webapi/sha1.vim	/^let s:k = [$/;"	v
s:known_files	tagbar/autoload/tagbar.vim	/^let s:known_files = {$/;"	v
s:kprange	ctrlp.vim/autoload/ctrlp.vim	/^let s:kprange = {$/;"	v
s:last_highlight_tline	tagbar/autoload/tagbar.vim	/^let s:last_highlight_tline = 0$/;"	v
s:last_mps	matchit/plugin/matchit.vim	/^let s:last_mps = ""$/;"	v
s:last_selected_pane	slimux/plugin/slimux.vim	/^let s:last_selected_pane = ""$/;"	v
s:last_test_file	rcodetools/plugin/rcodetools.vim	/^let s:last_test_file = ""$/;"	v
s:last_test_lineno	rcodetools/plugin/rcodetools.vim	/^let s:last_test_lineno = 0$/;"	v
s:last_words	matchit/plugin/matchit.vim	/^let s:last_words = ":"$/;"	v
s:line_term	vim-json/indent/json.vim	/^let s:line_term = '\\s*\\%(\\%(\\\/\\\/\\).*\\)\\=$'$/;"	v
s:lines	vim-coffee-script/syntax/eco.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:link_template	webapi-vim/autoload/webapi/atom.vim	/^let s:link_template = {$/;"	v
s:nearby_disabled	tagbar/autoload/tagbar.vim	/^let s:nearby_disabled = 0$/;"	v
s:new_window	tagbar/autoload/tagbar.vim	/^let s:new_window      = 1$/;"	v
s:next_sign_id	syntastic/plugin/syntastic.vim	/^let s:next_sign_id = s:first_sign_id$/;"	v
s:notslash	matchit/plugin/matchit.vim	/^let s:notslash = '\\\\\\@<!\\%(\\\\\\\\\\)*'$/;"	v
s:old_cpo	vim-ruby-xmpfilter/plugin/xmpfilter.vim	/^let s:old_cpo = &cpo$/;"	v
s:or	webapi-vim/autoload/webapi/sha1.vim	/^let s:or = [$/;"	v
s:pat	vim-coffee-script/compiler/coffee.vim	/^let s:pat = '^' . current_compiler$/;"	v
s:pattern	tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=#\\([^-+# ]\\)\\@='$/;"	v
s:pattern	tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=+\\([^-+# ]\\)\\@='$/;"	v
s:pattern	tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=-\\([^-+# ]\\)\\@='$/;"	v
s:pattern	tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . '][-+# ]\\?\\)\\@<=[^*(]\\+\\(\\*\\?\\(([^)]\\+)\\)\\? :\\)\\@='$/;"	v
s:pattern	tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(^[' . s:ics . '] \\?\\)\\@<=[^-+: ]\\+[^:]\\+$'$/;"	v
s:pattern	tagbar/syntax/tagbar.vim	/^let s:pattern = '\\S\\@<![' . s:ics . ']\\([-+# ]\\?\\)\\@='$/;"	v
s:previous_cmd	slimux/plugin/slimux.vim	/^let s:previous_cmd = ""$/;"	v
s:project_prototype	vim-bundler/plugin/bundler.vim	/^let s:project_prototype = {}$/;"	v
s:project_prototype	vim-rake/plugin/rake.vim	/^let s:project_prototype = {}$/;"	v
s:projects	vim-bundler/plugin/bundler.vim	/^let s:projects = {}$/;"	v
s:projects	vim-rake/plugin/rake.vim	/^let s:projects = {}$/;"	v
s:rct_completion_col	rcodetools/plugin/rcodetools.vim	/^let s:rct_completion_col = 0$/;"	v
s:rct_tmpfile	rcodetools/plugin/rcodetools.vim	/^let s:rct_tmpfile = ""$/;"	v
s:readable_prototype	vim-rails/autoload/rails.vim	/^let s:readable_prototype = {}$/;"	v
s:repeatcount	webapi-vim/autoload/webapi/sha1.vim	/^let s:repeatcount = [1, 1, 1000000, 10]$/;"	v
s:repo_prototype	vim-fugitive/plugin/fugitive.vim	/^let s:repo_prototype = {}$/;"	v
s:repos	vim-fugitive/plugin/fugitive.vim	/^let s:repos = {}$/;"	v
s:result	VimClojure/syntax/clojure.vim	/^		let s:result = vimclojure#ExecuteNailWithInput("DynamicHighlighting",$/;"	v
s:resultarray	webapi-vim/autoload/webapi/sha1.vim	/^let s:resultarray = [$/;"	v
s:retry_send	slimux/plugin/slimux.vim	/^let s:retry_send = {}$/;"	v
s:running_windows	syntastic/plugin/syntastic.vim	/^let s:running_windows = has("win16") || has("win32") || has("win64")$/;"	v
s:save_cpo	VimClojure/autoload/vimclojure.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	VimClojure/autoload/vimclojure/util.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	VimClojure/indent/clojure.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	gist-vim/autoload/gist.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	matchit/plugin/matchit.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	rcodetools/plugin/rcodetools.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	rooter/plugin/rooter.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	syntastic/autoload/syntastic/c.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	syntastic/syntax_checkers/c.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	syntastic/syntax_checkers/cpp.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	tabular/after/plugin/TabularMaps.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	webapi-vim/autoload/webapi/atom.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	webapi-vim/autoload/webapi/base64.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	webapi-vim/autoload/webapi/bit.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	webapi-vim/autoload/webapi/feed.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	webapi-vim/autoload/webapi/html.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	webapi-vim/autoload/webapi/http.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	webapi-vim/autoload/webapi/json.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	webapi-vim/autoload/webapi/jsonrpc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	webapi-vim/autoload/webapi/metaweblog.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	webapi-vim/autoload/webapi/oauth.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	webapi-vim/autoload/webapi/sha1.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	webapi-vim/autoload/webapi/soap.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	webapi-vim/autoload/webapi/ucs.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	webapi-vim/autoload/webapi/xml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	webapi-vim/autoload/webapi/xmlrpc.vim	/^let s:save_cpo = &cpo$/;"	v
s:savecpo	tabular/autoload/tabular.vim	/^let s:savecpo = &cpo$/;"	v
s:savecpo	tabular/plugin/Tabular.vim	/^let s:savecpo = &cpo$/;"	v
s:segment_mods	vim-powerline/autoload/Pl/Mod.vim	/^let s:segment_mods = []$/;"	v
s:shaInputTooLong	webapi-vim/autoload/webapi/sha1.vim	/^let s:shaInputTooLong = 2 " input data too long$/;"	v
s:shaNull	webapi-vim/autoload/webapi/sha1.vim	/^let s:shaNull = 1         " Null pointer parameter$/;"	v
s:shaStateError	webapi-vim/autoload/webapi/sha1.vim	/^let s:shaStateError = 3   " called Input after Result$/;"	v
s:shaSuccess	webapi-vim/autoload/webapi/sha1.vim	/^let s:shaSuccess = 0$/;"	v
s:shade_hl_defaults	vim-easymotion/plugin/EasyMotion.vim	/^		let s:shade_hl_defaults = {$/;"	v
s:short_help	tagbar/autoload/tagbar.vim	/^let s:short_help      = 1$/;"	v
s:sid	rcodetools/plugin/rcodetools.vim	/^let s:sid = maparg("<SID>xx")$/;"	v
s:sid	rcodetools/plugin/rcodetools.vim	/^let s:sid = substitute(s:sid, 'xx', '', '')$/;"	v
s:sid	vim-rails/autoload/rails.vim	/^let s:sid = s:sub(maparg("<SID>xx"),'xx$','')$/;"	v
s:standard_table	webapi-vim/autoload/webapi/base64.vim	/^let s:standard_table = [$/;"	v
s:supported_checkers	syntastic/syntax_checkers/javascript.vim	/^let s:supported_checkers = ["gjslint", "jslint", "jsl", "jshint"]$/;"	v
s:system	gist-vim/autoload/gist.vim	/^let s:system = function(get(g:, 'webapi#system_function', 'system'))$/;"	v
s:system	webapi-vim/autoload/webapi/atom.vim	/^let s:system = function(get(g:, 'webapi#system_function', 'system'))$/;"	v
s:system	webapi-vim/autoload/webapi/http.vim	/^let s:system = function(get(g:, 'webapi#system_function', 'system'))$/;"	v
s:system	webapi-vim/autoload/webapi/xmlrpc.vim	/^let s:system = function(get(g:, 'webapi#system_function', 'system'))$/;"	v
s:target_hl_defaults	vim-easymotion/plugin/EasyMotion.vim	/^		let s:target_hl_defaults = {$/;"	v
s:temp_files	vim-fugitive/plugin/fugitive.vim	/^  let s:temp_files = {}$/;"	v
s:template	webapi-vim/autoload/webapi/metaweblog.vim	/^let s:template = {"uri" : ""}$/;"	v
s:template	webapi-vim/autoload/webapi/xml.vim	/^let s:template = { 'name': '', 'attr': {}, 'child': [] }$/;"	v
s:testarray	webapi-vim/autoload/webapi/sha1.vim	/^let s:testarray = [$/;"	v
s:text	ctrlp.vim/autoload/ctrlp/undo.vim	/^let s:text = map(['second', 'seconds', 'minutes', 'hours', 'days', 'weeks',$/;"	v
s:type_init_done	tagbar/autoload/tagbar.vim	/^let s:type_init_done      = 0$/;"	v
s:types	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^let s:types = {$/;"	v
s:uname	syntastic/plugin/syntastic.vim	/^    let s:uname = system('uname')$/;"	v
s:urlsafe_table	webapi-vim/autoload/webapi/base64.vim	/^let s:urlsafe_table = [$/;"	v
s:utf8len	webapi-vim/autoload/webapi/ucs.vim	/^let s:utf8len = [$/;"	v
s:view_types	vim-rails/autoload/rails.vim	/^let s:view_types = split('rhtml,erb,rxml,builder,rjs,mab,liquid,haml,dryml,mn,slim',',')$/;"	v
s:visibility_symbols	tagbar/autoload/tagbar.vim	/^let s:visibility_symbols = {$/;"	v
s:wig_cond	ctrlp.vim/autoload/ctrlp/utils.vim	/^let s:wig_cond = v:version > 702 || ( v:version == 702 && has('patch051') )$/;"	v
s:window_expanded	tagbar/autoload/tagbar.vim	/^let s:window_expanded   = 0$/;"	v
s:window_pos	tagbar/autoload/tagbar.vim	/^let s:window_pos = {$/;"	v
s:winrestcmd	tagbar/autoload/tagbar.vim	/^let s:winrestcmd      = ''$/;"	v
s:xor	webapi-vim/autoload/webapi/hmac.vim	/^let s:xor = [$/;"	v
s:xor	webapi-vim/autoload/webapi/sha1.vim	/^let s:xor = [$/;"	v
samerootsyml	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:samerootsyml(each, isfile, cwd)$/;"	f
sanstail	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:sanstail(str)$/;"	f
savebookmark	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:savebookmark(name, cwd)$/;"	f
savetofile	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:savetofile(mrufs)$/;"	f
scale_matrix	vim-powerline/fontpatcher/fontpatcher	/^			scale_matrix = psMat.scale(font_dim['width'] \/ sym_dim['width'], 1)$/;"	v
scale_ratio	vim-powerline/fontpatcher/fontpatcher	/^			scale_ratio = font_dim['height'] \/ sym_dim['height']$/;"	v
scale_ratio	vim-powerline/fontpatcher/fontpatcher	/^			scale_ratio = font_dim['width'] \/ sym_dim['width']$/;"	v
scanlineforuris	vim-rails/autoload/rails.vim	/^function! s:scanlineforuris(line)$/;"	f
schemaEdit	vim-rails/autoload/rails.vim	/^function! s:schemaEdit(cmd,...)$/;"	f
schemaList	vim-rails/autoload/rails.vim	/^function! s:schemaList(A,L,P)$/;"	f
scrub	vim-rails/autoload/rails.vim	/^function! s:scrub(collection,item)$/;"	f
selectiveexpand	vim-rails/autoload/rails.vim	/^function! s:selectiveexpand(pat,good,default,...)$/;"	f
self	VimClojure/autoload/vimclojure.vim	/^		let self._history = [cmd] + self._history$/;"	v
self	VimClojure/autoload/vimclojure.vim	/^		let self._historyDepth = 0$/;"	v
self	VimClojure/autoload/vimclojure.vim	/^		let self._prompt = namespace.value . "=>"$/;"	v
setentries	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:setentries()$/;"	f
setopt	vim-rails/autoload/rails.vim	/^function! s:setopt(opt,val)$/;"	f
settype	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:settype(type)$/;"	f
setupblank	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:setupblank()$/;"	f
shellesc	vim-bundler/plugin/bundler.vim	/^function! s:shellesc(arg) abort$/;"	f
shellesc	vim-fugitive/plugin/fugitive.vim	/^function! s:shellesc(arg) abort$/;"	f
shellesc	vim-rake/plugin/rake.vim	/^function! s:shellesc(arg) abort$/;"	f
shellslash	vim-bundler/plugin/bundler.vim	/^function! s:shellslash(path)$/;"	f
shellslash	vim-fugitive/plugin/fugitive.vim	/^function! s:shellslash(path)$/;"	f
shellslash	vim-rake/plugin/rake.vim	/^function! s:shellslash(path)$/;"	f
shellwords	gist-vim/autoload/gist.vim	/^function! s:shellwords(str)$/;"	f
shortest	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:shortest(lens)$/;"	f
sname	vim-rails/autoload/rails.vim	/^function! s:sname()$/;"	f
soap_call	webapi-vim/autoload/webapi/soap.vim	/^function! s:soap_call(url, func, ...)$/;"	f
specEdit	vim-rails/autoload/rails.vim	/^function! s:specEdit(cmd,...)$/;"	f
specList	vim-rails/autoload/rails.vim	/^function! s:specList(A,L,P)$/;"	f
startswith	vim-rails/autoload/rails.vim	/^function! s:startswith(string,prefix)$/;"	f
status	webapi-vim/example/twitter.vim	/^let status = "tweeeeeeeeeeeeeet"$/;"	v
str2bytes	webapi-vim/autoload/webapi/base64.vim	/^function! s:str2bytes(str)$/;"	f
str2bytes	webapi-vim/autoload/webapi/hmac.vim	/^function! s:str2bytes(str)$/;"	f
str2bytes	webapi-vim/autoload/webapi/sha1.vim	/^function! s:str2bytes(str)$/;"	f
strwidth	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:strwidth(str)$/;"	f
stylesheetEdit	vim-rails/autoload/rails.vim	/^function! s:stylesheetEdit(cmd,...)$/;"	f
stylesheetList	vim-rails/autoload/rails.vim	/^function! s:stylesheetList(A,L,P)$/;"	f
sub	vim-bundler/plugin/bundler.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
sub	vim-fugitive/plugin/fugitive.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
sub	vim-rails/autoload/rails.vim	/^function! s:sub(str,pat,rep)$/;"	f
sub	vim-rails/plugin/rails.vim	/^function! s:sub(str,pat,rep)$/;"	f
sub	vim-rake/plugin/rake.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
sublist	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:sublist(l, s, e)$/;"	f
sublist7071	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:sublist7071(l, s, e)$/;"	f
sym_attr	vim-powerline/fontpatcher/fontpatcher	/^		sym_attr = SYM_ATTR[sym_glyph.unicode]$/;"	v
sym_dim	vim-powerline/fontpatcher/fontpatcher	/^			sym_dim = get_dim(font[sym_glyph.unicode])$/;"	v
sym_dim	vim-powerline/fontpatcher/fontpatcher	/^		sym_dim = get_dim(font[sym_glyph.unicode])$/;"	v
sym_dim	vim-powerline/fontpatcher/fontpatcher	/^		sym_dim = get_dim(sym_glyph)$/;"	v
sym_ycenter	vim-powerline/fontpatcher/fontpatcher	/^		sym_ycenter  = sym_dim['height'] \/ 2$/;"	v
symbols	vim-powerline/fontpatcher/fontpatcher	/^	symbols = fontforge.open(args.symbol_font)$/;"	v
synname	vim-endwise/plugin/endwise.vim	/^function! s:synname()$/;"	f
syntastic	syntastic/plugin/syntastic.vim	/^augroup syntastic$/;"	a
syntastic#c#CheckPKG	syntastic/autoload/syntastic/c.vim	/^function! syntastic#c#CheckPKG(name, ...)$/;"	f
syntastic#c#CheckPhp	syntastic/autoload/syntastic/c.vim	/^function! syntastic#c#CheckPhp()$/;"	f
syntastic#c#CheckPython	syntastic/autoload/syntastic/c.vim	/^function! syntastic#c#CheckPython()$/;"	f
syntastic#c#CheckRuby	syntastic/autoload/syntastic/c.vim	/^function! syntastic#c#CheckRuby()$/;"	f
syntastic#c#SearchHeaders	syntastic/autoload/syntastic/c.vim	/^function! syntastic#c#SearchHeaders()$/;"	f
syntastic_auto_jump	syntastic/plugin/syntastic.vim	/^    let syntastic_auto_jump=0$/;"	v
syntax	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:syntax()$/;"	f
syntax	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:syntax()$/;"	f
syntax	ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! s:syntax()$/;"	f
syntax	ctrlp.vim/autoload/ctrlp/line.vim	/^fu! s:syntax()$/;"	f
syntax	ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! s:syntax()$/;"	f
syntax	ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! s:syntax()$/;"	f
syntax	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:syntax()$/;"	f
syntaxfile	vim-bundler/plugin/bundler.vim	/^function! s:syntaxfile()$/;"	f
syntaxlock	vim-bundler/plugin/bundler.vim	/^function! s:syntaxlock()$/;"	f
tabular#DoGTabularize	tabular/autoload/tabular.vim	/^function! tabular#DoGTabularize()$/;"	f
tabular#ElementFormatPattern	tabular/autoload/tabular.vim	/^function! tabular#ElementFormatPattern()$/;"	f
tabular#PipeRange	tabular/autoload/tabular.vim	/^function! tabular#PipeRange(includepat, ...) range$/;"	f
tabular#PipeRangeWithOptions	tabular/autoload/tabular.vim	/^function! tabular#PipeRangeWithOptions(includepat, filterlist, options) range$/;"	f
tabular#SplitDelimUnitTest	tabular/autoload/tabular.vim	/^function! tabular#SplitDelimUnitTest()$/;"	f
tabular#TabularizeStrings	tabular/autoload/tabular.vim	/^function! tabular#TabularizeStrings(strings, delim, ...)$/;"	f
tagbar#CloseWindow	tagbar/autoload/tagbar.vim	/^function! tagbar#CloseWindow() abort$/;"	f
tagbar#OpenWindow	tagbar/autoload/tagbar.vim	/^function! tagbar#OpenWindow(...) abort$/;"	f
tagbar#PauseAutocommands	tagbar/autoload/tagbar.vim	/^function! tagbar#PauseAutocommands() abort$/;"	f
tagbar#RestoreSession	tagbar/autoload/tagbar.vim	/^function! tagbar#RestoreSession() abort$/;"	f
tagbar#SetFoldLevel	tagbar/autoload/tagbar.vim	/^function! tagbar#SetFoldLevel(level, force) abort$/;"	f
tagbar#StartDebug	tagbar/autoload/tagbar.vim	/^function! tagbar#StartDebug(...) abort$/;"	f
tagbar#StopDebug	tagbar/autoload/tagbar.vim	/^function! tagbar#StopDebug() abort$/;"	f
tagbar#ToggleWindow	tagbar/autoload/tagbar.vim	/^function! tagbar#ToggleWindow() abort$/;"	f
tagbar#autoopen	tagbar/autoload/tagbar.vim	/^function! tagbar#autoopen(...) abort$/;"	f
tagbar#currentfile	tagbar/autoload/tagbar.vim	/^function! tagbar#currentfile() abort$/;"	f
tagbar#currenttag	tagbar/autoload/tagbar.vim	/^function! tagbar#currenttag(fmt, default, ...) abort$/;"	f
tagbar#gettypeconfig	tagbar/autoload/tagbar.vim	/^function! tagbar#gettypeconfig(type) abort$/;"	f
tagbar#getusertypes	tagbar/autoload/tagbar.vim	/^function! tagbar#getusertypes() abort$/;"	f
tagbar#highlighttag	tagbar/autoload/tagbar.vim	/^function! tagbar#highlighttag(openfolds, force) abort$/;"	f
tail	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:tail()$/;"	f
taskEdit	vim-rails/autoload/rails.vim	/^function! s:taskEdit(cmd,...)$/;"	f
taskList	vim-rails/autoload/rails.vim	/^function! s:taskList(A,L,P)$/;"	f
template.childNode	webapi-vim/autoload/webapi/xml.vim	/^function! s:template.childNode(...) dict$/;"	f
template.childNodes	webapi-vim/autoload/webapi/xml.vim	/^function! s:template.childNodes(...) dict$/;"	f
template.deletePost	webapi-vim/autoload/webapi/metaweblog.vim	/^function! s:template.deletePost(appkey, postid, username, password, ...) dict$/;"	f
template.editPost	webapi-vim/autoload/webapi/metaweblog.vim	/^function! s:template.editPost(postid, username, password, content, publish) dict$/;"	f
template.find	webapi-vim/autoload/webapi/xml.vim	/^function! s:template.find(...) dict$/;"	f
template.findAll	webapi-vim/autoload/webapi/xml.vim	/^function! s:template.findAll(...) dict$/;"	f
template.getPost	webapi-vim/autoload/webapi/metaweblog.vim	/^function! s:template.getPost(postid, username, password) dict$/;"	f
template.getRecentPosts	webapi-vim/autoload/webapi/metaweblog.vim	/^function! s:template.getRecentPosts(blogid, username, password, numberOfPosts) dict$/;"	f
template.newMediaObject	webapi-vim/autoload/webapi/metaweblog.vim	/^function! s:template.newMediaObject(blogid, username, password, file) dict$/;"	f
template.newPost	webapi-vim/autoload/webapi/metaweblog.vim	/^function! s:template.newPost(blogid, username, password, content, publish) dict$/;"	f
template.toString	webapi-vim/autoload/webapi/xml.vim	/^function! s:template.toString() dict$/;"	f
template.value	webapi-vim/autoload/webapi/xml.vim	/^function! s:template.value(...) dict$/;"	f
test	webapi-vim/autoload/webapi/hmac.vim	/^function s:test(name, func, key, data, digest)$/;"	f
text	webapi-vim/example/jugem.vim	/^let text = "How about this?<br \/><img src=\\"".imgurl["url"]."\\">"$/;"	v
textdialog	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:textdialog(str)$/;"	f
throw	vim-bundler/plugin/bundler.vim	/^function! s:throw(string) abort$/;"	f
throw	vim-fugitive/plugin/fugitive.vim	/^function! s:throw(string) abort$/;"	f
throw	vim-rake/plugin/rake.vim	/^function! s:throw(string) abort$/;"	f
to_fault	webapi-vim/autoload/webapi/xmlrpc.vim	/^function! s:to_fault(dom)$/;"	f
to_value	webapi-vim/autoload/webapi/xmlrpc.vim	/^function! s:to_value(content)$/;"	f
try	vim-rails/autoload/rails.vim	/^function! s:try(cmd) abort$/;"	f
uint8	webapi-vim/autoload/webapi/sha1.vim	/^function! s:uint8(n)$/;"	f
uniq	vim-rails/autoload/rails.vim	/^function! s:uniq(list)$/;"	f
unittestEdit	vim-rails/autoload/rails.vim	/^function! s:unittestEdit(cmd,...)$/;"	f
unittestList	vim-rails/autoload/rails.vim	/^function! s:unittestList(A,L,P)$/;"	f
unmarksigns	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:unmarksigns()$/;"	f
urlencode_char	webapi-vim/autoload/webapi/http.vim	/^function! s:urlencode_char(c)$/;"	f
usrign	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:usrign(item, type)$/;"	f
vacantdict	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:vacantdict(dict)$/;"	f
validfile	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:validfile(fname, ftype)$/;"	f
verifier	webapi-vim/example/google-buzz.vim	/^  let verifier = input("VERIFIER:")$/;"	v
viewEdit	vim-rails/autoload/rails.vim	/^function! s:viewEdit(cmd,...)$/;"	f
viewList	vim-rails/autoload/rails.vim	/^function! s:viewList(A,L,P)$/;"	f
viewspattern	vim-rails/autoload/rails.vim	/^function! s:viewspattern()$/;"	f
vimclojure#AddCompletions	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#AddCompletions(ns)$/;"	f
vimclojure#AddPathToOption	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#AddPathToOption(path, option)$/;"	f
vimclojure#AddToLispWords	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#AddToLispWords(word)$/;"	f
vimclojure#Browser	VimClojure/autoload/vimclojure.vim	/^		let vimclojure#Browser = "open"$/;"	v
vimclojure#Browser	VimClojure/autoload/vimclojure.vim	/^		let vimclojure#Browser = "start"$/;"	v
vimclojure#Browser	VimClojure/autoload/vimclojure.vim	/^		let vimclojure#Browser = "xdg-open"$/;"	v
vimclojure#Buffer	VimClojure/autoload/vimclojure.vim	/^let vimclojure#Buffer = copy(vimclojure#Object)$/;"	v
vimclojure#Buffer	VimClojure/autoload/vimclojure.vim	/^let vimclojure#Buffer["__superObjectInit"] = vimclojure#Buffer["Init"]$/;"	v
vimclojure#Buffer	VimClojure/autoload/vimclojure.vim	/^let vimclojure#Buffer["__superObjectNew"]  = vimclojure#Buffer["New"]$/;"	v
vimclojure#Buffer.Init	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Buffer.Init() dict$/;"	f
vimclojure#Buffer.New	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Buffer.New(...) dict$/;"	f
vimclojure#Buffer.clear	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Buffer.clear() dict$/;"	f
vimclojure#Buffer.close	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Buffer.close() dict$/;"	f
vimclojure#Buffer.goHere	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Buffer.goHere() dict$/;"	f
vimclojure#Buffer.showText	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Buffer.showText(text) dict$/;"	f
vimclojure#BufferName	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#BufferName()$/;"	f
vimclojure#BufferNr	VimClojure/autoload/vimclojure.vim	/^let vimclojure#BufferNr = 0$/;"	v
vimclojure#ClojureResultBuffer	VimClojure/autoload/vimclojure.vim	/^let vimclojure#ClojureResultBuffer = copy(vimclojure#ResultBuffer)$/;"	v
vimclojure#ClojureResultBuffer	VimClojure/autoload/vimclojure.vim	/^let vimclojure#ClojureResultBuffer["__superResultBufferInit"] =$/;"	v
vimclojure#ClojureResultBuffer	VimClojure/autoload/vimclojure.vim	/^let vimclojure#ClojureResultBuffer["__superResultBufferShowText"] =$/;"	v
vimclojure#ClojureResultBuffer.Init	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#ClojureResultBuffer.Init(...) dict$/;"	f
vimclojure#ClojureResultBuffer.showText	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#ClojureResultBuffer.showText(text) dict$/;"	f
vimclojure#ColorNamespace	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#ColorNamespace(highlights)$/;"	f
vimclojure#CommandPlug	VimClojure/autoload/vimclojure.vim	/^	function vimclojure#CommandPlug(f, args)$/;"	f
vimclojure#DocLookup	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#DocLookup(word)$/;"	f
vimclojure#DynamicHighlighting	VimClojure/autoload/vimclojure.vim	/^		let vimclojure#DynamicHighlighting = 0$/;"	v
vimclojure#DynamicHighlighting	VimClojure/autoload/vimclojure.vim	/^		let vimclojure#DynamicHighlighting = g:clj_dynamic_highlighting$/;"	v
vimclojure#EscapePathForOption	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#EscapePathForOption(path)$/;"	f
vimclojure#EvalBlock	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#EvalBlock()$/;"	f
vimclojure#EvalFile	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#EvalFile()$/;"	f
vimclojure#EvalLine	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#EvalLine()$/;"	f
vimclojure#EvalParagraph	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#EvalParagraph()$/;"	f
vimclojure#EvalToplevel	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#EvalToplevel()$/;"	f
vimclojure#ExecuteNail	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#ExecuteNail(nail, ...)$/;"	f
vimclojure#ExecuteNailWithInput	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#ExecuteNailWithInput(nail, input, ...)$/;"	f
vimclojure#ExtractSexpr	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#ExtractSexpr(toplevel)$/;"	f
vimclojure#FindDoc	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#FindDoc()$/;"	f
vimclojure#FuzzyIndent	VimClojure/autoload/vimclojure.vim	/^	let vimclojure#FuzzyIndent = 0$/;"	v
vimclojure#FuzzyIndentPatterns	VimClojure/autoload/vimclojure.vim	/^	let vimclojure#FuzzyIndentPatterns = "with.*,def.*,let.*"$/;"	v
vimclojure#GotoSource	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#GotoSource(word)$/;"	f
vimclojure#HighlightBuiltins	VimClojure/autoload/vimclojure.vim	/^		let vimclojure#HighlightBuiltins = 1$/;"	v
vimclojure#HighlightBuiltins	VimClojure/autoload/vimclojure.vim	/^		let vimclojure#HighlightBuiltins = g:clj_highlight_builtins$/;"	v
vimclojure#InitBuffer	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#InitBuffer(...)$/;"	f
vimclojure#JavadocLookup	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#JavadocLookup(word)$/;"	f
vimclojure#JavadocPathMap	VimClojure/autoload/vimclojure.vim	/^		let vimclojure#JavadocPathMap[k] = s:DefaultJavadocPaths[k]$/;"	v
vimclojure#JavadocPathMap	VimClojure/autoload/vimclojure.vim	/^	let vimclojure#JavadocPathMap = {}$/;"	v
vimclojure#MacroExpand	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#MacroExpand(firstOnly)$/;"	f
vimclojure#MakeCommandPlug	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#MakeCommandPlug(mode, plug, f, args)$/;"	f
vimclojure#MakeProtectedPlug	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#MakeProtectedPlug(mode, plug, f, args)$/;"	f
vimclojure#MapPlug	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#MapPlug(mode, keys, plug)$/;"	f
vimclojure#MetaLookup	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#MetaLookup(word)$/;"	f
vimclojure#NailgunClient	VimClojure/autoload/vimclojure.vim	/^	let vimclojure#NailgunClient = "ng"$/;"	v
vimclojure#NailgunPort	VimClojure/autoload/vimclojure.vim	/^	let vimclojure#NailgunPort = "2113"$/;"	v
vimclojure#NailgunServer	VimClojure/autoload/vimclojure.vim	/^	let vimclojure#NailgunServer = "127.0.0.1"$/;"	v
vimclojure#Object	VimClojure/autoload/vimclojure.vim	/^let vimclojure#Object = {}$/;"	v
vimclojure#Object.Init	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Object.Init() dict$/;"	f
vimclojure#Object.New	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Object.New(...) dict$/;"	f
vimclojure#OmniCompletion	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#OmniCompletion(findstart, base)$/;"	f
vimclojure#ParenRainbow	VimClojure/autoload/vimclojure.vim	/^		let vimclojure#ParenRainbow = 0$/;"	v
vimclojure#ParenRainbow	VimClojure/autoload/vimclojure.vim	/^		let vimclojure#ParenRainbow = g:clj_paren_rainbow$/;"	v
vimclojure#ProtectedPlug	VimClojure/autoload/vimclojure.vim	/^	function vimclojure#ProtectedPlug(f, args)$/;"	f
vimclojure#Repl	VimClojure/autoload/vimclojure.vim	/^let vimclojure#Repl = copy(vimclojure#Window)$/;"	v
vimclojure#Repl	VimClojure/autoload/vimclojure.vim	/^let vimclojure#Repl._history = []$/;"	v
vimclojure#Repl	VimClojure/autoload/vimclojure.vim	/^let vimclojure#Repl._historyDepth = 0$/;"	v
vimclojure#Repl	VimClojure/autoload/vimclojure.vim	/^let vimclojure#Repl._replCommands = [ ",close", ",st", ",ct", ",toggle-pprint" ]$/;"	v
vimclojure#Repl	VimClojure/autoload/vimclojure.vim	/^let vimclojure#Repl["__superWindowClear"] = vimclojure#Repl.clear$/;"	v
vimclojure#Repl	VimClojure/autoload/vimclojure.vim	/^let vimclojure#Repl["__superWindowInit"]  = vimclojure#Repl.Init$/;"	v
vimclojure#Repl	VimClojure/autoload/vimclojure.vim	/^let vimclojure#Repl["__superWindowNew"]   = vimclojure#Repl.New$/;"	v
vimclojure#Repl.Init	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Repl.Init(buftype, namespace) dict$/;"	f
vimclojure#Repl.New	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Repl.New(namespace, ...) dict$/;"	f
vimclojure#Repl.clear	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Repl.clear() dict$/;"	f
vimclojure#Repl.deleteLast	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Repl.deleteLast() dict$/;"	f
vimclojure#Repl.doReplCommand	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Repl.doReplCommand(cmd) dict$/;"	f
vimclojure#Repl.downHistory	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Repl.downHistory() dict$/;"	f
vimclojure#Repl.enterHook	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Repl.enterHook() dict$/;"	f
vimclojure#Repl.getCommand	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Repl.getCommand() dict$/;"	f
vimclojure#Repl.hatHook	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Repl.hatHook() dict$/;"	f
vimclojure#Repl.isReplCommand	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Repl.isReplCommand(cmd) dict$/;"	f
vimclojure#Repl.showPrompt	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Repl.showPrompt() dict$/;"	f
vimclojure#Repl.upHistory	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Repl.upHistory() dict$/;"	f
vimclojure#ReplDoEnter	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#ReplDoEnter()$/;"	f
vimclojure#ReportError	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#ReportError(msg)$/;"	f
vimclojure#RequireFile	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#RequireFile(all)$/;"	f
vimclojure#ResultBuffer	VimClojure/autoload/vimclojure.vim	/^let vimclojure#ResultBuffer = copy(vimclojure#Buffer)$/;"	v
vimclojure#ResultBuffer	VimClojure/autoload/vimclojure.vim	/^let vimclojure#ResultBuffer["__superBufferClear"] = vimclojure#ResultBuffer.clear$/;"	v
vimclojure#ResultBuffer	VimClojure/autoload/vimclojure.vim	/^let vimclojure#ResultBuffer["__superBufferInit"]  = vimclojure#ResultBuffer.Init$/;"	v
vimclojure#ResultBuffer.Init	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#ResultBuffer.Init() dict$/;"	f
vimclojure#ResultBuffer.clear	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#ResultBuffer.clear() dict$/;"	f
vimclojure#ResultWindow	VimClojure/autoload/vimclojure.vim	/^let vimclojure#ResultWindow = copy(vimclojure#Window)$/;"	v
vimclojure#ResultWindow	VimClojure/autoload/vimclojure.vim	/^let vimclojure#ResultWindow["__superWindowClose"] = vimclojure#ResultWindow["close"]$/;"	v
vimclojure#ResultWindow	VimClojure/autoload/vimclojure.vim	/^let vimclojure#ResultWindow["__superWindowNew"]   = vimclojure#ResultWindow["New"]$/;"	v
vimclojure#ResultWindow.CloseWindow	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#ResultWindow.CloseWindow() dict$/;"	f
vimclojure#ResultWindow.New	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#ResultWindow.New(buftype, ...) dict$/;"	f
vimclojure#ResultWindow.close	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#ResultWindow.close() dict$/;"	f
vimclojure#RunTests	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#RunTests(all)$/;"	f
vimclojure#SearchThreshold	VimClojure/autoload/vimclojure.vim	/^	let vimclojure#SearchThreshold = 100$/;"	v
vimclojure#SetupKeyMap	VimClojure/autoload/vimclojure.vim	/^	let vimclojure#SetupKeyMap = 1$/;"	v
vimclojure#ShellEscapeArguments	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#ShellEscapeArguments(vals)$/;"	f
vimclojure#ShowClojureResult	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#ShowClojureResult(result, nspace)$/;"	f
vimclojure#ShowResult	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#ShowResult(result)$/;"	f
vimclojure#SourceLookup	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#SourceLookup(word)$/;"	f
vimclojure#SplitPos	VimClojure/autoload/vimclojure.vim	/^	let vimclojure#SplitPos = "top"$/;"	v
vimclojure#SplitSize	VimClojure/autoload/vimclojure.vim	/^	let vimclojure#SplitSize = ""$/;"	v
vimclojure#StartRepl	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#StartRepl(...)$/;"	f
vimclojure#ToggleParenRainbow	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#ToggleParenRainbow()$/;"	f
vimclojure#UseErrorBuffer	VimClojure/autoload/vimclojure.vim	/^	let vimclojure#UseErrorBuffer = 1$/;"	v
vimclojure#WantNailgun	VimClojure/autoload/vimclojure.vim	/^		let vimclojure#WantNailgun = 0$/;"	v
vimclojure#WantNailgun	VimClojure/autoload/vimclojure.vim	/^		let vimclojure#WantNailgun = g:clj_want_gorilla$/;"	v
vimclojure#WarnDeprecated	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#WarnDeprecated(old, new)$/;"	f
vimclojure#Window	VimClojure/autoload/vimclojure.vim	/^let vimclojure#Window = copy(vimclojure#Object)$/;"	v
vimclojure#Window	VimClojure/autoload/vimclojure.vim	/^let vimclojure#Window["__superObjectInit"] = vimclojure#Window["Init"]$/;"	v
vimclojure#Window	VimClojure/autoload/vimclojure.vim	/^let vimclojure#Window["__superObjectNew"] = vimclojure#Window["New"]$/;"	v
vimclojure#Window.Init	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Window.Init(buftype) dict$/;"	f
vimclojure#Window.New	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Window.New(...) dict$/;"	f
vimclojure#Window.clear	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Window.clear() dict$/;"	f
vimclojure#Window.close	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Window.close() dict$/;"	f
vimclojure#Window.findThis	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Window.findThis() dict$/;"	f
vimclojure#Window.goHere	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Window.goHere() dict$/;"	f
vimclojure#Window.resize	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Window.resize() dict$/;"	f
vimclojure#Window.showOutput	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Window.showOutput(output) dict$/;"	f
vimclojure#Window.showText	VimClojure/autoload/vimclojure.vim	/^function! vimclojure#Window.showText(text) dict$/;"	f
vimclojure#util#MoveBackward	VimClojure/autoload/vimclojure/util.vim	/^function! vimclojure#util#MoveBackward()$/;"	f
vimclojure#util#MoveForward	VimClojure/autoload/vimclojure/util.vim	/^function! vimclojure#util#MoveForward()$/;"	f
vimclojure#util#SynIdName	VimClojure/autoload/vimclojure/util.vim	/^function! vimclojure#util#SynIdName()$/;"	f
vimclojure#util#WithSaved	VimClojure/autoload/vimclojure/util.vim	/^function! vimclojure#util#WithSaved(closure)$/;"	f
vimclojure#util#WithSavedOption	VimClojure/autoload/vimclojure/util.vim	/^function! vimclojure#util#WithSavedOption(option, closure)$/;"	f
vimclojure#util#WithSavedPosition	VimClojure/autoload/vimclojure/util.vim	/^function! vimclojure#util#WithSavedPosition(closure)$/;"	f
vimclojure#util#WithSavedRegister	VimClojure/autoload/vimclojure/util.vim	/^function! vimclojure#util#WithSavedRegister(reg, closure)$/;"	f
vimclojure#util#Yank	VimClojure/autoload/vimclojure/util.vim	/^function! vimclojure#util#Yank(r, how)$/;"	f
w:slimux_python_allowed_indent0	slimux/ftplugin/python.vim	/^let w:slimux_python_allowed_indent0 = ["elif", "else", "except", "finally"]$/;"	v
walker	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:walker(m, p, d)$/;"	f
warn	vim-bundler/plugin/bundler.vim	/^function! s:warn(str)$/;"	f
warn	vim-fugitive/plugin/fugitive.vim	/^function! s:warn(str)$/;"	f
warn	vim-rails/autoload/rails.vim	/^function! s:warn(str)$/;"	f
warn	vim-rake/plugin/rake.vim	/^function! s:warn(str)$/;"	f
webapi#atom#createEntry	webapi-vim/autoload/webapi/atom.vim	/^function! webapi#atom#createEntry(uri, user, pass, entry, ...)$/;"	f
webapi#atom#deleteEntry	webapi-vim/autoload/webapi/atom.vim	/^function! webapi#atom#deleteEntry(uri, user, pass)$/;"	f
webapi#atom#getEntry	webapi-vim/autoload/webapi/atom.vim	/^function! webapi#atom#getEntry(uri, user, pass)$/;"	f
webapi#atom#getFeed	webapi-vim/autoload/webapi/atom.vim	/^function! webapi#atom#getFeed(uri, user, pass)$/;"	f
webapi#atom#getService	webapi-vim/autoload/webapi/atom.vim	/^function! webapi#atom#getService(uri, user, pass)$/;"	f
webapi#atom#newEntry	webapi-vim/autoload/webapi/atom.vim	/^function! webapi#atom#newEntry()$/;"	f
webapi#atom#updateEntry	webapi-vim/autoload/webapi/atom.vim	/^function! webapi#atom#updateEntry(uri, user, pass, entry, ...)$/;"	f
webapi#base64#b64decode	webapi-vim/autoload/webapi/base64.vim	/^function! webapi#base64#b64decode(data)$/;"	f
webapi#base64#b64encode	webapi-vim/autoload/webapi/base64.vim	/^function! webapi#base64#b64encode(data)$/;"	f
webapi#base64#b64encodebin	webapi-vim/autoload/webapi/base64.vim	/^function! webapi#base64#b64encodebin(data)$/;"	f
webapi#base64#test	webapi-vim/autoload/webapi/base64.vim	/^function! webapi#base64#test()$/;"	f
webapi#bit#and	webapi-vim/autoload/webapi/bit.vim	/^function! webapi#bit#and(a,b)$/;"	f
webapi#bit#bin2dec	webapi-vim/autoload/webapi/bit.vim	/^function! webapi#bit#bin2dec(v)$/;"	f
webapi#bit#dec2bin	webapi-vim/autoload/webapi/bit.vim	/^function! webapi#bit#dec2bin(v)$/;"	f
webapi#bit#or	webapi-vim/autoload/webapi/bit.vim	/^function! webapi#bit#or(a,b)$/;"	f
webapi#bit#shift	webapi-vim/autoload/webapi/bit.vim	/^function! webapi#bit#shift(a,b)$/;"	f
webapi#feed#parseURL	webapi-vim/autoload/webapi/feed.vim	/^function! webapi#feed#parseURL(url)$/;"	f
webapi#hmac#hmac	webapi-vim/autoload/webapi/hmac.vim	/^function webapi#hmac#hmac(key, text, hash, blocksize)$/;"	f
webapi#hmac#md5	webapi-vim/autoload/webapi/hmac.vim	/^function webapi#hmac#md5(key, text)$/;"	f
webapi#hmac#sha1	webapi-vim/autoload/webapi/hmac.vim	/^function webapi#hmac#sha1(key, text)$/;"	f
webapi#hmac#test	webapi-vim/autoload/webapi/hmac.vim	/^function webapi#hmac#test()$/;"	f
webapi#html#decodeEntityReference	webapi-vim/autoload/webapi/html.vim	/^function! webapi#html#decodeEntityReference(str)$/;"	f
webapi#html#encodeEntityReference	webapi-vim/autoload/webapi/html.vim	/^function! webapi#html#encodeEntityReference(str)$/;"	f
webapi#html#parse	webapi-vim/autoload/webapi/html.vim	/^function! webapi#html#parse(html)$/;"	f
webapi#html#parseFile	webapi-vim/autoload/webapi/html.vim	/^function! webapi#html#parseFile(fname)$/;"	f
webapi#html#parseURL	webapi-vim/autoload/webapi/html.vim	/^function! webapi#html#parseURL(url)$/;"	f
webapi#http#decodeURI	webapi-vim/autoload/webapi/http.vim	/^function! webapi#http#decodeURI(str)$/;"	f
webapi#http#encodeURI	webapi-vim/autoload/webapi/http.vim	/^function! webapi#http#encodeURI(items)$/;"	f
webapi#http#encodeURIComponent	webapi-vim/autoload/webapi/http.vim	/^function! webapi#http#encodeURIComponent(items)$/;"	f
webapi#http#escape	webapi-vim/autoload/webapi/http.vim	/^function! webapi#http#escape(str)$/;"	f
webapi#http#get	webapi-vim/autoload/webapi/http.vim	/^function! webapi#http#get(url, ...)$/;"	f
webapi#http#post	webapi-vim/autoload/webapi/http.vim	/^function! webapi#http#post(url, ...)$/;"	f
webapi#json#decode	webapi-vim/autoload/webapi/json.vim	/^function! webapi#json#decode(json)$/;"	f
webapi#json#encode	webapi-vim/autoload/webapi/json.vim	/^function! webapi#json#encode(val)$/;"	f
webapi#json#false	webapi-vim/autoload/webapi/json.vim	/^function! webapi#json#false()$/;"	f
webapi#json#null	webapi-vim/autoload/webapi/json.vim	/^function! webapi#json#null()$/;"	f
webapi#json#true	webapi-vim/autoload/webapi/json.vim	/^function! webapi#json#true()$/;"	f
webapi#jsonrpc#call	webapi-vim/autoload/webapi/jsonrpc.vim	/^function! webapi#jsonrpc#call(uri, func, args)$/;"	f
webapi#jsonrpc#wrap	webapi-vim/autoload/webapi/jsonrpc.vim	/^function! webapi#jsonrpc#wrap(contexts)$/;"	f
webapi#metaWeblog#proxy	webapi-vim/autoload/webapi/metaweblog.vim	/^function! webapi#metaWeblog#proxy(uri)$/;"	f
webapi#oauth#access_token	webapi-vim/autoload/webapi/oauth.vim	/^function! webapi#oauth#access_token(url, ctx, ...)$/;"	f
webapi#oauth#get	webapi-vim/autoload/webapi/oauth.vim	/^function! webapi#oauth#get(url, ctx, ...)$/;"	f
webapi#oauth#post	webapi-vim/autoload/webapi/oauth.vim	/^function! webapi#oauth#post(url, ctx, ...)$/;"	f
webapi#oauth#request_token	webapi-vim/autoload/webapi/oauth.vim	/^function! webapi#oauth#request_token(url, ctx, ...)$/;"	f
webapi#sha1#sha1	webapi-vim/autoload/webapi/sha1.vim	/^function! webapi#sha1#sha1(str)$/;"	f
webapi#sha1#sha1bin	webapi-vim/autoload/webapi/sha1.vim	/^function! webapi#sha1#sha1bin(bin)$/;"	f
webapi#sha1#test	webapi-vim/autoload/webapi/sha1.vim	/^function! webapi#sha1#test()$/;"	f
webapi#soap#proxy	webapi-vim/autoload/webapi/soap.vim	/^function! webapi#soap#proxy(url)$/;"	f
webapi#ucs#byte2nr	webapi-vim/autoload/webapi/ucs.vim	/^function! webapi#ucs#byte2nr(byte)$/;"	f
webapi#xml#createElement	webapi-vim/autoload/webapi/xml.vim	/^function! webapi#xml#createElement(name)$/;"	f
webapi#xml#parse	webapi-vim/autoload/webapi/xml.vim	/^function! webapi#xml#parse(xml)$/;"	f
webapi#xml#parseFile	webapi-vim/autoload/webapi/xml.vim	/^function! webapi#xml#parseFile(fname)$/;"	f
webapi#xml#parseURL	webapi-vim/autoload/webapi/xml.vim	/^function! webapi#xml#parseURL(url)$/;"	f
webapi#xmlrpc#call	webapi-vim/autoload/webapi/xmlrpc.vim	/^function! webapi#xmlrpc#call(uri, func, args)$/;"	f
webapi#xmlrpc#false	webapi-vim/autoload/webapi/xmlrpc.vim	/^function! webapi#xmlrpc#false()$/;"	f
webapi#xmlrpc#nil	webapi-vim/autoload/webapi/xmlrpc.vim	/^function! webapi#xmlrpc#nil()$/;"	f
webapi#xmlrpc#true	webapi-vim/autoload/webapi/xmlrpc.vim	/^function! webapi#xmlrpc#true()$/;"	f
webapi#xmlrpc#wrap	webapi-vim/autoload/webapi/xmlrpc.vim	/^function! webapi#xmlrpc#wrap(contexts)$/;"	f
winexec	tagbar/autoload/tagbar.vim	/^function! s:winexec(cmd) abort$/;"	f
words	VimClojure/syntax/clojure.vim	/^		let words = map(copy(words), '"clojure.core\/" . v:val') + words$/;"	v
words	VimClojure/syntax/clojure.vim	/^		let words = split(s:builtins_map[category], " ")$/;"	v
wrap	vim-surround/plugin/surround.vim	/^function! s:wrap(string,char,type,...)$/;"	f
wrapreg	vim-surround/plugin/surround.vim	/^function! s:wrapreg(reg,char,...)$/;"	f
writecache	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:writecache(cafile)$/;"	f
writecache	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:writecache(lines)$/;"	f
xml	xmledit/ftplugin/eruby.vim	/^augroup xml$/;"	a
xml	xmledit/ftplugin/html.vim	/^augroup xml$/;"	a
xml	xmledit/ftplugin/xml.vim	/^augroup xml$/;"	a
xmpfilter#run	vim-ruby-xmpfilter/autoload/xmpfilter.vim	/^function! xmpfilter#run(mode) range "{{{$/;"	f
xmpfilter#toggle_mark	vim-ruby-xmpfilter/autoload/xmpfilter.vim	/^function! xmpfilter#toggle_mark(mode) range "{{{$/;"	f
yS	vim-surround/plugin/surround.vim	/^  nmap yS  <Plug>YSurround$/;"	m
ySS	vim-surround/plugin/surround.vim	/^  nmap ySS <Plug>YSsurround$/;"	m
ySs	vim-surround/plugin/surround.vim	/^  nmap ySs <Plug>YSsurround$/;"	m
ys	vim-surround/plugin/surround.vim	/^  nmap ys  <Plug>Ysurround$/;"	m
yss	vim-surround/plugin/surround.vim	/^  nmap yss <Plug>Yssurround$/;"	m
